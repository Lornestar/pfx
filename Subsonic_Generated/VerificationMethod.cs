using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the VerificationMethod class.
	/// </summary>
    [Serializable]
	public partial class VerificationMethodCollection : ActiveList<VerificationMethod, VerificationMethodCollection>
	{	   
		public VerificationMethodCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>VerificationMethodCollection</returns>
		public VerificationMethodCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                VerificationMethod o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Verification_Methods table.
	/// </summary>
	[Serializable]
	public partial class VerificationMethod : ActiveRecord<VerificationMethod>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public VerificationMethod()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public VerificationMethod(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public VerificationMethod(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public VerificationMethod(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Verification_Methods", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarVerificationMethodKey = new TableSchema.TableColumn(schema);
				colvarVerificationMethodKey.ColumnName = "verification_method_key";
				colvarVerificationMethodKey.DataType = DbType.Int32;
				colvarVerificationMethodKey.MaxLength = 0;
				colvarVerificationMethodKey.AutoIncrement = false;
				colvarVerificationMethodKey.IsNullable = false;
				colvarVerificationMethodKey.IsPrimaryKey = true;
				colvarVerificationMethodKey.IsForeignKey = false;
				colvarVerificationMethodKey.IsReadOnly = false;
				colvarVerificationMethodKey.DefaultSetting = @"";
				colvarVerificationMethodKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerificationMethodKey);
				
				TableSchema.TableColumn colvarVerificationMethodName = new TableSchema.TableColumn(schema);
				colvarVerificationMethodName.ColumnName = "verification_method_name";
				colvarVerificationMethodName.DataType = DbType.AnsiString;
				colvarVerificationMethodName.MaxLength = 50;
				colvarVerificationMethodName.AutoIncrement = false;
				colvarVerificationMethodName.IsNullable = false;
				colvarVerificationMethodName.IsPrimaryKey = false;
				colvarVerificationMethodName.IsForeignKey = false;
				colvarVerificationMethodName.IsReadOnly = false;
				colvarVerificationMethodName.DefaultSetting = @"";
				colvarVerificationMethodName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerificationMethodName);
				
				TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
				colvarPoints.ColumnName = "points";
				colvarPoints.DataType = DbType.Int32;
				colvarPoints.MaxLength = 0;
				colvarPoints.AutoIncrement = false;
				colvarPoints.IsNullable = false;
				colvarPoints.IsPrimaryKey = false;
				colvarPoints.IsForeignKey = false;
				colvarPoints.IsReadOnly = false;
				colvarPoints.DefaultSetting = @"";
				colvarPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoints);
				
				TableSchema.TableColumn colvarIsmandatory = new TableSchema.TableColumn(schema);
				colvarIsmandatory.ColumnName = "ismandatory";
				colvarIsmandatory.DataType = DbType.Boolean;
				colvarIsmandatory.MaxLength = 0;
				colvarIsmandatory.AutoIncrement = false;
				colvarIsmandatory.IsNullable = true;
				colvarIsmandatory.IsPrimaryKey = false;
				colvarIsmandatory.IsForeignKey = false;
				colvarIsmandatory.IsReadOnly = false;
				colvarIsmandatory.DefaultSetting = @"";
				colvarIsmandatory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsmandatory);
				
				TableSchema.TableColumn colvarRequiresmanualapproval = new TableSchema.TableColumn(schema);
				colvarRequiresmanualapproval.ColumnName = "requiresmanualapproval";
				colvarRequiresmanualapproval.DataType = DbType.Boolean;
				colvarRequiresmanualapproval.MaxLength = 0;
				colvarRequiresmanualapproval.AutoIncrement = false;
				colvarRequiresmanualapproval.IsNullable = true;
				colvarRequiresmanualapproval.IsPrimaryKey = false;
				colvarRequiresmanualapproval.IsForeignKey = false;
				colvarRequiresmanualapproval.IsReadOnly = false;
				colvarRequiresmanualapproval.DefaultSetting = @"";
				colvarRequiresmanualapproval.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresmanualapproval);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Verification_Methods",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("VerificationMethodKey")]
		[Bindable(true)]
		public int VerificationMethodKey 
		{
			get { return GetColumnValue<int>(Columns.VerificationMethodKey); }
			set { SetColumnValue(Columns.VerificationMethodKey, value); }
		}
		  
		[XmlAttribute("VerificationMethodName")]
		[Bindable(true)]
		public string VerificationMethodName 
		{
			get { return GetColumnValue<string>(Columns.VerificationMethodName); }
			set { SetColumnValue(Columns.VerificationMethodName, value); }
		}
		  
		[XmlAttribute("Points")]
		[Bindable(true)]
		public int Points 
		{
			get { return GetColumnValue<int>(Columns.Points); }
			set { SetColumnValue(Columns.Points, value); }
		}
		  
		[XmlAttribute("Ismandatory")]
		[Bindable(true)]
		public bool? Ismandatory 
		{
			get { return GetColumnValue<bool?>(Columns.Ismandatory); }
			set { SetColumnValue(Columns.Ismandatory, value); }
		}
		  
		[XmlAttribute("Requiresmanualapproval")]
		[Bindable(true)]
		public bool? Requiresmanualapproval 
		{
			get { return GetColumnValue<bool?>(Columns.Requiresmanualapproval); }
			set { SetColumnValue(Columns.Requiresmanualapproval, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varVerificationMethodKey,string varVerificationMethodName,int varPoints,bool? varIsmandatory,bool? varRequiresmanualapproval)
		{
			VerificationMethod item = new VerificationMethod();
			
			item.VerificationMethodKey = varVerificationMethodKey;
			
			item.VerificationMethodName = varVerificationMethodName;
			
			item.Points = varPoints;
			
			item.Ismandatory = varIsmandatory;
			
			item.Requiresmanualapproval = varRequiresmanualapproval;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varVerificationMethodKey,string varVerificationMethodName,int varPoints,bool? varIsmandatory,bool? varRequiresmanualapproval)
		{
			VerificationMethod item = new VerificationMethod();
			
				item.VerificationMethodKey = varVerificationMethodKey;
			
				item.VerificationMethodName = varVerificationMethodName;
			
				item.Points = varPoints;
			
				item.Ismandatory = varIsmandatory;
			
				item.Requiresmanualapproval = varRequiresmanualapproval;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn VerificationMethodKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn VerificationMethodNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PointsColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsmandatoryColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RequiresmanualapprovalColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string VerificationMethodKey = @"verification_method_key";
			 public static string VerificationMethodName = @"verification_method_name";
			 public static string Points = @"points";
			 public static string Ismandatory = @"ismandatory";
			 public static string Requiresmanualapproval = @"requiresmanualapproval";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
