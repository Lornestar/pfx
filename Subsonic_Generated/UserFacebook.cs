using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the UserFacebook class.
	/// </summary>
    [Serializable]
	public partial class UserFacebookCollection : ActiveList<UserFacebook, UserFacebookCollection>
	{	   
		public UserFacebookCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UserFacebookCollection</returns>
		public UserFacebookCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UserFacebook o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the User_Facebook table.
	/// </summary>
	[Serializable]
	public partial class UserFacebook : ActiveRecord<UserFacebook>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UserFacebook()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UserFacebook(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UserFacebook(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UserFacebook(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("User_Facebook", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFbUid = new TableSchema.TableColumn(schema);
				colvarFbUid.ColumnName = "fb_uid";
				colvarFbUid.DataType = DbType.Int64;
				colvarFbUid.MaxLength = 0;
				colvarFbUid.AutoIncrement = false;
				colvarFbUid.IsNullable = true;
				colvarFbUid.IsPrimaryKey = false;
				colvarFbUid.IsForeignKey = false;
				colvarFbUid.IsReadOnly = false;
				colvarFbUid.DefaultSetting = @"";
				colvarFbUid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbUid);
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = false;
				colvarUserKey.IsNullable = false;
				colvarUserKey.IsPrimaryKey = true;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarFbLocation = new TableSchema.TableColumn(schema);
				colvarFbLocation.ColumnName = "fb_location";
				colvarFbLocation.DataType = DbType.String;
				colvarFbLocation.MaxLength = 100;
				colvarFbLocation.AutoIncrement = false;
				colvarFbLocation.IsNullable = true;
				colvarFbLocation.IsPrimaryKey = false;
				colvarFbLocation.IsForeignKey = false;
				colvarFbLocation.IsReadOnly = false;
				colvarFbLocation.DefaultSetting = @"";
				colvarFbLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbLocation);
				
				TableSchema.TableColumn colvarFbEmail = new TableSchema.TableColumn(schema);
				colvarFbEmail.ColumnName = "fb_email";
				colvarFbEmail.DataType = DbType.String;
				colvarFbEmail.MaxLength = 100;
				colvarFbEmail.AutoIncrement = false;
				colvarFbEmail.IsNullable = true;
				colvarFbEmail.IsPrimaryKey = false;
				colvarFbEmail.IsForeignKey = false;
				colvarFbEmail.IsReadOnly = false;
				colvarFbEmail.DefaultSetting = @"";
				colvarFbEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbEmail);
				
				TableSchema.TableColumn colvarFbFriendsCount = new TableSchema.TableColumn(schema);
				colvarFbFriendsCount.ColumnName = "fb_friends_count";
				colvarFbFriendsCount.DataType = DbType.Int32;
				colvarFbFriendsCount.MaxLength = 0;
				colvarFbFriendsCount.AutoIncrement = false;
				colvarFbFriendsCount.IsNullable = true;
				colvarFbFriendsCount.IsPrimaryKey = false;
				colvarFbFriendsCount.IsForeignKey = false;
				colvarFbFriendsCount.IsReadOnly = false;
				colvarFbFriendsCount.DefaultSetting = @"";
				colvarFbFriendsCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbFriendsCount);
				
				TableSchema.TableColumn colvarFbAccessToken = new TableSchema.TableColumn(schema);
				colvarFbAccessToken.ColumnName = "fb_access_token";
				colvarFbAccessToken.DataType = DbType.AnsiString;
				colvarFbAccessToken.MaxLength = 2147483647;
				colvarFbAccessToken.AutoIncrement = false;
				colvarFbAccessToken.IsNullable = true;
				colvarFbAccessToken.IsPrimaryKey = false;
				colvarFbAccessToken.IsForeignKey = false;
				colvarFbAccessToken.IsReadOnly = false;
				colvarFbAccessToken.DefaultSetting = @"";
				colvarFbAccessToken.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbAccessToken);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = true;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = true;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarFbIsmale = new TableSchema.TableColumn(schema);
				colvarFbIsmale.ColumnName = "fb_ismale";
				colvarFbIsmale.DataType = DbType.Boolean;
				colvarFbIsmale.MaxLength = 0;
				colvarFbIsmale.AutoIncrement = false;
				colvarFbIsmale.IsNullable = true;
				colvarFbIsmale.IsPrimaryKey = false;
				colvarFbIsmale.IsForeignKey = false;
				colvarFbIsmale.IsReadOnly = false;
				colvarFbIsmale.DefaultSetting = @"";
				colvarFbIsmale.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbIsmale);
				
				TableSchema.TableColumn colvarFbFirstName = new TableSchema.TableColumn(schema);
				colvarFbFirstName.ColumnName = "fb_first_name";
				colvarFbFirstName.DataType = DbType.String;
				colvarFbFirstName.MaxLength = 50;
				colvarFbFirstName.AutoIncrement = false;
				colvarFbFirstName.IsNullable = true;
				colvarFbFirstName.IsPrimaryKey = false;
				colvarFbFirstName.IsForeignKey = false;
				colvarFbFirstName.IsReadOnly = false;
				colvarFbFirstName.DefaultSetting = @"";
				colvarFbFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbFirstName);
				
				TableSchema.TableColumn colvarFbLastName = new TableSchema.TableColumn(schema);
				colvarFbLastName.ColumnName = "fb_last_name";
				colvarFbLastName.DataType = DbType.String;
				colvarFbLastName.MaxLength = 50;
				colvarFbLastName.AutoIncrement = false;
				colvarFbLastName.IsNullable = true;
				colvarFbLastName.IsPrimaryKey = false;
				colvarFbLastName.IsForeignKey = false;
				colvarFbLastName.IsReadOnly = false;
				colvarFbLastName.DefaultSetting = @"";
				colvarFbLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbLastName);
				
				TableSchema.TableColumn colvarFbIsverified = new TableSchema.TableColumn(schema);
				colvarFbIsverified.ColumnName = "fb_isverified";
				colvarFbIsverified.DataType = DbType.Boolean;
				colvarFbIsverified.MaxLength = 0;
				colvarFbIsverified.AutoIncrement = false;
				colvarFbIsverified.IsNullable = true;
				colvarFbIsverified.IsPrimaryKey = false;
				colvarFbIsverified.IsForeignKey = false;
				colvarFbIsverified.IsReadOnly = false;
				colvarFbIsverified.DefaultSetting = @"";
				colvarFbIsverified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbIsverified);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("User_Facebook",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FbUid")]
		[Bindable(true)]
		public long? FbUid 
		{
			get { return GetColumnValue<long?>(Columns.FbUid); }
			set { SetColumnValue(Columns.FbUid, value); }
		}
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int UserKey 
		{
			get { return GetColumnValue<int>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("FbLocation")]
		[Bindable(true)]
		public string FbLocation 
		{
			get { return GetColumnValue<string>(Columns.FbLocation); }
			set { SetColumnValue(Columns.FbLocation, value); }
		}
		  
		[XmlAttribute("FbEmail")]
		[Bindable(true)]
		public string FbEmail 
		{
			get { return GetColumnValue<string>(Columns.FbEmail); }
			set { SetColumnValue(Columns.FbEmail, value); }
		}
		  
		[XmlAttribute("FbFriendsCount")]
		[Bindable(true)]
		public int? FbFriendsCount 
		{
			get { return GetColumnValue<int?>(Columns.FbFriendsCount); }
			set { SetColumnValue(Columns.FbFriendsCount, value); }
		}
		  
		[XmlAttribute("FbAccessToken")]
		[Bindable(true)]
		public string FbAccessToken 
		{
			get { return GetColumnValue<string>(Columns.FbAccessToken); }
			set { SetColumnValue(Columns.FbAccessToken, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime? DateCreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime? LastChanged 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("FbIsmale")]
		[Bindable(true)]
		public bool? FbIsmale 
		{
			get { return GetColumnValue<bool?>(Columns.FbIsmale); }
			set { SetColumnValue(Columns.FbIsmale, value); }
		}
		  
		[XmlAttribute("FbFirstName")]
		[Bindable(true)]
		public string FbFirstName 
		{
			get { return GetColumnValue<string>(Columns.FbFirstName); }
			set { SetColumnValue(Columns.FbFirstName, value); }
		}
		  
		[XmlAttribute("FbLastName")]
		[Bindable(true)]
		public string FbLastName 
		{
			get { return GetColumnValue<string>(Columns.FbLastName); }
			set { SetColumnValue(Columns.FbLastName, value); }
		}
		  
		[XmlAttribute("FbIsverified")]
		[Bindable(true)]
		public bool? FbIsverified 
		{
			get { return GetColumnValue<bool?>(Columns.FbIsverified); }
			set { SetColumnValue(Columns.FbIsverified, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long? varFbUid,int varUserKey,string varFbLocation,string varFbEmail,int? varFbFriendsCount,string varFbAccessToken,DateTime? varDateCreated,DateTime? varLastChanged,bool? varFbIsmale,string varFbFirstName,string varFbLastName,bool? varFbIsverified)
		{
			UserFacebook item = new UserFacebook();
			
			item.FbUid = varFbUid;
			
			item.UserKey = varUserKey;
			
			item.FbLocation = varFbLocation;
			
			item.FbEmail = varFbEmail;
			
			item.FbFriendsCount = varFbFriendsCount;
			
			item.FbAccessToken = varFbAccessToken;
			
			item.DateCreated = varDateCreated;
			
			item.LastChanged = varLastChanged;
			
			item.FbIsmale = varFbIsmale;
			
			item.FbFirstName = varFbFirstName;
			
			item.FbLastName = varFbLastName;
			
			item.FbIsverified = varFbIsverified;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long? varFbUid,int varUserKey,string varFbLocation,string varFbEmail,int? varFbFriendsCount,string varFbAccessToken,DateTime? varDateCreated,DateTime? varLastChanged,bool? varFbIsmale,string varFbFirstName,string varFbLastName,bool? varFbIsverified)
		{
			UserFacebook item = new UserFacebook();
			
				item.FbUid = varFbUid;
			
				item.UserKey = varUserKey;
			
				item.FbLocation = varFbLocation;
			
				item.FbEmail = varFbEmail;
			
				item.FbFriendsCount = varFbFriendsCount;
			
				item.FbAccessToken = varFbAccessToken;
			
				item.DateCreated = varDateCreated;
			
				item.LastChanged = varLastChanged;
			
				item.FbIsmale = varFbIsmale;
			
				item.FbFirstName = varFbFirstName;
			
				item.FbLastName = varFbLastName;
			
				item.FbIsverified = varFbIsverified;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FbUidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FbLocationColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FbEmailColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FbFriendsCountColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FbAccessTokenColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FbIsmaleColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FbFirstNameColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn FbLastNameColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn FbIsverifiedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FbUid = @"fb_uid";
			 public static string UserKey = @"user_key";
			 public static string FbLocation = @"fb_location";
			 public static string FbEmail = @"fb_email";
			 public static string FbFriendsCount = @"fb_friends_count";
			 public static string FbAccessToken = @"fb_access_token";
			 public static string DateCreated = @"date_created";
			 public static string LastChanged = @"last_changed";
			 public static string FbIsmale = @"fb_ismale";
			 public static string FbFirstName = @"fb_first_name";
			 public static string FbLastName = @"fb_last_name";
			 public static string FbIsverified = @"fb_isverified";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
