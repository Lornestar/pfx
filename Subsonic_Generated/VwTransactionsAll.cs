using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    /// <summary>
    /// Strongly-typed collection for the VwTransactionsAll class.
    /// </summary>
    [Serializable]
    public partial class VwTransactionsAllCollection : ReadOnlyList<VwTransactionsAll, VwTransactionsAllCollection>
    {        
        public VwTransactionsAllCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_Transactions_All view.
    /// </summary>
    [Serializable]
    public partial class VwTransactionsAll : ReadOnlyRecord<VwTransactionsAll>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_Transactions_All", TableType.View, DataService.GetInstance("Peerfx"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
                colvarTxKey.ColumnName = "tx_key";
                colvarTxKey.DataType = DbType.Int64;
                colvarTxKey.MaxLength = 0;
                colvarTxKey.AutoIncrement = false;
                colvarTxKey.IsNullable = false;
                colvarTxKey.IsPrimaryKey = false;
                colvarTxKey.IsForeignKey = false;
                colvarTxKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxKey);
                
                TableSchema.TableColumn colvarTxStatus = new TableSchema.TableColumn(schema);
                colvarTxStatus.ColumnName = "tx_status";
                colvarTxStatus.DataType = DbType.Int32;
                colvarTxStatus.MaxLength = 0;
                colvarTxStatus.AutoIncrement = false;
                colvarTxStatus.IsNullable = false;
                colvarTxStatus.IsPrimaryKey = false;
                colvarTxStatus.IsForeignKey = false;
                colvarTxStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxStatus);
                
                TableSchema.TableColumn colvarPurposeType = new TableSchema.TableColumn(schema);
                colvarPurposeType.ColumnName = "purpose_type";
                colvarPurposeType.DataType = DbType.Int32;
                colvarPurposeType.MaxLength = 0;
                colvarPurposeType.AutoIncrement = false;
                colvarPurposeType.IsNullable = true;
                colvarPurposeType.IsPrimaryKey = false;
                colvarPurposeType.IsForeignKey = false;
                colvarPurposeType.IsReadOnly = false;
                
                schema.Columns.Add(colvarPurposeType);
                
                TableSchema.TableColumn colvarPurposeObjectKey = new TableSchema.TableColumn(schema);
                colvarPurposeObjectKey.ColumnName = "purpose_object_key";
                colvarPurposeObjectKey.DataType = DbType.Int32;
                colvarPurposeObjectKey.MaxLength = 0;
                colvarPurposeObjectKey.AutoIncrement = false;
                colvarPurposeObjectKey.IsNullable = true;
                colvarPurposeObjectKey.IsPrimaryKey = false;
                colvarPurposeObjectKey.IsForeignKey = false;
                colvarPurposeObjectKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarPurposeObjectKey);
                
                TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
                colvarCurrency.ColumnName = "currency";
                colvarCurrency.DataType = DbType.Int32;
                colvarCurrency.MaxLength = 0;
                colvarCurrency.AutoIncrement = false;
                colvarCurrency.IsNullable = false;
                colvarCurrency.IsPrimaryKey = false;
                colvarCurrency.IsForeignKey = false;
                colvarCurrency.IsReadOnly = false;
                
                schema.Columns.Add(colvarCurrency);
                
                TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
                colvarAmount.ColumnName = "amount";
                colvarAmount.DataType = DbType.Currency;
                colvarAmount.MaxLength = 0;
                colvarAmount.AutoIncrement = false;
                colvarAmount.IsNullable = false;
                colvarAmount.IsPrimaryKey = false;
                colvarAmount.IsForeignKey = false;
                colvarAmount.IsReadOnly = false;
                
                schema.Columns.Add(colvarAmount);
                
                TableSchema.TableColumn colvarPaymentObjectSender = new TableSchema.TableColumn(schema);
                colvarPaymentObjectSender.ColumnName = "payment_object_sender";
                colvarPaymentObjectSender.DataType = DbType.Int64;
                colvarPaymentObjectSender.MaxLength = 0;
                colvarPaymentObjectSender.AutoIncrement = false;
                colvarPaymentObjectSender.IsNullable = true;
                colvarPaymentObjectSender.IsPrimaryKey = false;
                colvarPaymentObjectSender.IsForeignKey = false;
                colvarPaymentObjectSender.IsReadOnly = false;
                
                schema.Columns.Add(colvarPaymentObjectSender);
                
                TableSchema.TableColumn colvarPaymentObjectReceiver = new TableSchema.TableColumn(schema);
                colvarPaymentObjectReceiver.ColumnName = "payment_object_receiver";
                colvarPaymentObjectReceiver.DataType = DbType.Int64;
                colvarPaymentObjectReceiver.MaxLength = 0;
                colvarPaymentObjectReceiver.AutoIncrement = false;
                colvarPaymentObjectReceiver.IsNullable = true;
                colvarPaymentObjectReceiver.IsPrimaryKey = false;
                colvarPaymentObjectReceiver.IsForeignKey = false;
                colvarPaymentObjectReceiver.IsReadOnly = false;
                
                schema.Columns.Add(colvarPaymentObjectReceiver);
                
                TableSchema.TableColumn colvarTxDescription = new TableSchema.TableColumn(schema);
                colvarTxDescription.ColumnName = "tx_description";
                colvarTxDescription.DataType = DbType.String;
                colvarTxDescription.MaxLength = 100;
                colvarTxDescription.AutoIncrement = false;
                colvarTxDescription.IsNullable = true;
                colvarTxDescription.IsPrimaryKey = false;
                colvarTxDescription.IsForeignKey = false;
                colvarTxDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxDescription);
                
                TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
                colvarLastChanged.ColumnName = "last_changed";
                colvarLastChanged.DataType = DbType.DateTime;
                colvarLastChanged.MaxLength = 0;
                colvarLastChanged.AutoIncrement = false;
                colvarLastChanged.IsNullable = false;
                colvarLastChanged.IsPrimaryKey = false;
                colvarLastChanged.IsForeignKey = false;
                colvarLastChanged.IsReadOnly = false;
                
                schema.Columns.Add(colvarLastChanged);
                
                TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
                colvarIpAddress.ColumnName = "ip_address";
                colvarIpAddress.DataType = DbType.String;
                colvarIpAddress.MaxLength = 16;
                colvarIpAddress.AutoIncrement = false;
                colvarIpAddress.IsNullable = true;
                colvarIpAddress.IsPrimaryKey = false;
                colvarIpAddress.IsForeignKey = false;
                colvarIpAddress.IsReadOnly = false;
                
                schema.Columns.Add(colvarIpAddress);
                
                TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
                colvarUserKeyUpdated.ColumnName = "user_key_updated";
                colvarUserKeyUpdated.DataType = DbType.Int32;
                colvarUserKeyUpdated.MaxLength = 0;
                colvarUserKeyUpdated.AutoIncrement = false;
                colvarUserKeyUpdated.IsNullable = true;
                colvarUserKeyUpdated.IsPrimaryKey = false;
                colvarUserKeyUpdated.IsForeignKey = false;
                colvarUserKeyUpdated.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserKeyUpdated);
                
                TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
                colvarDateCreated.ColumnName = "date_created";
                colvarDateCreated.DataType = DbType.DateTime;
                colvarDateCreated.MaxLength = 0;
                colvarDateCreated.AutoIncrement = false;
                colvarDateCreated.IsNullable = true;
                colvarDateCreated.IsPrimaryKey = false;
                colvarDateCreated.IsForeignKey = false;
                colvarDateCreated.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateCreated);
                
                TableSchema.TableColumn colvarDateProcessed = new TableSchema.TableColumn(schema);
                colvarDateProcessed.ColumnName = "date_processed";
                colvarDateProcessed.DataType = DbType.DateTime;
                colvarDateProcessed.MaxLength = 0;
                colvarDateProcessed.AutoIncrement = false;
                colvarDateProcessed.IsNullable = true;
                colvarDateProcessed.IsPrimaryKey = false;
                colvarDateProcessed.IsForeignKey = false;
                colvarDateProcessed.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateProcessed);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Peerfx"].AddSchema("vw_Transactions_All",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTransactionsAll()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTransactionsAll(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTransactionsAll(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTransactionsAll(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("TxKey")]
        [Bindable(true)]
        public long TxKey 
	    {
		    get
		    {
			    return GetColumnValue<long>("tx_key");
		    }
            set 
		    {
			    SetColumnValue("tx_key", value);
            }
        }
	      
        [XmlAttribute("TxStatus")]
        [Bindable(true)]
        public int TxStatus 
	    {
		    get
		    {
			    return GetColumnValue<int>("tx_status");
		    }
            set 
		    {
			    SetColumnValue("tx_status", value);
            }
        }
	      
        [XmlAttribute("PurposeType")]
        [Bindable(true)]
        public int? PurposeType 
	    {
		    get
		    {
			    return GetColumnValue<int?>("purpose_type");
		    }
            set 
		    {
			    SetColumnValue("purpose_type", value);
            }
        }
	      
        [XmlAttribute("PurposeObjectKey")]
        [Bindable(true)]
        public int? PurposeObjectKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("purpose_object_key");
		    }
            set 
		    {
			    SetColumnValue("purpose_object_key", value);
            }
        }
	      
        [XmlAttribute("Currency")]
        [Bindable(true)]
        public int Currency 
	    {
		    get
		    {
			    return GetColumnValue<int>("currency");
		    }
            set 
		    {
			    SetColumnValue("currency", value);
            }
        }
	      
        [XmlAttribute("Amount")]
        [Bindable(true)]
        public decimal Amount 
	    {
		    get
		    {
			    return GetColumnValue<decimal>("amount");
		    }
            set 
		    {
			    SetColumnValue("amount", value);
            }
        }
	      
        [XmlAttribute("PaymentObjectSender")]
        [Bindable(true)]
        public long? PaymentObjectSender 
	    {
		    get
		    {
			    return GetColumnValue<long?>("payment_object_sender");
		    }
            set 
		    {
			    SetColumnValue("payment_object_sender", value);
            }
        }
	      
        [XmlAttribute("PaymentObjectReceiver")]
        [Bindable(true)]
        public long? PaymentObjectReceiver 
	    {
		    get
		    {
			    return GetColumnValue<long?>("payment_object_receiver");
		    }
            set 
		    {
			    SetColumnValue("payment_object_receiver", value);
            }
        }
	      
        [XmlAttribute("TxDescription")]
        [Bindable(true)]
        public string TxDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("tx_description");
		    }
            set 
		    {
			    SetColumnValue("tx_description", value);
            }
        }
	      
        [XmlAttribute("LastChanged")]
        [Bindable(true)]
        public DateTime LastChanged 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("last_changed");
		    }
            set 
		    {
			    SetColumnValue("last_changed", value);
            }
        }
	      
        [XmlAttribute("IpAddress")]
        [Bindable(true)]
        public string IpAddress 
	    {
		    get
		    {
			    return GetColumnValue<string>("ip_address");
		    }
            set 
		    {
			    SetColumnValue("ip_address", value);
            }
        }
	      
        [XmlAttribute("UserKeyUpdated")]
        [Bindable(true)]
        public int? UserKeyUpdated 
	    {
		    get
		    {
			    return GetColumnValue<int?>("user_key_updated");
		    }
            set 
		    {
			    SetColumnValue("user_key_updated", value);
            }
        }
	      
        [XmlAttribute("DateCreated")]
        [Bindable(true)]
        public DateTime? DateCreated 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("date_created");
		    }
            set 
		    {
			    SetColumnValue("date_created", value);
            }
        }
	      
        [XmlAttribute("DateProcessed")]
        [Bindable(true)]
        public DateTime? DateProcessed 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("date_processed");
		    }
            set 
		    {
			    SetColumnValue("date_processed", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string TxKey = @"tx_key";
            
            public static string TxStatus = @"tx_status";
            
            public static string PurposeType = @"purpose_type";
            
            public static string PurposeObjectKey = @"purpose_object_key";
            
            public static string Currency = @"currency";
            
            public static string Amount = @"amount";
            
            public static string PaymentObjectSender = @"payment_object_sender";
            
            public static string PaymentObjectReceiver = @"payment_object_receiver";
            
            public static string TxDescription = @"tx_description";
            
            public static string LastChanged = @"last_changed";
            
            public static string IpAddress = @"ip_address";
            
            public static string UserKeyUpdated = @"user_key_updated";
            
            public static string DateCreated = @"date_created";
            
            public static string DateProcessed = @"date_processed";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
