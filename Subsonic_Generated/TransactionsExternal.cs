using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the TransactionsExternal class.
	/// </summary>
    [Serializable]
	public partial class TransactionsExternalCollection : ActiveList<TransactionsExternal, TransactionsExternalCollection>
	{	   
		public TransactionsExternalCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransactionsExternalCollection</returns>
		public TransactionsExternalCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TransactionsExternal o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Transactions_External table.
	/// </summary>
	[Serializable]
	public partial class TransactionsExternal : ActiveRecord<TransactionsExternal>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TransactionsExternal()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TransactionsExternal(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TransactionsExternal(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TransactionsExternal(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Transactions_External", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTxExternalKey = new TableSchema.TableColumn(schema);
				colvarTxExternalKey.ColumnName = "tx_external_key";
				colvarTxExternalKey.DataType = DbType.Int64;
				colvarTxExternalKey.MaxLength = 0;
				colvarTxExternalKey.AutoIncrement = true;
				colvarTxExternalKey.IsNullable = false;
				colvarTxExternalKey.IsPrimaryKey = true;
				colvarTxExternalKey.IsForeignKey = false;
				colvarTxExternalKey.IsReadOnly = false;
				colvarTxExternalKey.DefaultSetting = @"";
				colvarTxExternalKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxExternalKey);
				
				TableSchema.TableColumn colvarTxExternalType = new TableSchema.TableColumn(schema);
				colvarTxExternalType.ColumnName = "tx_external_type";
				colvarTxExternalType.DataType = DbType.Int32;
				colvarTxExternalType.MaxLength = 0;
				colvarTxExternalType.AutoIncrement = false;
				colvarTxExternalType.IsNullable = false;
				colvarTxExternalType.IsPrimaryKey = false;
				colvarTxExternalType.IsForeignKey = false;
				colvarTxExternalType.IsReadOnly = false;
				colvarTxExternalType.DefaultSetting = @"";
				colvarTxExternalType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxExternalType);
				
				TableSchema.TableColumn colvarTxExternalStatus = new TableSchema.TableColumn(schema);
				colvarTxExternalStatus.ColumnName = "tx_external_status";
				colvarTxExternalStatus.DataType = DbType.Int32;
				colvarTxExternalStatus.MaxLength = 0;
				colvarTxExternalStatus.AutoIncrement = false;
				colvarTxExternalStatus.IsNullable = false;
				colvarTxExternalStatus.IsPrimaryKey = false;
				colvarTxExternalStatus.IsForeignKey = false;
				colvarTxExternalStatus.IsReadOnly = false;
				colvarTxExternalStatus.DefaultSetting = @"";
				colvarTxExternalStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxExternalStatus);
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = false;
				colvarUserKey.IsNullable = true;
				colvarUserKey.IsPrimaryKey = false;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
				colvarCurrency.ColumnName = "currency";
				colvarCurrency.DataType = DbType.Int32;
				colvarCurrency.MaxLength = 0;
				colvarCurrency.AutoIncrement = false;
				colvarCurrency.IsNullable = false;
				colvarCurrency.IsPrimaryKey = false;
				colvarCurrency.IsForeignKey = false;
				colvarCurrency.IsReadOnly = false;
				colvarCurrency.DefaultSetting = @"";
				colvarCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarSenderBankAccountKey = new TableSchema.TableColumn(schema);
				colvarSenderBankAccountKey.ColumnName = "sender_bank_account_key";
				colvarSenderBankAccountKey.DataType = DbType.Int32;
				colvarSenderBankAccountKey.MaxLength = 0;
				colvarSenderBankAccountKey.AutoIncrement = false;
				colvarSenderBankAccountKey.IsNullable = true;
				colvarSenderBankAccountKey.IsPrimaryKey = false;
				colvarSenderBankAccountKey.IsForeignKey = false;
				colvarSenderBankAccountKey.IsReadOnly = false;
				colvarSenderBankAccountKey.DefaultSetting = @"";
				colvarSenderBankAccountKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSenderBankAccountKey);
				
				TableSchema.TableColumn colvarReceiverBankAccountKey = new TableSchema.TableColumn(schema);
				colvarReceiverBankAccountKey.ColumnName = "receiver_bank_account_key";
				colvarReceiverBankAccountKey.DataType = DbType.Int32;
				colvarReceiverBankAccountKey.MaxLength = 0;
				colvarReceiverBankAccountKey.AutoIncrement = false;
				colvarReceiverBankAccountKey.IsNullable = true;
				colvarReceiverBankAccountKey.IsPrimaryKey = false;
				colvarReceiverBankAccountKey.IsForeignKey = false;
				colvarReceiverBankAccountKey.IsReadOnly = false;
				colvarReceiverBankAccountKey.DefaultSetting = @"";
				colvarReceiverBankAccountKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverBankAccountKey);
				
				TableSchema.TableColumn colvarTxExternalDescription = new TableSchema.TableColumn(schema);
				colvarTxExternalDescription.ColumnName = "tx_external_description";
				colvarTxExternalDescription.DataType = DbType.String;
				colvarTxExternalDescription.MaxLength = 100;
				colvarTxExternalDescription.AutoIncrement = false;
				colvarTxExternalDescription.IsNullable = true;
				colvarTxExternalDescription.IsPrimaryKey = false;
				colvarTxExternalDescription.IsForeignKey = false;
				colvarTxExternalDescription.IsReadOnly = false;
				colvarTxExternalDescription.DefaultSetting = @"";
				colvarTxExternalDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxExternalDescription);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = false;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "ip_address";
				colvarIpAddress.DataType = DbType.String;
				colvarIpAddress.MaxLength = 16;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = false;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
				colvarUserKeyUpdated.ColumnName = "user_key_updated";
				colvarUserKeyUpdated.DataType = DbType.Int32;
				colvarUserKeyUpdated.MaxLength = 0;
				colvarUserKeyUpdated.AutoIncrement = false;
				colvarUserKeyUpdated.IsNullable = true;
				colvarUserKeyUpdated.IsPrimaryKey = false;
				colvarUserKeyUpdated.IsForeignKey = false;
				colvarUserKeyUpdated.IsReadOnly = false;
				colvarUserKeyUpdated.DefaultSetting = @"";
				colvarUserKeyUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKeyUpdated);
				
				TableSchema.TableColumn colvarBankReference = new TableSchema.TableColumn(schema);
				colvarBankReference.ColumnName = "bank_reference";
				colvarBankReference.DataType = DbType.AnsiString;
				colvarBankReference.MaxLength = 100;
				colvarBankReference.AutoIncrement = false;
				colvarBankReference.IsNullable = true;
				colvarBankReference.IsPrimaryKey = false;
				colvarBankReference.IsForeignKey = false;
				colvarBankReference.IsReadOnly = false;
				colvarBankReference.DefaultSetting = @"";
				colvarBankReference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankReference);
				
				TableSchema.TableColumn colvarSenderBankName = new TableSchema.TableColumn(schema);
				colvarSenderBankName.ColumnName = "sender_bank_name";
				colvarSenderBankName.DataType = DbType.String;
				colvarSenderBankName.MaxLength = 50;
				colvarSenderBankName.AutoIncrement = false;
				colvarSenderBankName.IsNullable = true;
				colvarSenderBankName.IsPrimaryKey = false;
				colvarSenderBankName.IsForeignKey = false;
				colvarSenderBankName.IsReadOnly = false;
				colvarSenderBankName.DefaultSetting = @"";
				colvarSenderBankName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSenderBankName);
				
				TableSchema.TableColumn colvarSenderBankAccount = new TableSchema.TableColumn(schema);
				colvarSenderBankAccount.ColumnName = "sender_bank_account";
				colvarSenderBankAccount.DataType = DbType.AnsiString;
				colvarSenderBankAccount.MaxLength = 50;
				colvarSenderBankAccount.AutoIncrement = false;
				colvarSenderBankAccount.IsNullable = true;
				colvarSenderBankAccount.IsPrimaryKey = false;
				colvarSenderBankAccount.IsForeignKey = false;
				colvarSenderBankAccount.IsReadOnly = false;
				colvarSenderBankAccount.DefaultSetting = @"";
				colvarSenderBankAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSenderBankAccount);
				
				TableSchema.TableColumn colvarReceiverBankName = new TableSchema.TableColumn(schema);
				colvarReceiverBankName.ColumnName = "receiver_bank_name";
				colvarReceiverBankName.DataType = DbType.String;
				colvarReceiverBankName.MaxLength = 50;
				colvarReceiverBankName.AutoIncrement = false;
				colvarReceiverBankName.IsNullable = true;
				colvarReceiverBankName.IsPrimaryKey = false;
				colvarReceiverBankName.IsForeignKey = false;
				colvarReceiverBankName.IsReadOnly = false;
				colvarReceiverBankName.DefaultSetting = @"";
				colvarReceiverBankName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverBankName);
				
				TableSchema.TableColumn colvarReceiverBankAccount = new TableSchema.TableColumn(schema);
				colvarReceiverBankAccount.ColumnName = "receiver_bank_account";
				colvarReceiverBankAccount.DataType = DbType.AnsiString;
				colvarReceiverBankAccount.MaxLength = 50;
				colvarReceiverBankAccount.AutoIncrement = false;
				colvarReceiverBankAccount.IsNullable = true;
				colvarReceiverBankAccount.IsPrimaryKey = false;
				colvarReceiverBankAccount.IsForeignKey = false;
				colvarReceiverBankAccount.IsReadOnly = false;
				colvarReceiverBankAccount.DefaultSetting = @"";
				colvarReceiverBankAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverBankAccount);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = true;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				TableSchema.TableColumn colvarDateProcessed = new TableSchema.TableColumn(schema);
				colvarDateProcessed.ColumnName = "date_processed";
				colvarDateProcessed.DataType = DbType.DateTime;
				colvarDateProcessed.MaxLength = 0;
				colvarDateProcessed.AutoIncrement = false;
				colvarDateProcessed.IsNullable = true;
				colvarDateProcessed.IsPrimaryKey = false;
				colvarDateProcessed.IsForeignKey = false;
				colvarDateProcessed.IsReadOnly = false;
				colvarDateProcessed.DefaultSetting = @"";
				colvarDateProcessed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateProcessed);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Transactions_External",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TxExternalKey")]
		[Bindable(true)]
		public long TxExternalKey 
		{
			get { return GetColumnValue<long>(Columns.TxExternalKey); }
			set { SetColumnValue(Columns.TxExternalKey, value); }
		}
		  
		[XmlAttribute("TxExternalType")]
		[Bindable(true)]
		public int TxExternalType 
		{
			get { return GetColumnValue<int>(Columns.TxExternalType); }
			set { SetColumnValue(Columns.TxExternalType, value); }
		}
		  
		[XmlAttribute("TxExternalStatus")]
		[Bindable(true)]
		public int TxExternalStatus 
		{
			get { return GetColumnValue<int>(Columns.TxExternalStatus); }
			set { SetColumnValue(Columns.TxExternalStatus, value); }
		}
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int? UserKey 
		{
			get { return GetColumnValue<int?>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("Currency")]
		[Bindable(true)]
		public int Currency 
		{
			get { return GetColumnValue<int>(Columns.Currency); }
			set { SetColumnValue(Columns.Currency, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal Amount 
		{
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("SenderBankAccountKey")]
		[Bindable(true)]
		public int? SenderBankAccountKey 
		{
			get { return GetColumnValue<int?>(Columns.SenderBankAccountKey); }
			set { SetColumnValue(Columns.SenderBankAccountKey, value); }
		}
		  
		[XmlAttribute("ReceiverBankAccountKey")]
		[Bindable(true)]
		public int? ReceiverBankAccountKey 
		{
			get { return GetColumnValue<int?>(Columns.ReceiverBankAccountKey); }
			set { SetColumnValue(Columns.ReceiverBankAccountKey, value); }
		}
		  
		[XmlAttribute("TxExternalDescription")]
		[Bindable(true)]
		public string TxExternalDescription 
		{
			get { return GetColumnValue<string>(Columns.TxExternalDescription); }
			set { SetColumnValue(Columns.TxExternalDescription, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime LastChanged 
		{
			get { return GetColumnValue<DateTime>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("UserKeyUpdated")]
		[Bindable(true)]
		public int? UserKeyUpdated 
		{
			get { return GetColumnValue<int?>(Columns.UserKeyUpdated); }
			set { SetColumnValue(Columns.UserKeyUpdated, value); }
		}
		  
		[XmlAttribute("BankReference")]
		[Bindable(true)]
		public string BankReference 
		{
			get { return GetColumnValue<string>(Columns.BankReference); }
			set { SetColumnValue(Columns.BankReference, value); }
		}
		  
		[XmlAttribute("SenderBankName")]
		[Bindable(true)]
		public string SenderBankName 
		{
			get { return GetColumnValue<string>(Columns.SenderBankName); }
			set { SetColumnValue(Columns.SenderBankName, value); }
		}
		  
		[XmlAttribute("SenderBankAccount")]
		[Bindable(true)]
		public string SenderBankAccount 
		{
			get { return GetColumnValue<string>(Columns.SenderBankAccount); }
			set { SetColumnValue(Columns.SenderBankAccount, value); }
		}
		  
		[XmlAttribute("ReceiverBankName")]
		[Bindable(true)]
		public string ReceiverBankName 
		{
			get { return GetColumnValue<string>(Columns.ReceiverBankName); }
			set { SetColumnValue(Columns.ReceiverBankName, value); }
		}
		  
		[XmlAttribute("ReceiverBankAccount")]
		[Bindable(true)]
		public string ReceiverBankAccount 
		{
			get { return GetColumnValue<string>(Columns.ReceiverBankAccount); }
			set { SetColumnValue(Columns.ReceiverBankAccount, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime? DateCreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		  
		[XmlAttribute("DateProcessed")]
		[Bindable(true)]
		public DateTime? DateProcessed 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateProcessed); }
			set { SetColumnValue(Columns.DateProcessed, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTxExternalType,int varTxExternalStatus,int? varUserKey,int varCurrency,decimal varAmount,int? varSenderBankAccountKey,int? varReceiverBankAccountKey,string varTxExternalDescription,DateTime varLastChanged,string varIpAddress,int? varUserKeyUpdated,string varBankReference,string varSenderBankName,string varSenderBankAccount,string varReceiverBankName,string varReceiverBankAccount,DateTime? varDateCreated,DateTime? varDateProcessed)
		{
			TransactionsExternal item = new TransactionsExternal();
			
			item.TxExternalType = varTxExternalType;
			
			item.TxExternalStatus = varTxExternalStatus;
			
			item.UserKey = varUserKey;
			
			item.Currency = varCurrency;
			
			item.Amount = varAmount;
			
			item.SenderBankAccountKey = varSenderBankAccountKey;
			
			item.ReceiverBankAccountKey = varReceiverBankAccountKey;
			
			item.TxExternalDescription = varTxExternalDescription;
			
			item.LastChanged = varLastChanged;
			
			item.IpAddress = varIpAddress;
			
			item.UserKeyUpdated = varUserKeyUpdated;
			
			item.BankReference = varBankReference;
			
			item.SenderBankName = varSenderBankName;
			
			item.SenderBankAccount = varSenderBankAccount;
			
			item.ReceiverBankName = varReceiverBankName;
			
			item.ReceiverBankAccount = varReceiverBankAccount;
			
			item.DateCreated = varDateCreated;
			
			item.DateProcessed = varDateProcessed;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varTxExternalKey,int varTxExternalType,int varTxExternalStatus,int? varUserKey,int varCurrency,decimal varAmount,int? varSenderBankAccountKey,int? varReceiverBankAccountKey,string varTxExternalDescription,DateTime varLastChanged,string varIpAddress,int? varUserKeyUpdated,string varBankReference,string varSenderBankName,string varSenderBankAccount,string varReceiverBankName,string varReceiverBankAccount,DateTime? varDateCreated,DateTime? varDateProcessed)
		{
			TransactionsExternal item = new TransactionsExternal();
			
				item.TxExternalKey = varTxExternalKey;
			
				item.TxExternalType = varTxExternalType;
			
				item.TxExternalStatus = varTxExternalStatus;
			
				item.UserKey = varUserKey;
			
				item.Currency = varCurrency;
			
				item.Amount = varAmount;
			
				item.SenderBankAccountKey = varSenderBankAccountKey;
			
				item.ReceiverBankAccountKey = varReceiverBankAccountKey;
			
				item.TxExternalDescription = varTxExternalDescription;
			
				item.LastChanged = varLastChanged;
			
				item.IpAddress = varIpAddress;
			
				item.UserKeyUpdated = varUserKeyUpdated;
			
				item.BankReference = varBankReference;
			
				item.SenderBankName = varSenderBankName;
			
				item.SenderBankAccount = varSenderBankAccount;
			
				item.ReceiverBankName = varReceiverBankName;
			
				item.ReceiverBankAccount = varReceiverBankAccount;
			
				item.DateCreated = varDateCreated;
			
				item.DateProcessed = varDateProcessed;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TxExternalKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TxExternalTypeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TxExternalStatusColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SenderBankAccountKeyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverBankAccountKeyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TxExternalDescriptionColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyUpdatedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn BankReferenceColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn SenderBankNameColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SenderBankAccountColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverBankNameColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverBankAccountColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn DateProcessedColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TxExternalKey = @"tx_external_key";
			 public static string TxExternalType = @"tx_external_type";
			 public static string TxExternalStatus = @"tx_external_status";
			 public static string UserKey = @"user_key";
			 public static string Currency = @"currency";
			 public static string Amount = @"amount";
			 public static string SenderBankAccountKey = @"sender_bank_account_key";
			 public static string ReceiverBankAccountKey = @"receiver_bank_account_key";
			 public static string TxExternalDescription = @"tx_external_description";
			 public static string LastChanged = @"last_changed";
			 public static string IpAddress = @"ip_address";
			 public static string UserKeyUpdated = @"user_key_updated";
			 public static string BankReference = @"bank_reference";
			 public static string SenderBankName = @"sender_bank_name";
			 public static string SenderBankAccount = @"sender_bank_account";
			 public static string ReceiverBankName = @"receiver_bank_name";
			 public static string ReceiverBankAccount = @"receiver_bank_account";
			 public static string DateCreated = @"date_created";
			 public static string DateProcessed = @"date_processed";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
