using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the UsersSecurityAnswer class.
	/// </summary>
    [Serializable]
	public partial class UsersSecurityAnswerCollection : ActiveList<UsersSecurityAnswer, UsersSecurityAnswerCollection>
	{	   
		public UsersSecurityAnswerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UsersSecurityAnswerCollection</returns>
		public UsersSecurityAnswerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UsersSecurityAnswer o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Users_Security_Answers table.
	/// </summary>
	[Serializable]
	public partial class UsersSecurityAnswer : ActiveRecord<UsersSecurityAnswer>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UsersSecurityAnswer()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UsersSecurityAnswer(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UsersSecurityAnswer(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UsersSecurityAnswer(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Users_Security_Answers", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarUsersSecurityAnswersKey = new TableSchema.TableColumn(schema);
				colvarUsersSecurityAnswersKey.ColumnName = "users_security_answers_key";
				colvarUsersSecurityAnswersKey.DataType = DbType.Int32;
				colvarUsersSecurityAnswersKey.MaxLength = 0;
				colvarUsersSecurityAnswersKey.AutoIncrement = true;
				colvarUsersSecurityAnswersKey.IsNullable = false;
				colvarUsersSecurityAnswersKey.IsPrimaryKey = true;
				colvarUsersSecurityAnswersKey.IsForeignKey = false;
				colvarUsersSecurityAnswersKey.IsReadOnly = false;
				colvarUsersSecurityAnswersKey.DefaultSetting = @"";
				colvarUsersSecurityAnswersKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsersSecurityAnswersKey);
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = false;
				colvarUserKey.IsNullable = false;
				colvarUserKey.IsPrimaryKey = false;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarQuestion = new TableSchema.TableColumn(schema);
				colvarQuestion.ColumnName = "question";
				colvarQuestion.DataType = DbType.Int32;
				colvarQuestion.MaxLength = 0;
				colvarQuestion.AutoIncrement = false;
				colvarQuestion.IsNullable = false;
				colvarQuestion.IsPrimaryKey = false;
				colvarQuestion.IsForeignKey = false;
				colvarQuestion.IsReadOnly = false;
				colvarQuestion.DefaultSetting = @"";
				colvarQuestion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestion);
				
				TableSchema.TableColumn colvarAnswer = new TableSchema.TableColumn(schema);
				colvarAnswer.ColumnName = "answer";
				colvarAnswer.DataType = DbType.String;
				colvarAnswer.MaxLength = 50;
				colvarAnswer.AutoIncrement = false;
				colvarAnswer.IsNullable = false;
				colvarAnswer.IsPrimaryKey = false;
				colvarAnswer.IsForeignKey = false;
				colvarAnswer.IsReadOnly = false;
				colvarAnswer.DefaultSetting = @"";
				colvarAnswer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAnswer);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = false;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = false;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Users_Security_Answers",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("UsersSecurityAnswersKey")]
		[Bindable(true)]
		public int UsersSecurityAnswersKey 
		{
			get { return GetColumnValue<int>(Columns.UsersSecurityAnswersKey); }
			set { SetColumnValue(Columns.UsersSecurityAnswersKey, value); }
		}
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int UserKey 
		{
			get { return GetColumnValue<int>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("Question")]
		[Bindable(true)]
		public int Question 
		{
			get { return GetColumnValue<int>(Columns.Question); }
			set { SetColumnValue(Columns.Question, value); }
		}
		  
		[XmlAttribute("Answer")]
		[Bindable(true)]
		public string Answer 
		{
			get { return GetColumnValue<string>(Columns.Answer); }
			set { SetColumnValue(Columns.Answer, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime DateCreated 
		{
			get { return GetColumnValue<DateTime>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime LastChanged 
		{
			get { return GetColumnValue<DateTime>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varUserKey,int varQuestion,string varAnswer,DateTime varDateCreated,DateTime varLastChanged)
		{
			UsersSecurityAnswer item = new UsersSecurityAnswer();
			
			item.UserKey = varUserKey;
			
			item.Question = varQuestion;
			
			item.Answer = varAnswer;
			
			item.DateCreated = varDateCreated;
			
			item.LastChanged = varLastChanged;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varUsersSecurityAnswersKey,int varUserKey,int varQuestion,string varAnswer,DateTime varDateCreated,DateTime varLastChanged)
		{
			UsersSecurityAnswer item = new UsersSecurityAnswer();
			
				item.UsersSecurityAnswersKey = varUsersSecurityAnswersKey;
			
				item.UserKey = varUserKey;
			
				item.Question = varQuestion;
			
				item.Answer = varAnswer;
			
				item.DateCreated = varDateCreated;
			
				item.LastChanged = varLastChanged;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UsersSecurityAnswersKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn QuestionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AnswerColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string UsersSecurityAnswersKey = @"users_security_answers_key";
			 public static string UserKey = @"user_key";
			 public static string Question = @"question";
			 public static string Answer = @"answer";
			 public static string DateCreated = @"date_created";
			 public static string LastChanged = @"last_changed";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
