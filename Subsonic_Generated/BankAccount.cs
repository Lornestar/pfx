using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the BankAccount class.
	/// </summary>
    [Serializable]
	public partial class BankAccountCollection : ActiveList<BankAccount, BankAccountCollection>
	{	   
		public BankAccountCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>BankAccountCollection</returns>
		public BankAccountCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                BankAccount o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Bank_Accounts table.
	/// </summary>
	[Serializable]
	public partial class BankAccount : ActiveRecord<BankAccount>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public BankAccount()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public BankAccount(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public BankAccount(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public BankAccount(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Bank_Accounts", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBankAccountKey = new TableSchema.TableColumn(schema);
				colvarBankAccountKey.ColumnName = "bank_account_key";
				colvarBankAccountKey.DataType = DbType.Int32;
				colvarBankAccountKey.MaxLength = 0;
				colvarBankAccountKey.AutoIncrement = true;
				colvarBankAccountKey.IsNullable = false;
				colvarBankAccountKey.IsPrimaryKey = true;
				colvarBankAccountKey.IsForeignKey = false;
				colvarBankAccountKey.IsReadOnly = false;
				colvarBankAccountKey.DefaultSetting = @"";
				colvarBankAccountKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankAccountKey);
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = false;
				colvarUserKey.IsNullable = true;
				colvarUserKey.IsPrimaryKey = false;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarCurrencyKey = new TableSchema.TableColumn(schema);
				colvarCurrencyKey.ColumnName = "currency_key";
				colvarCurrencyKey.DataType = DbType.Int32;
				colvarCurrencyKey.MaxLength = 0;
				colvarCurrencyKey.AutoIncrement = false;
				colvarCurrencyKey.IsNullable = false;
				colvarCurrencyKey.IsPrimaryKey = false;
				colvarCurrencyKey.IsForeignKey = false;
				colvarCurrencyKey.IsReadOnly = false;
				colvarCurrencyKey.DefaultSetting = @"";
				colvarCurrencyKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencyKey);
				
				TableSchema.TableColumn colvarCountryKey = new TableSchema.TableColumn(schema);
				colvarCountryKey.ColumnName = "country_key";
				colvarCountryKey.DataType = DbType.Int32;
				colvarCountryKey.MaxLength = 0;
				colvarCountryKey.AutoIncrement = false;
				colvarCountryKey.IsNullable = true;
				colvarCountryKey.IsPrimaryKey = false;
				colvarCountryKey.IsForeignKey = false;
				colvarCountryKey.IsReadOnly = false;
				colvarCountryKey.DefaultSetting = @"";
				colvarCountryKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryKey);
				
				TableSchema.TableColumn colvarOrganizationKey = new TableSchema.TableColumn(schema);
				colvarOrganizationKey.ColumnName = "organization_key";
				colvarOrganizationKey.DataType = DbType.Int32;
				colvarOrganizationKey.MaxLength = 0;
				colvarOrganizationKey.AutoIncrement = false;
				colvarOrganizationKey.IsNullable = true;
				colvarOrganizationKey.IsPrimaryKey = false;
				colvarOrganizationKey.IsForeignKey = false;
				colvarOrganizationKey.IsReadOnly = false;
				colvarOrganizationKey.DefaultSetting = @"";
				colvarOrganizationKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrganizationKey);
				
				TableSchema.TableColumn colvarBankAccountDescription = new TableSchema.TableColumn(schema);
				colvarBankAccountDescription.ColumnName = "bank_account_description";
				colvarBankAccountDescription.DataType = DbType.String;
				colvarBankAccountDescription.MaxLength = 100;
				colvarBankAccountDescription.AutoIncrement = false;
				colvarBankAccountDescription.IsNullable = true;
				colvarBankAccountDescription.IsPrimaryKey = false;
				colvarBankAccountDescription.IsForeignKey = false;
				colvarBankAccountDescription.IsReadOnly = false;
				colvarBankAccountDescription.DefaultSetting = @"";
				colvarBankAccountDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankAccountDescription);
				
				TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
				colvarUserKeyUpdated.ColumnName = "user_key_updated";
				colvarUserKeyUpdated.DataType = DbType.Int32;
				colvarUserKeyUpdated.MaxLength = 0;
				colvarUserKeyUpdated.AutoIncrement = false;
				colvarUserKeyUpdated.IsNullable = false;
				colvarUserKeyUpdated.IsPrimaryKey = false;
				colvarUserKeyUpdated.IsForeignKey = false;
				colvarUserKeyUpdated.IsReadOnly = false;
				colvarUserKeyUpdated.DefaultSetting = @"";
				colvarUserKeyUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKeyUpdated);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "ip_address";
				colvarIpAddress.DataType = DbType.AnsiString;
				colvarIpAddress.MaxLength = 20;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = false;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarAccountNumber = new TableSchema.TableColumn(schema);
				colvarAccountNumber.ColumnName = "account_number";
				colvarAccountNumber.DataType = DbType.AnsiString;
				colvarAccountNumber.MaxLength = 50;
				colvarAccountNumber.AutoIncrement = false;
				colvarAccountNumber.IsNullable = true;
				colvarAccountNumber.IsPrimaryKey = false;
				colvarAccountNumber.IsForeignKey = false;
				colvarAccountNumber.IsReadOnly = false;
				colvarAccountNumber.DefaultSetting = @"";
				colvarAccountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNumber);
				
				TableSchema.TableColumn colvarIban = new TableSchema.TableColumn(schema);
				colvarIban.ColumnName = "IBAN";
				colvarIban.DataType = DbType.AnsiString;
				colvarIban.MaxLength = 50;
				colvarIban.AutoIncrement = false;
				colvarIban.IsNullable = true;
				colvarIban.IsPrimaryKey = false;
				colvarIban.IsForeignKey = false;
				colvarIban.IsReadOnly = false;
				colvarIban.DefaultSetting = @"";
				colvarIban.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIban);
				
				TableSchema.TableColumn colvarBic = new TableSchema.TableColumn(schema);
				colvarBic.ColumnName = "BIC";
				colvarBic.DataType = DbType.AnsiString;
				colvarBic.MaxLength = 50;
				colvarBic.AutoIncrement = false;
				colvarBic.IsNullable = true;
				colvarBic.IsPrimaryKey = false;
				colvarBic.IsForeignKey = false;
				colvarBic.IsReadOnly = false;
				colvarBic.DefaultSetting = @"";
				colvarBic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBic);
				
				TableSchema.TableColumn colvarABArouting = new TableSchema.TableColumn(schema);
				colvarABArouting.ColumnName = "ABArouting";
				colvarABArouting.DataType = DbType.AnsiString;
				colvarABArouting.MaxLength = 50;
				colvarABArouting.AutoIncrement = false;
				colvarABArouting.IsNullable = true;
				colvarABArouting.IsPrimaryKey = false;
				colvarABArouting.IsForeignKey = false;
				colvarABArouting.IsReadOnly = false;
				colvarABArouting.DefaultSetting = @"";
				colvarABArouting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarABArouting);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "first_name";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 100;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "last_name";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 100;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarBusinessName = new TableSchema.TableColumn(schema);
				colvarBusinessName.ColumnName = "business_name";
				colvarBusinessName.DataType = DbType.String;
				colvarBusinessName.MaxLength = 100;
				colvarBusinessName.AutoIncrement = false;
				colvarBusinessName.IsNullable = true;
				colvarBusinessName.IsPrimaryKey = false;
				colvarBusinessName.IsForeignKey = false;
				colvarBusinessName.IsReadOnly = false;
				colvarBusinessName.DefaultSetting = @"";
				colvarBusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessName);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = false;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = true;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Bank_Accounts",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BankAccountKey")]
		[Bindable(true)]
		public int BankAccountKey 
		{
			get { return GetColumnValue<int>(Columns.BankAccountKey); }
			set { SetColumnValue(Columns.BankAccountKey, value); }
		}
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int? UserKey 
		{
			get { return GetColumnValue<int?>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("CurrencyKey")]
		[Bindable(true)]
		public int CurrencyKey 
		{
			get { return GetColumnValue<int>(Columns.CurrencyKey); }
			set { SetColumnValue(Columns.CurrencyKey, value); }
		}
		  
		[XmlAttribute("CountryKey")]
		[Bindable(true)]
		public int? CountryKey 
		{
			get { return GetColumnValue<int?>(Columns.CountryKey); }
			set { SetColumnValue(Columns.CountryKey, value); }
		}
		  
		[XmlAttribute("OrganizationKey")]
		[Bindable(true)]
		public int? OrganizationKey 
		{
			get { return GetColumnValue<int?>(Columns.OrganizationKey); }
			set { SetColumnValue(Columns.OrganizationKey, value); }
		}
		  
		[XmlAttribute("BankAccountDescription")]
		[Bindable(true)]
		public string BankAccountDescription 
		{
			get { return GetColumnValue<string>(Columns.BankAccountDescription); }
			set { SetColumnValue(Columns.BankAccountDescription, value); }
		}
		  
		[XmlAttribute("UserKeyUpdated")]
		[Bindable(true)]
		public int UserKeyUpdated 
		{
			get { return GetColumnValue<int>(Columns.UserKeyUpdated); }
			set { SetColumnValue(Columns.UserKeyUpdated, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("AccountNumber")]
		[Bindable(true)]
		public string AccountNumber 
		{
			get { return GetColumnValue<string>(Columns.AccountNumber); }
			set { SetColumnValue(Columns.AccountNumber, value); }
		}
		  
		[XmlAttribute("Iban")]
		[Bindable(true)]
		public string Iban 
		{
			get { return GetColumnValue<string>(Columns.Iban); }
			set { SetColumnValue(Columns.Iban, value); }
		}
		  
		[XmlAttribute("Bic")]
		[Bindable(true)]
		public string Bic 
		{
			get { return GetColumnValue<string>(Columns.Bic); }
			set { SetColumnValue(Columns.Bic, value); }
		}
		  
		[XmlAttribute("ABArouting")]
		[Bindable(true)]
		public string ABArouting 
		{
			get { return GetColumnValue<string>(Columns.ABArouting); }
			set { SetColumnValue(Columns.ABArouting, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("BusinessName")]
		[Bindable(true)]
		public string BusinessName 
		{
			get { return GetColumnValue<string>(Columns.BusinessName); }
			set { SetColumnValue(Columns.BusinessName, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime LastChanged 
		{
			get { return GetColumnValue<DateTime>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime? DateCreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varUserKey,int varCurrencyKey,int? varCountryKey,int? varOrganizationKey,string varBankAccountDescription,int varUserKeyUpdated,string varIpAddress,string varAccountNumber,string varIban,string varBic,string varABArouting,string varFirstName,string varLastName,string varBusinessName,DateTime varLastChanged,DateTime? varDateCreated)
		{
			BankAccount item = new BankAccount();
			
			item.UserKey = varUserKey;
			
			item.CurrencyKey = varCurrencyKey;
			
			item.CountryKey = varCountryKey;
			
			item.OrganizationKey = varOrganizationKey;
			
			item.BankAccountDescription = varBankAccountDescription;
			
			item.UserKeyUpdated = varUserKeyUpdated;
			
			item.IpAddress = varIpAddress;
			
			item.AccountNumber = varAccountNumber;
			
			item.Iban = varIban;
			
			item.Bic = varBic;
			
			item.ABArouting = varABArouting;
			
			item.FirstName = varFirstName;
			
			item.LastName = varLastName;
			
			item.BusinessName = varBusinessName;
			
			item.LastChanged = varLastChanged;
			
			item.DateCreated = varDateCreated;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varBankAccountKey,int? varUserKey,int varCurrencyKey,int? varCountryKey,int? varOrganizationKey,string varBankAccountDescription,int varUserKeyUpdated,string varIpAddress,string varAccountNumber,string varIban,string varBic,string varABArouting,string varFirstName,string varLastName,string varBusinessName,DateTime varLastChanged,DateTime? varDateCreated)
		{
			BankAccount item = new BankAccount();
			
				item.BankAccountKey = varBankAccountKey;
			
				item.UserKey = varUserKey;
			
				item.CurrencyKey = varCurrencyKey;
			
				item.CountryKey = varCountryKey;
			
				item.OrganizationKey = varOrganizationKey;
			
				item.BankAccountDescription = varBankAccountDescription;
			
				item.UserKeyUpdated = varUserKeyUpdated;
			
				item.IpAddress = varIpAddress;
			
				item.AccountNumber = varAccountNumber;
			
				item.Iban = varIban;
			
				item.Bic = varBic;
			
				item.ABArouting = varABArouting;
			
				item.FirstName = varFirstName;
			
				item.LastName = varLastName;
			
				item.BusinessName = varBusinessName;
			
				item.LastChanged = varLastChanged;
			
				item.DateCreated = varDateCreated;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BankAccountKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryKeyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn OrganizationKeyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BankAccountDescriptionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyUpdatedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn AccountNumberColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IbanColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn BicColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ABAroutingColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn BusinessNameColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BankAccountKey = @"bank_account_key";
			 public static string UserKey = @"user_key";
			 public static string CurrencyKey = @"currency_key";
			 public static string CountryKey = @"country_key";
			 public static string OrganizationKey = @"organization_key";
			 public static string BankAccountDescription = @"bank_account_description";
			 public static string UserKeyUpdated = @"user_key_updated";
			 public static string IpAddress = @"ip_address";
			 public static string AccountNumber = @"account_number";
			 public static string Iban = @"IBAN";
			 public static string Bic = @"BIC";
			 public static string ABArouting = @"ABArouting";
			 public static string FirstName = @"first_name";
			 public static string LastName = @"last_name";
			 public static string BusinessName = @"business_name";
			 public static string LastChanged = @"last_changed";
			 public static string DateCreated = @"date_created";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
