using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the InfoBank class.
	/// </summary>
    [Serializable]
	public partial class InfoBankCollection : ActiveList<InfoBank, InfoBankCollection>
	{	   
		public InfoBankCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InfoBankCollection</returns>
		public InfoBankCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InfoBank o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Info_Banks table.
	/// </summary>
	[Serializable]
	public partial class InfoBank : ActiveRecord<InfoBank>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InfoBank()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InfoBank(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InfoBank(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InfoBank(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Info_Banks", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInfoBankKey = new TableSchema.TableColumn(schema);
				colvarInfoBankKey.ColumnName = "info_bank_key";
				colvarInfoBankKey.DataType = DbType.Int32;
				colvarInfoBankKey.MaxLength = 0;
				colvarInfoBankKey.AutoIncrement = true;
				colvarInfoBankKey.IsNullable = false;
				colvarInfoBankKey.IsPrimaryKey = true;
				colvarInfoBankKey.IsForeignKey = false;
				colvarInfoBankKey.IsReadOnly = false;
				colvarInfoBankKey.DefaultSetting = @"";
				colvarInfoBankKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoBankKey);
				
				TableSchema.TableColumn colvarBankName = new TableSchema.TableColumn(schema);
				colvarBankName.ColumnName = "bank_name";
				colvarBankName.DataType = DbType.String;
				colvarBankName.MaxLength = 50;
				colvarBankName.AutoIncrement = false;
				colvarBankName.IsNullable = false;
				colvarBankName.IsPrimaryKey = false;
				colvarBankName.IsForeignKey = false;
				colvarBankName.IsReadOnly = false;
				colvarBankName.DefaultSetting = @"";
				colvarBankName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankName);
				
				TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
				colvarUserKeyUpdated.ColumnName = "user_key_updated";
				colvarUserKeyUpdated.DataType = DbType.Int32;
				colvarUserKeyUpdated.MaxLength = 0;
				colvarUserKeyUpdated.AutoIncrement = false;
				colvarUserKeyUpdated.IsNullable = true;
				colvarUserKeyUpdated.IsPrimaryKey = false;
				colvarUserKeyUpdated.IsForeignKey = false;
				colvarUserKeyUpdated.IsReadOnly = false;
				colvarUserKeyUpdated.DefaultSetting = @"";
				colvarUserKeyUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKeyUpdated);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = true;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarBankDescription = new TableSchema.TableColumn(schema);
				colvarBankDescription.ColumnName = "bank_description";
				colvarBankDescription.DataType = DbType.String;
				colvarBankDescription.MaxLength = 50;
				colvarBankDescription.AutoIncrement = false;
				colvarBankDescription.IsNullable = true;
				colvarBankDescription.IsPrimaryKey = false;
				colvarBankDescription.IsForeignKey = false;
				colvarBankDescription.IsReadOnly = false;
				colvarBankDescription.DefaultSetting = @"";
				colvarBankDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankDescription);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Info_Banks",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InfoBankKey")]
		[Bindable(true)]
		public int InfoBankKey 
		{
			get { return GetColumnValue<int>(Columns.InfoBankKey); }
			set { SetColumnValue(Columns.InfoBankKey, value); }
		}
		  
		[XmlAttribute("BankName")]
		[Bindable(true)]
		public string BankName 
		{
			get { return GetColumnValue<string>(Columns.BankName); }
			set { SetColumnValue(Columns.BankName, value); }
		}
		  
		[XmlAttribute("UserKeyUpdated")]
		[Bindable(true)]
		public int? UserKeyUpdated 
		{
			get { return GetColumnValue<int?>(Columns.UserKeyUpdated); }
			set { SetColumnValue(Columns.UserKeyUpdated, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime? LastChanged 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("BankDescription")]
		[Bindable(true)]
		public string BankDescription 
		{
			get { return GetColumnValue<string>(Columns.BankDescription); }
			set { SetColumnValue(Columns.BankDescription, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBankName,int? varUserKeyUpdated,DateTime? varLastChanged,string varBankDescription)
		{
			InfoBank item = new InfoBank();
			
			item.BankName = varBankName;
			
			item.UserKeyUpdated = varUserKeyUpdated;
			
			item.LastChanged = varLastChanged;
			
			item.BankDescription = varBankDescription;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varInfoBankKey,string varBankName,int? varUserKeyUpdated,DateTime? varLastChanged,string varBankDescription)
		{
			InfoBank item = new InfoBank();
			
				item.InfoBankKey = varInfoBankKey;
			
				item.BankName = varBankName;
			
				item.UserKeyUpdated = varUserKeyUpdated;
			
				item.LastChanged = varLastChanged;
			
				item.BankDescription = varBankDescription;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InfoBankKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BankNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyUpdatedColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BankDescriptionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InfoBankKey = @"info_bank_key";
			 public static string BankName = @"bank_name";
			 public static string UserKeyUpdated = @"user_key_updated";
			 public static string LastChanged = @"last_changed";
			 public static string BankDescription = @"bank_description";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
