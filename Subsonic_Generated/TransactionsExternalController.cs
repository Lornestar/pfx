using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
    /// <summary>
    /// Controller class for Transactions_External
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TransactionsExternalController
    {
        // Preload our schema..
        TransactionsExternal thisSchemaLoad = new TransactionsExternal();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TransactionsExternalCollection FetchAll()
        {
            TransactionsExternalCollection coll = new TransactionsExternalCollection();
            Query qry = new Query(TransactionsExternal.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TransactionsExternalCollection FetchByID(object TxExternalKey)
        {
            TransactionsExternalCollection coll = new TransactionsExternalCollection().Where("tx_external_key", TxExternalKey).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TransactionsExternalCollection FetchByQuery(Query qry)
        {
            TransactionsExternalCollection coll = new TransactionsExternalCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TxExternalKey)
        {
            return (TransactionsExternal.Delete(TxExternalKey) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TxExternalKey)
        {
            return (TransactionsExternal.Destroy(TxExternalKey) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int TxExternalType,int TxExternalStatus,int? UserKey,int Currency,decimal Amount,int? SenderBankAccountKey,int? ReceiverBankAccountKey,string TxExternalDescription,DateTime LastChanged,string IpAddress,int? UserKeyUpdated,string BankReference,string SenderBankName,string SenderBankAccount,string ReceiverBankName,string ReceiverBankAccount,DateTime? DateCreated,DateTime? DateProcessed)
	    {
		    TransactionsExternal item = new TransactionsExternal();
		    
            item.TxExternalType = TxExternalType;
            
            item.TxExternalStatus = TxExternalStatus;
            
            item.UserKey = UserKey;
            
            item.Currency = Currency;
            
            item.Amount = Amount;
            
            item.SenderBankAccountKey = SenderBankAccountKey;
            
            item.ReceiverBankAccountKey = ReceiverBankAccountKey;
            
            item.TxExternalDescription = TxExternalDescription;
            
            item.LastChanged = LastChanged;
            
            item.IpAddress = IpAddress;
            
            item.UserKeyUpdated = UserKeyUpdated;
            
            item.BankReference = BankReference;
            
            item.SenderBankName = SenderBankName;
            
            item.SenderBankAccount = SenderBankAccount;
            
            item.ReceiverBankName = ReceiverBankName;
            
            item.ReceiverBankAccount = ReceiverBankAccount;
            
            item.DateCreated = DateCreated;
            
            item.DateProcessed = DateProcessed;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long TxExternalKey,int TxExternalType,int TxExternalStatus,int? UserKey,int Currency,decimal Amount,int? SenderBankAccountKey,int? ReceiverBankAccountKey,string TxExternalDescription,DateTime LastChanged,string IpAddress,int? UserKeyUpdated,string BankReference,string SenderBankName,string SenderBankAccount,string ReceiverBankName,string ReceiverBankAccount,DateTime? DateCreated,DateTime? DateProcessed)
	    {
		    TransactionsExternal item = new TransactionsExternal();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.TxExternalKey = TxExternalKey;
				
			item.TxExternalType = TxExternalType;
				
			item.TxExternalStatus = TxExternalStatus;
				
			item.UserKey = UserKey;
				
			item.Currency = Currency;
				
			item.Amount = Amount;
				
			item.SenderBankAccountKey = SenderBankAccountKey;
				
			item.ReceiverBankAccountKey = ReceiverBankAccountKey;
				
			item.TxExternalDescription = TxExternalDescription;
				
			item.LastChanged = LastChanged;
				
			item.IpAddress = IpAddress;
				
			item.UserKeyUpdated = UserKeyUpdated;
				
			item.BankReference = BankReference;
				
			item.SenderBankName = SenderBankName;
				
			item.SenderBankAccount = SenderBankAccount;
				
			item.ReceiverBankName = ReceiverBankName;
				
			item.ReceiverBankAccount = ReceiverBankAccount;
				
			item.DateCreated = DateCreated;
				
			item.DateProcessed = DateProcessed;
				
	        item.Save(UserName);
	    }
    }
}
