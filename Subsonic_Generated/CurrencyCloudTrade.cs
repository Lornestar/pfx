using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the CurrencyCloudTrade class.
	/// </summary>
    [Serializable]
	public partial class CurrencyCloudTradeCollection : ActiveList<CurrencyCloudTrade, CurrencyCloudTradeCollection>
	{	   
		public CurrencyCloudTradeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CurrencyCloudTradeCollection</returns>
		public CurrencyCloudTradeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CurrencyCloudTrade o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CurrencyCloud_Trades table.
	/// </summary>
	[Serializable]
	public partial class CurrencyCloudTrade : ActiveRecord<CurrencyCloudTrade>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public CurrencyCloudTrade()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CurrencyCloudTrade(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public CurrencyCloudTrade(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public CurrencyCloudTrade(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CurrencyCloud_Trades", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCurrencycloudTradeKey = new TableSchema.TableColumn(schema);
				colvarCurrencycloudTradeKey.ColumnName = "currencycloud_trade_key";
				colvarCurrencycloudTradeKey.DataType = DbType.Int64;
				colvarCurrencycloudTradeKey.MaxLength = 0;
				colvarCurrencycloudTradeKey.AutoIncrement = true;
				colvarCurrencycloudTradeKey.IsNullable = false;
				colvarCurrencycloudTradeKey.IsPrimaryKey = true;
				colvarCurrencycloudTradeKey.IsForeignKey = false;
				colvarCurrencycloudTradeKey.IsReadOnly = false;
				colvarCurrencycloudTradeKey.DefaultSetting = @"";
				colvarCurrencycloudTradeKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencycloudTradeKey);
				
				TableSchema.TableColumn colvarPaymentsKey = new TableSchema.TableColumn(schema);
				colvarPaymentsKey.ColumnName = "payments_key";
				colvarPaymentsKey.DataType = DbType.Int32;
				colvarPaymentsKey.MaxLength = 0;
				colvarPaymentsKey.AutoIncrement = false;
				colvarPaymentsKey.IsNullable = false;
				colvarPaymentsKey.IsPrimaryKey = false;
				colvarPaymentsKey.IsForeignKey = false;
				colvarPaymentsKey.IsReadOnly = false;
				colvarPaymentsKey.DefaultSetting = @"";
				colvarPaymentsKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentsKey);
				
				TableSchema.TableColumn colvarSettlementKey = new TableSchema.TableColumn(schema);
				colvarSettlementKey.ColumnName = "settlement_key";
				colvarSettlementKey.DataType = DbType.Int64;
				colvarSettlementKey.MaxLength = 0;
				colvarSettlementKey.AutoIncrement = false;
				colvarSettlementKey.IsNullable = true;
				colvarSettlementKey.IsPrimaryKey = false;
				colvarSettlementKey.IsForeignKey = false;
				colvarSettlementKey.IsReadOnly = false;
				colvarSettlementKey.DefaultSetting = @"";
				colvarSettlementKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSettlementKey);
				
				TableSchema.TableColumn colvarInitiatedDate = new TableSchema.TableColumn(schema);
				colvarInitiatedDate.ColumnName = "initiated_date";
				colvarInitiatedDate.DataType = DbType.DateTime;
				colvarInitiatedDate.MaxLength = 0;
				colvarInitiatedDate.AutoIncrement = false;
				colvarInitiatedDate.IsNullable = false;
				colvarInitiatedDate.IsPrimaryKey = false;
				colvarInitiatedDate.IsForeignKey = false;
				colvarInitiatedDate.IsReadOnly = false;
				colvarInitiatedDate.DefaultSetting = @"";
				colvarInitiatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitiatedDate);
				
				TableSchema.TableColumn colvarCcTradeid = new TableSchema.TableColumn(schema);
				colvarCcTradeid.ColumnName = "cc_tradeid";
				colvarCcTradeid.DataType = DbType.AnsiString;
				colvarCcTradeid.MaxLength = 50;
				colvarCcTradeid.AutoIncrement = false;
				colvarCcTradeid.IsNullable = true;
				colvarCcTradeid.IsPrimaryKey = false;
				colvarCcTradeid.IsForeignKey = false;
				colvarCcTradeid.IsReadOnly = false;
				colvarCcTradeid.DefaultSetting = @"";
				colvarCcTradeid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcTradeid);
				
				TableSchema.TableColumn colvarSettlementDate = new TableSchema.TableColumn(schema);
				colvarSettlementDate.ColumnName = "settlement_date";
				colvarSettlementDate.DataType = DbType.DateTime;
				colvarSettlementDate.MaxLength = 0;
				colvarSettlementDate.AutoIncrement = false;
				colvarSettlementDate.IsNullable = true;
				colvarSettlementDate.IsPrimaryKey = false;
				colvarSettlementDate.IsForeignKey = false;
				colvarSettlementDate.IsReadOnly = false;
				colvarSettlementDate.DefaultSetting = @"";
				colvarSettlementDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSettlementDate);
				
				TableSchema.TableColumn colvarFundsreceivedDate = new TableSchema.TableColumn(schema);
				colvarFundsreceivedDate.ColumnName = "fundsreceived_date";
				colvarFundsreceivedDate.DataType = DbType.DateTime;
				colvarFundsreceivedDate.MaxLength = 0;
				colvarFundsreceivedDate.AutoIncrement = false;
				colvarFundsreceivedDate.IsNullable = true;
				colvarFundsreceivedDate.IsPrimaryKey = false;
				colvarFundsreceivedDate.IsForeignKey = false;
				colvarFundsreceivedDate.IsReadOnly = false;
				colvarFundsreceivedDate.DefaultSetting = @"";
				colvarFundsreceivedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFundsreceivedDate);
				
				TableSchema.TableColumn colvarWithdrawlsentDate = new TableSchema.TableColumn(schema);
				colvarWithdrawlsentDate.ColumnName = "withdrawlsent_date";
				colvarWithdrawlsentDate.DataType = DbType.DateTime;
				colvarWithdrawlsentDate.MaxLength = 0;
				colvarWithdrawlsentDate.AutoIncrement = false;
				colvarWithdrawlsentDate.IsNullable = true;
				colvarWithdrawlsentDate.IsPrimaryKey = false;
				colvarWithdrawlsentDate.IsForeignKey = false;
				colvarWithdrawlsentDate.IsReadOnly = false;
				colvarWithdrawlsentDate.DefaultSetting = @"";
				colvarWithdrawlsentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWithdrawlsentDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("CurrencyCloud_Trades",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CurrencycloudTradeKey")]
		[Bindable(true)]
		public long CurrencycloudTradeKey 
		{
			get { return GetColumnValue<long>(Columns.CurrencycloudTradeKey); }
			set { SetColumnValue(Columns.CurrencycloudTradeKey, value); }
		}
		  
		[XmlAttribute("PaymentsKey")]
		[Bindable(true)]
		public int PaymentsKey 
		{
			get { return GetColumnValue<int>(Columns.PaymentsKey); }
			set { SetColumnValue(Columns.PaymentsKey, value); }
		}
		  
		[XmlAttribute("SettlementKey")]
		[Bindable(true)]
		public long? SettlementKey 
		{
			get { return GetColumnValue<long?>(Columns.SettlementKey); }
			set { SetColumnValue(Columns.SettlementKey, value); }
		}
		  
		[XmlAttribute("InitiatedDate")]
		[Bindable(true)]
		public DateTime InitiatedDate 
		{
			get { return GetColumnValue<DateTime>(Columns.InitiatedDate); }
			set { SetColumnValue(Columns.InitiatedDate, value); }
		}
		  
		[XmlAttribute("CcTradeid")]
		[Bindable(true)]
		public string CcTradeid 
		{
			get { return GetColumnValue<string>(Columns.CcTradeid); }
			set { SetColumnValue(Columns.CcTradeid, value); }
		}
		  
		[XmlAttribute("SettlementDate")]
		[Bindable(true)]
		public DateTime? SettlementDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.SettlementDate); }
			set { SetColumnValue(Columns.SettlementDate, value); }
		}
		  
		[XmlAttribute("FundsreceivedDate")]
		[Bindable(true)]
		public DateTime? FundsreceivedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.FundsreceivedDate); }
			set { SetColumnValue(Columns.FundsreceivedDate, value); }
		}
		  
		[XmlAttribute("WithdrawlsentDate")]
		[Bindable(true)]
		public DateTime? WithdrawlsentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.WithdrawlsentDate); }
			set { SetColumnValue(Columns.WithdrawlsentDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPaymentsKey,long? varSettlementKey,DateTime varInitiatedDate,string varCcTradeid,DateTime? varSettlementDate,DateTime? varFundsreceivedDate,DateTime? varWithdrawlsentDate)
		{
			CurrencyCloudTrade item = new CurrencyCloudTrade();
			
			item.PaymentsKey = varPaymentsKey;
			
			item.SettlementKey = varSettlementKey;
			
			item.InitiatedDate = varInitiatedDate;
			
			item.CcTradeid = varCcTradeid;
			
			item.SettlementDate = varSettlementDate;
			
			item.FundsreceivedDate = varFundsreceivedDate;
			
			item.WithdrawlsentDate = varWithdrawlsentDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varCurrencycloudTradeKey,int varPaymentsKey,long? varSettlementKey,DateTime varInitiatedDate,string varCcTradeid,DateTime? varSettlementDate,DateTime? varFundsreceivedDate,DateTime? varWithdrawlsentDate)
		{
			CurrencyCloudTrade item = new CurrencyCloudTrade();
			
				item.CurrencycloudTradeKey = varCurrencycloudTradeKey;
			
				item.PaymentsKey = varPaymentsKey;
			
				item.SettlementKey = varSettlementKey;
			
				item.InitiatedDate = varInitiatedDate;
			
				item.CcTradeid = varCcTradeid;
			
				item.SettlementDate = varSettlementDate;
			
				item.FundsreceivedDate = varFundsreceivedDate;
			
				item.WithdrawlsentDate = varWithdrawlsentDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CurrencycloudTradeKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentsKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SettlementKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InitiatedDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CcTradeidColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SettlementDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FundsreceivedDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn WithdrawlsentDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CurrencycloudTradeKey = @"currencycloud_trade_key";
			 public static string PaymentsKey = @"payments_key";
			 public static string SettlementKey = @"settlement_key";
			 public static string InitiatedDate = @"initiated_date";
			 public static string CcTradeid = @"cc_tradeid";
			 public static string SettlementDate = @"settlement_date";
			 public static string FundsreceivedDate = @"fundsreceived_date";
			 public static string WithdrawlsentDate = @"withdrawlsent_date";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
