using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the CurrencyCloudSettlement class.
	/// </summary>
    [Serializable]
	public partial class CurrencyCloudSettlementCollection : ActiveList<CurrencyCloudSettlement, CurrencyCloudSettlementCollection>
	{	   
		public CurrencyCloudSettlementCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CurrencyCloudSettlementCollection</returns>
		public CurrencyCloudSettlementCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CurrencyCloudSettlement o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CurrencyCloud_Settlements table.
	/// </summary>
	[Serializable]
	public partial class CurrencyCloudSettlement : ActiveRecord<CurrencyCloudSettlement>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public CurrencyCloudSettlement()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CurrencyCloudSettlement(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public CurrencyCloudSettlement(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public CurrencyCloudSettlement(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CurrencyCloud_Settlements", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCurrencycloudSettlementKey = new TableSchema.TableColumn(schema);
				colvarCurrencycloudSettlementKey.ColumnName = "currencycloud_settlement_key";
				colvarCurrencycloudSettlementKey.DataType = DbType.Int64;
				colvarCurrencycloudSettlementKey.MaxLength = 0;
				colvarCurrencycloudSettlementKey.AutoIncrement = true;
				colvarCurrencycloudSettlementKey.IsNullable = false;
				colvarCurrencycloudSettlementKey.IsPrimaryKey = true;
				colvarCurrencycloudSettlementKey.IsForeignKey = false;
				colvarCurrencycloudSettlementKey.IsReadOnly = false;
				colvarCurrencycloudSettlementKey.DefaultSetting = @"";
				colvarCurrencycloudSettlementKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencycloudSettlementKey);
				
				TableSchema.TableColumn colvarCcSettlementid = new TableSchema.TableColumn(schema);
				colvarCcSettlementid.ColumnName = "cc_settlementid";
				colvarCcSettlementid.DataType = DbType.AnsiString;
				colvarCcSettlementid.MaxLength = 50;
				colvarCcSettlementid.AutoIncrement = false;
				colvarCcSettlementid.IsNullable = true;
				colvarCcSettlementid.IsPrimaryKey = false;
				colvarCcSettlementid.IsForeignKey = false;
				colvarCcSettlementid.IsReadOnly = false;
				colvarCcSettlementid.DefaultSetting = @"";
				colvarCcSettlementid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcSettlementid);
				
				TableSchema.TableColumn colvarReleasedate = new TableSchema.TableColumn(schema);
				colvarReleasedate.ColumnName = "releasedate";
				colvarReleasedate.DataType = DbType.DateTime;
				colvarReleasedate.MaxLength = 0;
				colvarReleasedate.AutoIncrement = false;
				colvarReleasedate.IsNullable = true;
				colvarReleasedate.IsPrimaryKey = false;
				colvarReleasedate.IsForeignKey = false;
				colvarReleasedate.IsReadOnly = false;
				colvarReleasedate.DefaultSetting = @"";
				colvarReleasedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReleasedate);
				
				TableSchema.TableColumn colvarInitiatedDate = new TableSchema.TableColumn(schema);
				colvarInitiatedDate.ColumnName = "initiated_date";
				colvarInitiatedDate.DataType = DbType.DateTime;
				colvarInitiatedDate.MaxLength = 0;
				colvarInitiatedDate.AutoIncrement = false;
				colvarInitiatedDate.IsNullable = true;
				colvarInitiatedDate.IsPrimaryKey = false;
				colvarInitiatedDate.IsForeignKey = false;
				colvarInitiatedDate.IsReadOnly = false;
				colvarInitiatedDate.DefaultSetting = @"";
				colvarInitiatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitiatedDate);
				
				TableSchema.TableColumn colvarFundsreceivedDate = new TableSchema.TableColumn(schema);
				colvarFundsreceivedDate.ColumnName = "fundsreceived_date";
				colvarFundsreceivedDate.DataType = DbType.DateTime;
				colvarFundsreceivedDate.MaxLength = 0;
				colvarFundsreceivedDate.AutoIncrement = false;
				colvarFundsreceivedDate.IsNullable = true;
				colvarFundsreceivedDate.IsPrimaryKey = false;
				colvarFundsreceivedDate.IsForeignKey = false;
				colvarFundsreceivedDate.IsReadOnly = false;
				colvarFundsreceivedDate.DefaultSetting = @"";
				colvarFundsreceivedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFundsreceivedDate);
				
				TableSchema.TableColumn colvarWithdrawlsentDate = new TableSchema.TableColumn(schema);
				colvarWithdrawlsentDate.ColumnName = "withdrawlsent_date";
				colvarWithdrawlsentDate.DataType = DbType.DateTime;
				colvarWithdrawlsentDate.MaxLength = 0;
				colvarWithdrawlsentDate.AutoIncrement = false;
				colvarWithdrawlsentDate.IsNullable = true;
				colvarWithdrawlsentDate.IsPrimaryKey = false;
				colvarWithdrawlsentDate.IsForeignKey = false;
				colvarWithdrawlsentDate.IsReadOnly = false;
				colvarWithdrawlsentDate.DefaultSetting = @"";
				colvarWithdrawlsentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWithdrawlsentDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("CurrencyCloud_Settlements",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CurrencycloudSettlementKey")]
		[Bindable(true)]
		public long CurrencycloudSettlementKey 
		{
			get { return GetColumnValue<long>(Columns.CurrencycloudSettlementKey); }
			set { SetColumnValue(Columns.CurrencycloudSettlementKey, value); }
		}
		  
		[XmlAttribute("CcSettlementid")]
		[Bindable(true)]
		public string CcSettlementid 
		{
			get { return GetColumnValue<string>(Columns.CcSettlementid); }
			set { SetColumnValue(Columns.CcSettlementid, value); }
		}
		  
		[XmlAttribute("Releasedate")]
		[Bindable(true)]
		public DateTime? Releasedate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Releasedate); }
			set { SetColumnValue(Columns.Releasedate, value); }
		}
		  
		[XmlAttribute("InitiatedDate")]
		[Bindable(true)]
		public DateTime? InitiatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InitiatedDate); }
			set { SetColumnValue(Columns.InitiatedDate, value); }
		}
		  
		[XmlAttribute("FundsreceivedDate")]
		[Bindable(true)]
		public DateTime? FundsreceivedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.FundsreceivedDate); }
			set { SetColumnValue(Columns.FundsreceivedDate, value); }
		}
		  
		[XmlAttribute("WithdrawlsentDate")]
		[Bindable(true)]
		public DateTime? WithdrawlsentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.WithdrawlsentDate); }
			set { SetColumnValue(Columns.WithdrawlsentDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCcSettlementid,DateTime? varReleasedate,DateTime? varInitiatedDate,DateTime? varFundsreceivedDate,DateTime? varWithdrawlsentDate)
		{
			CurrencyCloudSettlement item = new CurrencyCloudSettlement();
			
			item.CcSettlementid = varCcSettlementid;
			
			item.Releasedate = varReleasedate;
			
			item.InitiatedDate = varInitiatedDate;
			
			item.FundsreceivedDate = varFundsreceivedDate;
			
			item.WithdrawlsentDate = varWithdrawlsentDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varCurrencycloudSettlementKey,string varCcSettlementid,DateTime? varReleasedate,DateTime? varInitiatedDate,DateTime? varFundsreceivedDate,DateTime? varWithdrawlsentDate)
		{
			CurrencyCloudSettlement item = new CurrencyCloudSettlement();
			
				item.CurrencycloudSettlementKey = varCurrencycloudSettlementKey;
			
				item.CcSettlementid = varCcSettlementid;
			
				item.Releasedate = varReleasedate;
			
				item.InitiatedDate = varInitiatedDate;
			
				item.FundsreceivedDate = varFundsreceivedDate;
			
				item.WithdrawlsentDate = varWithdrawlsentDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CurrencycloudSettlementKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CcSettlementidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ReleasedateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InitiatedDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FundsreceivedDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn WithdrawlsentDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CurrencycloudSettlementKey = @"currencycloud_settlement_key";
			 public static string CcSettlementid = @"cc_settlementid";
			 public static string Releasedate = @"releasedate";
			 public static string InitiatedDate = @"initiated_date";
			 public static string FundsreceivedDate = @"fundsreceived_date";
			 public static string WithdrawlsentDate = @"withdrawlsent_date";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
