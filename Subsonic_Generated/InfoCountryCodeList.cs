using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the InfoCountryCodeList class.
	/// </summary>
    [Serializable]
	public partial class InfoCountryCodeListCollection : ActiveList<InfoCountryCodeList, InfoCountryCodeListCollection>
	{	   
		public InfoCountryCodeListCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InfoCountryCodeListCollection</returns>
		public InfoCountryCodeListCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InfoCountryCodeList o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Info_Country_Code_List table.
	/// </summary>
	[Serializable]
	public partial class InfoCountryCodeList : ActiveRecord<InfoCountryCodeList>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InfoCountryCodeList()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InfoCountryCodeList(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InfoCountryCodeList(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InfoCountryCodeList(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Info_Country_Code_List", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCountryKey = new TableSchema.TableColumn(schema);
				colvarCountryKey.ColumnName = "Country_Key";
				colvarCountryKey.DataType = DbType.Int32;
				colvarCountryKey.MaxLength = 0;
				colvarCountryKey.AutoIncrement = true;
				colvarCountryKey.IsNullable = false;
				colvarCountryKey.IsPrimaryKey = true;
				colvarCountryKey.IsForeignKey = false;
				colvarCountryKey.IsReadOnly = false;
				colvarCountryKey.DefaultSetting = @"";
				colvarCountryKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryKey);
				
				TableSchema.TableColumn colvarCountryCode = new TableSchema.TableColumn(schema);
				colvarCountryCode.ColumnName = "Country_Code";
				colvarCountryCode.DataType = DbType.String;
				colvarCountryCode.MaxLength = 50;
				colvarCountryCode.AutoIncrement = false;
				colvarCountryCode.IsNullable = true;
				colvarCountryCode.IsPrimaryKey = false;
				colvarCountryCode.IsForeignKey = false;
				colvarCountryCode.IsReadOnly = false;
				colvarCountryCode.DefaultSetting = @"";
				colvarCountryCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryCode);
				
				TableSchema.TableColumn colvarCountryText = new TableSchema.TableColumn(schema);
				colvarCountryText.ColumnName = "Country_Text";
				colvarCountryText.DataType = DbType.String;
				colvarCountryText.MaxLength = 50;
				colvarCountryText.AutoIncrement = false;
				colvarCountryText.IsNullable = true;
				colvarCountryText.IsPrimaryKey = false;
				colvarCountryText.IsForeignKey = false;
				colvarCountryText.IsReadOnly = false;
				colvarCountryText.DefaultSetting = @"";
				colvarCountryText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryText);
				
				TableSchema.TableColumn colvarCountryTimeZone = new TableSchema.TableColumn(schema);
				colvarCountryTimeZone.ColumnName = "Country_Time_Zone";
				colvarCountryTimeZone.DataType = DbType.String;
				colvarCountryTimeZone.MaxLength = 10;
				colvarCountryTimeZone.AutoIncrement = false;
				colvarCountryTimeZone.IsNullable = true;
				colvarCountryTimeZone.IsPrimaryKey = false;
				colvarCountryTimeZone.IsForeignKey = false;
				colvarCountryTimeZone.IsReadOnly = false;
				colvarCountryTimeZone.DefaultSetting = @"";
				colvarCountryTimeZone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryTimeZone);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Info_Country_Code_List",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CountryKey")]
		[Bindable(true)]
		public int CountryKey 
		{
			get { return GetColumnValue<int>(Columns.CountryKey); }
			set { SetColumnValue(Columns.CountryKey, value); }
		}
		  
		[XmlAttribute("CountryCode")]
		[Bindable(true)]
		public string CountryCode 
		{
			get { return GetColumnValue<string>(Columns.CountryCode); }
			set { SetColumnValue(Columns.CountryCode, value); }
		}
		  
		[XmlAttribute("CountryText")]
		[Bindable(true)]
		public string CountryText 
		{
			get { return GetColumnValue<string>(Columns.CountryText); }
			set { SetColumnValue(Columns.CountryText, value); }
		}
		  
		[XmlAttribute("CountryTimeZone")]
		[Bindable(true)]
		public string CountryTimeZone 
		{
			get { return GetColumnValue<string>(Columns.CountryTimeZone); }
			set { SetColumnValue(Columns.CountryTimeZone, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCountryCode,string varCountryText,string varCountryTimeZone)
		{
			InfoCountryCodeList item = new InfoCountryCodeList();
			
			item.CountryCode = varCountryCode;
			
			item.CountryText = varCountryText;
			
			item.CountryTimeZone = varCountryTimeZone;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCountryKey,string varCountryCode,string varCountryText,string varCountryTimeZone)
		{
			InfoCountryCodeList item = new InfoCountryCodeList();
			
				item.CountryKey = varCountryKey;
			
				item.CountryCode = varCountryCode;
			
				item.CountryText = varCountryText;
			
				item.CountryTimeZone = varCountryTimeZone;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CountryKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryTextColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryTimeZoneColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CountryKey = @"Country_Key";
			 public static string CountryCode = @"Country_Code";
			 public static string CountryText = @"Country_Text";
			 public static string CountryTimeZone = @"Country_Time_Zone";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
