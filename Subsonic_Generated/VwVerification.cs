using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    /// <summary>
    /// Strongly-typed collection for the VwVerification class.
    /// </summary>
    [Serializable]
    public partial class VwVerificationCollection : ReadOnlyList<VwVerification, VwVerificationCollection>
    {        
        public VwVerificationCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_Verification view.
    /// </summary>
    [Serializable]
    public partial class VwVerification : ReadOnlyRecord<VwVerification>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_Verification", TableType.View, DataService.GetInstance("Peerfx"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarUsersVerifiedKey = new TableSchema.TableColumn(schema);
                colvarUsersVerifiedKey.ColumnName = "users_verified_key";
                colvarUsersVerifiedKey.DataType = DbType.Int32;
                colvarUsersVerifiedKey.MaxLength = 0;
                colvarUsersVerifiedKey.AutoIncrement = false;
                colvarUsersVerifiedKey.IsNullable = false;
                colvarUsersVerifiedKey.IsPrimaryKey = false;
                colvarUsersVerifiedKey.IsForeignKey = false;
                colvarUsersVerifiedKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarUsersVerifiedKey);
                
                TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
                colvarUserKey.ColumnName = "user_key";
                colvarUserKey.DataType = DbType.Int32;
                colvarUserKey.MaxLength = 0;
                colvarUserKey.AutoIncrement = false;
                colvarUserKey.IsNullable = false;
                colvarUserKey.IsPrimaryKey = false;
                colvarUserKey.IsForeignKey = false;
                colvarUserKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserKey);
                
                TableSchema.TableColumn colvarVerificationMethodsKey = new TableSchema.TableColumn(schema);
                colvarVerificationMethodsKey.ColumnName = "verification_methods_key";
                colvarVerificationMethodsKey.DataType = DbType.Int32;
                colvarVerificationMethodsKey.MaxLength = 0;
                colvarVerificationMethodsKey.AutoIncrement = false;
                colvarVerificationMethodsKey.IsNullable = false;
                colvarVerificationMethodsKey.IsPrimaryKey = false;
                colvarVerificationMethodsKey.IsForeignKey = false;
                colvarVerificationMethodsKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarVerificationMethodsKey);
                
                TableSchema.TableColumn colvarIsverified = new TableSchema.TableColumn(schema);
                colvarIsverified.ColumnName = "isverified";
                colvarIsverified.DataType = DbType.Boolean;
                colvarIsverified.MaxLength = 0;
                colvarIsverified.AutoIncrement = false;
                colvarIsverified.IsNullable = false;
                colvarIsverified.IsPrimaryKey = false;
                colvarIsverified.IsForeignKey = false;
                colvarIsverified.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsverified);
                
                TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
                colvarLastChanged.ColumnName = "last_changed";
                colvarLastChanged.DataType = DbType.DateTime;
                colvarLastChanged.MaxLength = 0;
                colvarLastChanged.AutoIncrement = false;
                colvarLastChanged.IsNullable = false;
                colvarLastChanged.IsPrimaryKey = false;
                colvarLastChanged.IsForeignKey = false;
                colvarLastChanged.IsReadOnly = false;
                
                schema.Columns.Add(colvarLastChanged);
                
                TableSchema.TableColumn colvarUniqueKey = new TableSchema.TableColumn(schema);
                colvarUniqueKey.ColumnName = "unique_key";
                colvarUniqueKey.DataType = DbType.String;
                colvarUniqueKey.MaxLength = 50;
                colvarUniqueKey.AutoIncrement = false;
                colvarUniqueKey.IsNullable = true;
                colvarUniqueKey.IsPrimaryKey = false;
                colvarUniqueKey.IsForeignKey = false;
                colvarUniqueKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarUniqueKey);
                
                TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
                colvarIpAddress.ColumnName = "ip_address";
                colvarIpAddress.DataType = DbType.String;
                colvarIpAddress.MaxLength = 16;
                colvarIpAddress.AutoIncrement = false;
                colvarIpAddress.IsNullable = false;
                colvarIpAddress.IsPrimaryKey = false;
                colvarIpAddress.IsForeignKey = false;
                colvarIpAddress.IsReadOnly = false;
                
                schema.Columns.Add(colvarIpAddress);
                
                TableSchema.TableColumn colvarVerificationMethodName = new TableSchema.TableColumn(schema);
                colvarVerificationMethodName.ColumnName = "verification_method_name";
                colvarVerificationMethodName.DataType = DbType.AnsiString;
                colvarVerificationMethodName.MaxLength = 50;
                colvarVerificationMethodName.AutoIncrement = false;
                colvarVerificationMethodName.IsNullable = false;
                colvarVerificationMethodName.IsPrimaryKey = false;
                colvarVerificationMethodName.IsForeignKey = false;
                colvarVerificationMethodName.IsReadOnly = false;
                
                schema.Columns.Add(colvarVerificationMethodName);
                
                TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
                colvarPoints.ColumnName = "points";
                colvarPoints.DataType = DbType.Int32;
                colvarPoints.MaxLength = 0;
                colvarPoints.AutoIncrement = false;
                colvarPoints.IsNullable = false;
                colvarPoints.IsPrimaryKey = false;
                colvarPoints.IsForeignKey = false;
                colvarPoints.IsReadOnly = false;
                
                schema.Columns.Add(colvarPoints);
                
                TableSchema.TableColumn colvarIsmandatory = new TableSchema.TableColumn(schema);
                colvarIsmandatory.ColumnName = "ismandatory";
                colvarIsmandatory.DataType = DbType.Boolean;
                colvarIsmandatory.MaxLength = 0;
                colvarIsmandatory.AutoIncrement = false;
                colvarIsmandatory.IsNullable = true;
                colvarIsmandatory.IsPrimaryKey = false;
                colvarIsmandatory.IsForeignKey = false;
                colvarIsmandatory.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsmandatory);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Peerfx"].AddSchema("vw_Verification",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwVerification()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwVerification(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwVerification(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwVerification(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("UsersVerifiedKey")]
        [Bindable(true)]
        public int UsersVerifiedKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("users_verified_key");
		    }
            set 
		    {
			    SetColumnValue("users_verified_key", value);
            }
        }
	      
        [XmlAttribute("UserKey")]
        [Bindable(true)]
        public int UserKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("user_key");
		    }
            set 
		    {
			    SetColumnValue("user_key", value);
            }
        }
	      
        [XmlAttribute("VerificationMethodsKey")]
        [Bindable(true)]
        public int VerificationMethodsKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("verification_methods_key");
		    }
            set 
		    {
			    SetColumnValue("verification_methods_key", value);
            }
        }
	      
        [XmlAttribute("Isverified")]
        [Bindable(true)]
        public bool Isverified 
	    {
		    get
		    {
			    return GetColumnValue<bool>("isverified");
		    }
            set 
		    {
			    SetColumnValue("isverified", value);
            }
        }
	      
        [XmlAttribute("LastChanged")]
        [Bindable(true)]
        public DateTime LastChanged 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("last_changed");
		    }
            set 
		    {
			    SetColumnValue("last_changed", value);
            }
        }
	      
        [XmlAttribute("UniqueKey")]
        [Bindable(true)]
        public string UniqueKey 
	    {
		    get
		    {
			    return GetColumnValue<string>("unique_key");
		    }
            set 
		    {
			    SetColumnValue("unique_key", value);
            }
        }
	      
        [XmlAttribute("IpAddress")]
        [Bindable(true)]
        public string IpAddress 
	    {
		    get
		    {
			    return GetColumnValue<string>("ip_address");
		    }
            set 
		    {
			    SetColumnValue("ip_address", value);
            }
        }
	      
        [XmlAttribute("VerificationMethodName")]
        [Bindable(true)]
        public string VerificationMethodName 
	    {
		    get
		    {
			    return GetColumnValue<string>("verification_method_name");
		    }
            set 
		    {
			    SetColumnValue("verification_method_name", value);
            }
        }
	      
        [XmlAttribute("Points")]
        [Bindable(true)]
        public int Points 
	    {
		    get
		    {
			    return GetColumnValue<int>("points");
		    }
            set 
		    {
			    SetColumnValue("points", value);
            }
        }
	      
        [XmlAttribute("Ismandatory")]
        [Bindable(true)]
        public bool? Ismandatory 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("ismandatory");
		    }
            set 
		    {
			    SetColumnValue("ismandatory", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string UsersVerifiedKey = @"users_verified_key";
            
            public static string UserKey = @"user_key";
            
            public static string VerificationMethodsKey = @"verification_methods_key";
            
            public static string Isverified = @"isverified";
            
            public static string LastChanged = @"last_changed";
            
            public static string UniqueKey = @"unique_key";
            
            public static string IpAddress = @"ip_address";
            
            public static string VerificationMethodName = @"verification_method_name";
            
            public static string Points = @"points";
            
            public static string Ismandatory = @"ismandatory";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
