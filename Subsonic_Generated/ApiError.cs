using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the ApiError class.
	/// </summary>
    [Serializable]
	public partial class ApiErrorCollection : ActiveList<ApiError, ApiErrorCollection>
	{	   
		public ApiErrorCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ApiErrorCollection</returns>
		public ApiErrorCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ApiError o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the API_Errors table.
	/// </summary>
	[Serializable]
	public partial class ApiError : ActiveRecord<ApiError>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ApiError()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ApiError(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ApiError(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ApiError(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("API_Errors", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarApiErrorsKey = new TableSchema.TableColumn(schema);
				colvarApiErrorsKey.ColumnName = "API_Errors_Key";
				colvarApiErrorsKey.DataType = DbType.Int64;
				colvarApiErrorsKey.MaxLength = 0;
				colvarApiErrorsKey.AutoIncrement = true;
				colvarApiErrorsKey.IsNullable = false;
				colvarApiErrorsKey.IsPrimaryKey = true;
				colvarApiErrorsKey.IsForeignKey = false;
				colvarApiErrorsKey.IsReadOnly = false;
				colvarApiErrorsKey.DefaultSetting = @"";
				colvarApiErrorsKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApiErrorsKey);
				
				TableSchema.TableColumn colvarApiType = new TableSchema.TableColumn(schema);
				colvarApiType.ColumnName = "api_type";
				colvarApiType.DataType = DbType.Int32;
				colvarApiType.MaxLength = 0;
				colvarApiType.AutoIncrement = false;
				colvarApiType.IsNullable = false;
				colvarApiType.IsPrimaryKey = false;
				colvarApiType.IsForeignKey = false;
				colvarApiType.IsReadOnly = false;
				colvarApiType.DefaultSetting = @"";
				colvarApiType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApiType);
				
				TableSchema.TableColumn colvarRequest = new TableSchema.TableColumn(schema);
				colvarRequest.ColumnName = "request";
				colvarRequest.DataType = DbType.AnsiString;
				colvarRequest.MaxLength = 2147483647;
				colvarRequest.AutoIncrement = false;
				colvarRequest.IsNullable = true;
				colvarRequest.IsPrimaryKey = false;
				colvarRequest.IsForeignKey = false;
				colvarRequest.IsReadOnly = false;
				colvarRequest.DefaultSetting = @"";
				colvarRequest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequest);
				
				TableSchema.TableColumn colvarResponse = new TableSchema.TableColumn(schema);
				colvarResponse.ColumnName = "response";
				colvarResponse.DataType = DbType.AnsiString;
				colvarResponse.MaxLength = 2147483647;
				colvarResponse.AutoIncrement = false;
				colvarResponse.IsNullable = true;
				colvarResponse.IsPrimaryKey = false;
				colvarResponse.IsForeignKey = false;
				colvarResponse.IsReadOnly = false;
				colvarResponse.DefaultSetting = @"";
				colvarResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponse);
				
				TableSchema.TableColumn colvarUrl = new TableSchema.TableColumn(schema);
				colvarUrl.ColumnName = "url";
				colvarUrl.DataType = DbType.AnsiString;
				colvarUrl.MaxLength = 2147483647;
				colvarUrl.AutoIncrement = false;
				colvarUrl.IsNullable = true;
				colvarUrl.IsPrimaryKey = false;
				colvarUrl.IsForeignKey = false;
				colvarUrl.IsReadOnly = false;
				colvarUrl.DefaultSetting = @"";
				colvarUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrl);
				
				TableSchema.TableColumn colvarDateoccured = new TableSchema.TableColumn(schema);
				colvarDateoccured.ColumnName = "dateoccured";
				colvarDateoccured.DataType = DbType.DateTime;
				colvarDateoccured.MaxLength = 0;
				colvarDateoccured.AutoIncrement = false;
				colvarDateoccured.IsNullable = true;
				colvarDateoccured.IsPrimaryKey = false;
				colvarDateoccured.IsForeignKey = false;
				colvarDateoccured.IsReadOnly = false;
				colvarDateoccured.DefaultSetting = @"";
				colvarDateoccured.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateoccured);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("API_Errors",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ApiErrorsKey")]
		[Bindable(true)]
		public long ApiErrorsKey 
		{
			get { return GetColumnValue<long>(Columns.ApiErrorsKey); }
			set { SetColumnValue(Columns.ApiErrorsKey, value); }
		}
		  
		[XmlAttribute("ApiType")]
		[Bindable(true)]
		public int ApiType 
		{
			get { return GetColumnValue<int>(Columns.ApiType); }
			set { SetColumnValue(Columns.ApiType, value); }
		}
		  
		[XmlAttribute("Request")]
		[Bindable(true)]
		public string Request 
		{
			get { return GetColumnValue<string>(Columns.Request); }
			set { SetColumnValue(Columns.Request, value); }
		}
		  
		[XmlAttribute("Response")]
		[Bindable(true)]
		public string Response 
		{
			get { return GetColumnValue<string>(Columns.Response); }
			set { SetColumnValue(Columns.Response, value); }
		}
		  
		[XmlAttribute("Url")]
		[Bindable(true)]
		public string Url 
		{
			get { return GetColumnValue<string>(Columns.Url); }
			set { SetColumnValue(Columns.Url, value); }
		}
		  
		[XmlAttribute("Dateoccured")]
		[Bindable(true)]
		public DateTime? Dateoccured 
		{
			get { return GetColumnValue<DateTime?>(Columns.Dateoccured); }
			set { SetColumnValue(Columns.Dateoccured, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varApiType,string varRequest,string varResponse,string varUrl,DateTime? varDateoccured)
		{
			ApiError item = new ApiError();
			
			item.ApiType = varApiType;
			
			item.Request = varRequest;
			
			item.Response = varResponse;
			
			item.Url = varUrl;
			
			item.Dateoccured = varDateoccured;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varApiErrorsKey,int varApiType,string varRequest,string varResponse,string varUrl,DateTime? varDateoccured)
		{
			ApiError item = new ApiError();
			
				item.ApiErrorsKey = varApiErrorsKey;
			
				item.ApiType = varApiType;
			
				item.Request = varRequest;
			
				item.Response = varResponse;
			
				item.Url = varUrl;
			
				item.Dateoccured = varDateoccured;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ApiErrorsKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ApiTypeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ResponseColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UrlColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DateoccuredColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ApiErrorsKey = @"API_Errors_Key";
			 public static string ApiType = @"api_type";
			 public static string Request = @"request";
			 public static string Response = @"response";
			 public static string Url = @"url";
			 public static string Dateoccured = @"dateoccured";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
