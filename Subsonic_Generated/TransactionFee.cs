using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the TransactionFee class.
	/// </summary>
    [Serializable]
	public partial class TransactionFeeCollection : ActiveList<TransactionFee, TransactionFeeCollection>
	{	   
		public TransactionFeeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransactionFeeCollection</returns>
		public TransactionFeeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TransactionFee o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Transaction_Fees table.
	/// </summary>
	[Serializable]
	public partial class TransactionFee : ActiveRecord<TransactionFee>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TransactionFee()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TransactionFee(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TransactionFee(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TransactionFee(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Transaction_Fees", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTxFeesKey = new TableSchema.TableColumn(schema);
				colvarTxFeesKey.ColumnName = "tx_fees_key";
				colvarTxFeesKey.DataType = DbType.Int32;
				colvarTxFeesKey.MaxLength = 0;
				colvarTxFeesKey.AutoIncrement = true;
				colvarTxFeesKey.IsNullable = false;
				colvarTxFeesKey.IsPrimaryKey = true;
				colvarTxFeesKey.IsForeignKey = false;
				colvarTxFeesKey.IsReadOnly = false;
				colvarTxFeesKey.DefaultSetting = @"";
				colvarTxFeesKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxFeesKey);
				
				TableSchema.TableColumn colvarTxType = new TableSchema.TableColumn(schema);
				colvarTxType.ColumnName = "tx_type";
				colvarTxType.DataType = DbType.Int32;
				colvarTxType.MaxLength = 0;
				colvarTxType.AutoIncrement = false;
				colvarTxType.IsNullable = false;
				colvarTxType.IsPrimaryKey = false;
				colvarTxType.IsForeignKey = false;
				colvarTxType.IsReadOnly = false;
				colvarTxType.DefaultSetting = @"";
				colvarTxType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxType);
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "tx_key";
				colvarTxKey.DataType = DbType.Int64;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = false;
				colvarTxKey.IsNullable = false;
				colvarTxKey.IsPrimaryKey = false;
				colvarTxKey.IsForeignKey = false;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				colvarTxKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
				colvarCurrency.ColumnName = "currency";
				colvarCurrency.DataType = DbType.Int32;
				colvarCurrency.MaxLength = 0;
				colvarCurrency.AutoIncrement = false;
				colvarCurrency.IsNullable = false;
				colvarCurrency.IsPrimaryKey = false;
				colvarCurrency.IsForeignKey = false;
				colvarCurrency.IsReadOnly = false;
				colvarCurrency.DefaultSetting = @"";
				colvarCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = false;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 100;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarFeeType = new TableSchema.TableColumn(schema);
				colvarFeeType.ColumnName = "fee_type";
				colvarFeeType.DataType = DbType.Int32;
				colvarFeeType.MaxLength = 0;
				colvarFeeType.AutoIncrement = false;
				colvarFeeType.IsNullable = true;
				colvarFeeType.IsPrimaryKey = false;
				colvarFeeType.IsForeignKey = false;
				colvarFeeType.IsReadOnly = false;
				colvarFeeType.DefaultSetting = @"";
				colvarFeeType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeType);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Transaction_Fees",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TxFeesKey")]
		[Bindable(true)]
		public int TxFeesKey 
		{
			get { return GetColumnValue<int>(Columns.TxFeesKey); }
			set { SetColumnValue(Columns.TxFeesKey, value); }
		}
		  
		[XmlAttribute("TxType")]
		[Bindable(true)]
		public int TxType 
		{
			get { return GetColumnValue<int>(Columns.TxType); }
			set { SetColumnValue(Columns.TxType, value); }
		}
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public long TxKey 
		{
			get { return GetColumnValue<long>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal Amount 
		{
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("Currency")]
		[Bindable(true)]
		public int Currency 
		{
			get { return GetColumnValue<int>(Columns.Currency); }
			set { SetColumnValue(Columns.Currency, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime DateCreated 
		{
			get { return GetColumnValue<DateTime>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("FeeType")]
		[Bindable(true)]
		public int? FeeType 
		{
			get { return GetColumnValue<int?>(Columns.FeeType); }
			set { SetColumnValue(Columns.FeeType, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varTxType,long varTxKey,decimal varAmount,int varCurrency,DateTime varDateCreated,string varDescription,int? varFeeType)
		{
			TransactionFee item = new TransactionFee();
			
			item.TxType = varTxType;
			
			item.TxKey = varTxKey;
			
			item.Amount = varAmount;
			
			item.Currency = varCurrency;
			
			item.DateCreated = varDateCreated;
			
			item.Description = varDescription;
			
			item.FeeType = varFeeType;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTxFeesKey,int varTxType,long varTxKey,decimal varAmount,int varCurrency,DateTime varDateCreated,string varDescription,int? varFeeType)
		{
			TransactionFee item = new TransactionFee();
			
				item.TxFeesKey = varTxFeesKey;
			
				item.TxType = varTxType;
			
				item.TxKey = varTxKey;
			
				item.Amount = varAmount;
			
				item.Currency = varCurrency;
			
				item.DateCreated = varDateCreated;
			
				item.Description = varDescription;
			
				item.FeeType = varFeeType;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TxFeesKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TxTypeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeTypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TxFeesKey = @"tx_fees_key";
			 public static string TxType = @"tx_type";
			 public static string TxKey = @"tx_key";
			 public static string Amount = @"amount";
			 public static string Currency = @"currency";
			 public static string DateCreated = @"date_created";
			 public static string Description = @"description";
			 public static string FeeType = @"fee_type";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
