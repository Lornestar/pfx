using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    public partial class SPs{
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_AnyDataInTables Procedure
        /// </summary>
        public static StoredProcedure AspnetAnyDataInTables(int? TablesToCheck)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_AnyDataInTables", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@TablesToCheck", TablesToCheck, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Applications_CreateApplication Procedure
        /// </summary>
        public static StoredProcedure AspnetApplicationsCreateApplication(string ApplicationName, Guid? ApplicationId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Applications_CreateApplication", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@ApplicationId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_CheckSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetCheckSchemaVersion(string Feature, string CompatibleSchemaVersion)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_CheckSchemaVersion", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_RegisterSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetRegisterSchemaVersion(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, bool? RemoveIncompatibleSchema)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_RegisterSchemaVersion", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsCurrentVersion", IsCurrentVersion, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@RemoveIncompatibleSchema", RemoveIncompatibleSchema, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Setup_RemoveAllRoleMembers Procedure
        /// </summary>
        public static StoredProcedure AspnetSetupRemoveAllRoleMembers(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Setup_RemoveAllRoleMembers", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Setup_RestorePermissions Procedure
        /// </summary>
        public static StoredProcedure AspnetSetupRestorePermissions(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Setup_RestorePermissions", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_UnRegisterSchemaVersion Procedure
        /// </summary>
        public static StoredProcedure AspnetUnRegisterSchemaVersion(string Feature, string CompatibleSchemaVersion)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_UnRegisterSchemaVersion", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Feature", Feature, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CompatibleSchemaVersion", CompatibleSchemaVersion, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Users_CreateUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersCreateUser(Guid? ApplicationId, string UserName, bool? IsUserAnonymous, DateTime? LastActivityDate, Guid? UserId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Users_CreateUser", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationId", ApplicationId, DbType.Guid, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsUserAnonymous", IsUserAnonymous, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@LastActivityDate", LastActivityDate, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@UserId", DbType.Guid, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_Users_DeleteUser Procedure
        /// </summary>
        public static StoredProcedure AspnetUsersDeleteUser(string ApplicationName, string UserName, int? TablesToDeleteFrom, int? NumTablesDeletedFrom)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_Users_DeleteUser", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@ApplicationName", ApplicationName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TablesToDeleteFrom", TablesToDeleteFrom, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@NumTablesDeletedFrom", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the aspnet_WebEvent_LogEvent Procedure
        /// </summary>
        public static StoredProcedure AspnetWebEventLogEvent(string EventId, DateTime? EventTimeUtc, DateTime? EventTime, string EventType, decimal? EventSequence, decimal? EventOccurrence, int? EventCode, int? EventDetailCode, string Message, string ApplicationPath, string ApplicationVirtualPath, string MachineName, string RequestUrl, string ExceptionType, string Details)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("aspnet_WebEvent_LogEvent", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@EventId", EventId, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@EventTimeUtc", EventTimeUtc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EventTime", EventTime, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@EventType", EventType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@EventSequence", EventSequence, DbType.Decimal, 0, 19);
        	
            sp.Command.AddParameter("@EventOccurrence", EventOccurrence, DbType.Decimal, 0, 19);
        	
            sp.Command.AddParameter("@EventCode", EventCode, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@EventDetailCode", EventDetailCode, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Message", Message, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ApplicationPath", ApplicationPath, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ApplicationVirtualPath", ApplicationVirtualPath, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MachineName", MachineName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RequestUrl", RequestUrl, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ExceptionType", ExceptionType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Details", Details, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_EmbeeCatalog Procedure
        /// </summary>
        public static StoredProcedure DeleteEmbeeCatalog()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_EmbeeCatalog", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Delete_Users_Security_Answers Procedure
        /// </summary>
        public static StoredProcedure DeleteUsersSecurityAnswers(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Delete_Users_Security_Answers", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_BancBox_Cipstatus Procedure
        /// </summary>
        public static StoredProcedure UpdateBancBoxCipstatus(int? clientid, string cipstatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_BancBox_Cipstatus", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@client_id", clientid, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@cipstatus", cipstatus, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_BancBox_Clientid Procedure
        /// </summary>
        public static StoredProcedure UpdateBancBoxClientid(int? userkey, int? clientid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_BancBox_Clientid", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@client_id", clientid, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_BancBox_Clientstatus Procedure
        /// </summary>
        public static StoredProcedure UpdateBancBoxClientstatus(int? clientid, string clientstatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_BancBox_Clientstatus", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@client_id", clientid, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@clientstatus", clientstatus, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Bank_Accounts Procedure
        /// </summary>
        public static StoredProcedure UpdateBankAccounts(int? bankaccountkey, int? userkey, int? currencykey, int? organizationkey, string bankaccountdescription, int? userkeyupdated, string ipaddress, string accountnumber, string IBAN, string BIC, string ABArouting, string firstname, string lastname, string businessname, int? bankaccountkeyreturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Bank_Accounts", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@bank_account_key", bankaccountkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency_key", currencykey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@organization_key", organizationkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@bank_account_description", bankaccountdescription, DbType.String, null, null);
        	
            sp.Command.AddParameter("@user_key_updated", userkeyupdated, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@account_number", accountnumber, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@IBAN", IBAN, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@BIC", BIC, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@ABArouting", ABArouting, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@first_name", firstname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@last_name", lastname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@business_name", businessname, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@bank_account_key_return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Convert_Currency Procedure
        /// </summary>
        public static StoredProcedure UpdateConvertCurrency(long? paymentobjectkey, int? quoteskey, string ipaddress, int? userkeyupdated, int? paymentkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Convert_Currency", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@paymentobjectkey", paymentobjectkey, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@quotes_key", quoteskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@user_key_updated", userkeyupdated, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@paymentkey", paymentkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Embee_Newtransid Procedure
        /// </summary>
        public static StoredProcedure UpdateEmbeeNewtransid(int? transid, int? embeeobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Embee_Newtransid", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@transid", transid, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@embee_object_key", embeeobjectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_EmbeeCatalog Procedure
        /// </summary>
        public static StoredProcedure UpdateEmbeeCatalog(int? country, string companyname, int? productid, string productname, decimal? priceindollars)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_EmbeeCatalog", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@country", country, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@company_name", companyname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@product_id", productid, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@product_name", productname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@price_in_dollars", priceindollars, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_EmbeeCatalog_recordpaymentobject Procedure
        /// </summary>
        public static StoredProcedure UpdateEmbeeCatalogRecordpaymentobject(int? productid, string phone, long? embeepaymentobjectreturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_EmbeeCatalog_recordpaymentobject", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@product_id", productid, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@phone", phone, DbType.AnsiString, null, null);
        	
            sp.Command.AddOutputParameter("@embee_payment_object_return", DbType.Int64, 0, 19);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_EmbeeObjects_IPN Procedure
        /// </summary>
        public static StoredProcedure UpdateEmbeeObjectsIpn(int? transid, string message, int? transstatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_EmbeeObjects_IPN", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@transid", transid, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@message", message, DbType.String, null, null);
        	
            sp.Command.AddParameter("@transstatus", transstatus, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Facebook_Access_Token Procedure
        /// </summary>
        public static StoredProcedure UpdateFacebookAccessToken(int? userkey, string accesstoken)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Facebook_Access_Token", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@userkey", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@accesstoken", accesstoken, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Facebook_User_Info Procedure
        /// </summary>
        public static StoredProcedure UpdateFacebookUserInfo(int? userkey, long? uid, string location, string email, int? friendscount, bool? ismale, string firstname, string lastname, bool? isverified)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Facebook_User_Info", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@userkey", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@uid", uid, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@location", location, DbType.String, null, null);
        	
            sp.Command.AddParameter("@email", email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@friendscount", friendscount, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ismale", ismale, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@firstname", firstname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@lastname", lastname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@isverified", isverified, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Info_CurrencyCloud_Tokens Procedure
        /// </summary>
        public static StoredProcedure UpdateInfoCurrencyCloudTokens(int? cctokenkey, string cctoken)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Info_CurrencyCloud_Tokens", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@cctokenkey", cctokenkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@cctoken", cctoken, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Payment_Objects Procedure
        /// </summary>
        public static StoredProcedure UpdatePaymentObjects(long? paymentobjectkey, int? paymentobjecttype, int? objectaccountkey, int? paymentobjectkeyreturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Payment_Objects", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payment_object_key", paymentobjectkey, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@payment_object_type", paymentobjecttype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@object_account_key", objectaccountkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@payment_object_key_return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Payment_Status Procedure
        /// </summary>
        public static StoredProcedure UpdatePaymentStatus(int? paymentskey, int? paymentstatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Payment_Status", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payments_key", paymentskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@payment_status", paymentstatus, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Payments Procedure
        /// </summary>
        public static StoredProcedure UpdatePayments(int? paymentskey, int? quotekey, int? paymentstatus, int? paymentskeyreturn, int? requestoruserkey, string paymentdescription, long? paymentobjectsender, long? paymentobjectreceiver)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Payments", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payments_key", paymentskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@quote_key", quotekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@payment_status", paymentstatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@payments_key_return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@requestor_user_key", requestoruserkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@payment_description", paymentdescription, DbType.String, null, null);
        	
            sp.Command.AddParameter("@payment_object_sender", paymentobjectsender, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@payment_object_receiver", paymentobjectreceiver, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Payments_Actual_Quote Procedure
        /// </summary>
        public static StoredProcedure UpdatePaymentsActualQuote(int? paymentskey, int? quotekey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Payments_Actual_Quote", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payments_key", paymentskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@quote_key", quotekey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Process_Deposit Procedure
        /// </summary>
        public static StoredProcedure UpdateProcessDeposit(int? txexternalkey, int? purposetype, int? objectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Process_Deposit", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_external_key", txexternalkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@purpose_type", purposetype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@object_key", objectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Process_Withdrawl_Payment Procedure
        /// </summary>
        public static StoredProcedure UpdateProcessWithdrawlPayment(decimal? amount, int? paymentskey, string ipaddress, int? userkeyupdated)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Process_Withdrawl_Payment", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@amount", amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@payments_key", paymentskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ipaddress", ipaddress, DbType.String, null, null);
        	
            sp.Command.AddParameter("@user_key_updated", userkeyupdated, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Quotes Procedure
        /// </summary>
        public static StoredProcedure UpdateQuotes(int? quoteskey, decimal? sellamount, int? sellcurrency, decimal? buyamount, int? buycurrency, decimal? rate, decimal? servicefee, DateTime? promiseddeliverydate, DateTime? actualdeliverydate, int? quoteskeyreturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Quotes", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@quotes_key", quoteskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sell_amount", sellamount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@sell_currency", sellcurrency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@buy_amount", buyamount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@buy_currency", buycurrency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@rate", rate, DbType.Decimal, 4, 10);
        	
            sp.Command.AddParameter("@service_fee", servicefee, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@promised_delivery_date", promiseddeliverydate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@actual_delivery_date", actualdeliverydate, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@quotes_key_return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Recipients Procedure
        /// </summary>
        public static StoredProcedure UpdateRecipients(int? recipientskey, int? userkey, long? paymentobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Recipients", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@recipients_key", recipientskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@payment_object_key", paymentobjectkey, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Scheduled_Task Procedure
        /// </summary>
        public static StoredProcedure UpdateScheduledTask(int? scheduledtasktype)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Scheduled_Task", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@scheduled_task_type", scheduledtasktype, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_External_Purpose Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionExternalPurpose(int? txexternalkey, int? purposetype, int? objectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_External_Purpose", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_external_key", txexternalkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@purpose_type", purposetype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@object_key", objectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_External_Status Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionExternalStatus(int? txexternalkey, int? txexternalstatus, string ipaddress, int? userkeyupdated)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_External_Status", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_external_key", txexternalkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_external_status", txexternalstatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@user_key_updated", userkeyupdated, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transaction_Fees Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionFees(int? txfeeskey, int? txtype, int? txkey, decimal? amount, int? currency, string description, int? feetype, int? txfeeskeyreturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transaction_Fees", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_fees_key", txfeeskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_type", txtype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_key", txkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@amount", amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@description", description, DbType.String, null, null);
        	
            sp.Command.AddParameter("@fee_type", feetype, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@tx_fees_key_return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transactions_External Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionsExternal(int? txexternalkey, int? txexternalstatus, int? currency, decimal? amount, long? paymentobjectsender, long? paymentobjectreceiver, string ipaddress, int? userkeyupdated, string txexternaldescription, string bankreference, int? txexternalkeyreturn, int? purposetype, int? purposeobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transactions_External", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_external_key", txexternalkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_external_status", txexternalstatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@amount", amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@payment_object_sender", paymentobjectsender, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@payment_object_receiver", paymentobjectreceiver, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@user_key_updated", userkeyupdated, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_external_description", txexternaldescription, DbType.String, null, null);
        	
            sp.Command.AddParameter("@bank_reference", bankreference, DbType.AnsiString, null, null);
        	
            sp.Command.AddOutputParameter("@tx_external_key_return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@purpose_type", purposetype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@purpose_object_key", purposeobjectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Transactions_Internal Procedure
        /// </summary>
        public static StoredProcedure UpdateTransactionsInternal(int? txinternalkey, int? txinternalstatus, int? currency, decimal? amount, long? paymentobjectsender, long? paymentobjectreceiver, string ipaddress, int? userkeyupdated, string txinternaldescription, int? txinternalkeyreturn, int? purposetype, int? purposeobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Transactions_Internal", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_internal_key", txinternalkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_internal_status", txinternalstatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@amount", amount, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@payment_object_sender", paymentobjectsender, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@payment_object_receiver", paymentobjectreceiver, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@user_key_updated", userkeyupdated, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_internal_description", txinternaldescription, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@tx_internal_key_return", DbType.Int32, 0, 10);
            
            sp.Command.AddParameter("@purpose_type", purposetype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@purpose_object_key", purposeobjectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users Procedure
        /// </summary>
        public static StoredProcedure UpdateUsers(int? userkey, string title, string firstname, string middlename, string lastname, DateTime? dob, int? countryresidence, string email, string ipaddress, int? userkeyreturn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@title", title, DbType.String, null, null);
        	
            sp.Command.AddParameter("@first_name", firstname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@middle_name", middlename, DbType.String, null, null);
        	
            sp.Command.AddParameter("@last_name", lastname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@dob", dob, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@country_residence", countryresidence, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@email", email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@user_key_return", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_Address Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersAddress(int? userkey, string address1, string address2, string city, string state, int? country, string postalcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_Address", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@address1", address1, DbType.String, null, null);
        	
            sp.Command.AddParameter("@address2", address2, DbType.String, null, null);
        	
            sp.Command.AddParameter("@city", city, DbType.String, null, null);
        	
            sp.Command.AddParameter("@state", state, DbType.String, null, null);
        	
            sp.Command.AddParameter("@country", country, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@postalcode", postalcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_Info Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersInfo(int? userkey, string address1, string address2, string city, string state, int? country, string postalcode, int? phonecountrycode1, int? phonetype1, string phonenumber1, int? phonecountrycode2, int? phonetype2, string phonenumber2, int? identitynationality, string occupation, string passportnumber, string ssn)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_Info", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@address1", address1, DbType.String, null, null);
        	
            sp.Command.AddParameter("@address2", address2, DbType.String, null, null);
        	
            sp.Command.AddParameter("@city", city, DbType.String, null, null);
        	
            sp.Command.AddParameter("@state", state, DbType.String, null, null);
        	
            sp.Command.AddParameter("@country", country, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@postalcode", postalcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@phonecountrycode1", phonecountrycode1, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@phonetype1", phonetype1, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@phonenumber1", phonenumber1, DbType.String, null, null);
        	
            sp.Command.AddParameter("@phonecountrycode2", phonecountrycode2, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@phonetype2", phonetype2, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@phonenumber2", phonenumber2, DbType.String, null, null);
        	
            sp.Command.AddParameter("@identitynationality", identitynationality, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@occupation", occupation, DbType.String, null, null);
        	
            sp.Command.AddParameter("@passportnumber", passportnumber, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ssn", ssn, DbType.AnsiStringFixedLength, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_Info_Signup_Tab3 Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersInfoSignupTab3(int? userkey, string username, string password)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_Info_Signup_Tab3", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@username", username, DbType.String, null, null);
        	
            sp.Command.AddParameter("@password", password, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_LastOnline Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersLastOnline(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_LastOnline", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_Passport Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersPassport(int? userkey, string passportnumber)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_Passport", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@passportnumber", passportnumber, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_PhoneNumber Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersPhoneNumber(int? userkey, string phonenumber)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_PhoneNumber", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@phonenumber", phonenumber, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_Security_Answers Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersSecurityAnswers(int? userkey, int? question, string answer)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_Security_Answers", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@question", question, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@answer", answer, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Users_Status Procedure
        /// </summary>
        public static StoredProcedure UpdateUsersStatus(int? userkey, int? status)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Users_Status", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@status", status, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Verification Procedure
        /// </summary>
        public static StoredProcedure UpdateVerification(int? userkey, int? verificationmethod, bool? isverified, string ipaddress, string uniquekey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Verification", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@verification_method", verificationmethod, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@isverified", isverified, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.String, null, null);
        	
            sp.Command.AddParameter("@unique_key", uniquekey, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Verification_Email Procedure
        /// </summary>
        public static StoredProcedure UpdateVerificationEmail(int? userkey, bool? isverified, string ipaddress, string uniquekey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Verification_Email", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@isverified", isverified, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ip_address", ipaddress, DbType.String, null, null);
        	
            sp.Command.AddParameter("@unique_key", uniquekey, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Bank_Account_CurrencyExchange Procedure
        /// </summary>
        public static StoredProcedure ViewAdminBankAccountCurrencyExchange(int? currency, int? country)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Bank_Account_CurrencyExchange", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@country", country, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Admin_Deposits Procedure
        /// </summary>
        public static StoredProcedure ViewAdminDeposits(bool? isprocessed)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Admin_Deposits", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@isprocessed", isprocessed, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_BancBox_Accounts Procedure
        /// </summary>
        public static StoredProcedure ViewBancBoxAccounts()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_BancBox_Accounts", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Bank_Accounts_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewBankAccountsSpecific(int? bankaccountkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Bank_Accounts_Specific", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@bankaccountkey", bankaccountkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Bank_Accounts_Specific_paymentkey Procedure
        /// </summary>
        public static StoredProcedure ViewBankAccountsSpecificPaymentkey(long? paymentkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Bank_Accounts_Specific_paymentkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@paymentkey", paymentkey, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Bank_Accounts_Users Procedure
        /// </summary>
        public static StoredProcedure ViewBankAccountsUsers()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Bank_Accounts_Users", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Embee_Catalog_bycountry Procedure
        /// </summary>
        public static StoredProcedure ViewEmbeeCatalogBycountry(int? country)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Embee_Catalog_bycountry", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@country", country, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Embee_Catalog_byproductid Procedure
        /// </summary>
        public static StoredProcedure ViewEmbeeCatalogByproductid(int? productid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Embee_Catalog_byproductid", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@productid", productid, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Embee_Countries Procedure
        /// </summary>
        public static StoredProcedure ViewEmbeeCountries()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Embee_Countries", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Embee_Objects_bypaymentkey Procedure
        /// </summary>
        public static StoredProcedure ViewEmbeeObjectsBypaymentkey(int? paymentkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Embee_Objects_bypaymentkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@paymentkey", paymentkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Embee_Objects_Currently_Processing Procedure
        /// </summary>
        public static StoredProcedure ViewEmbeeObjectsCurrentlyProcessing()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Embee_Objects_Currently_Processing", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Errors_Lastone Procedure
        /// </summary>
        public static StoredProcedure ViewErrorsLastone()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Errors_Lastone", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Banks Procedure
        /// </summary>
        public static StoredProcedure ViewInfoBanks()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Banks", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Countries Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCountries()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Countries", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Country_Code_List Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCountryCodeList()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Country_Code_List", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Country_List Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCountryList()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Country_List", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Country_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCountrySpecific(int? countrykey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Country_Specific", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@country_key", countrykey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Currencies Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCurrencies()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Currencies", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Currencies_CanBuy Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCurrenciesCanBuy()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Currencies_CanBuy", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Currencies_CanSell Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCurrenciesCanSell()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Currencies_CanSell", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Currencies_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCurrenciesSpecific(int? CurrencyKey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Currencies_Specific", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Currency_Key", CurrencyKey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Currency_Symbol Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCurrencySymbol(string currencycode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Currency_Symbol", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@currencycode", currencycode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_CurrencyCloud_Tokens Procedure
        /// </summary>
        public static StoredProcedure ViewInfoCurrencyCloudTokens()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_CurrencyCloud_Tokens", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Fee_Types Procedure
        /// </summary>
        public static StoredProcedure ViewInfoFeeTypes(int? currency1, int? currency2)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Fee_Types", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@currency1", currency1, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency2", currency2, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Organizations Procedure
        /// </summary>
        public static StoredProcedure ViewInfoOrganizations()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Organizations", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Organizations_byname Procedure
        /// </summary>
        public static StoredProcedure ViewInfoOrganizationsByname(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Organizations_byname", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@name", name, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Phone_Type Procedure
        /// </summary>
        public static StoredProcedure ViewInfoPhoneType()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Phone_Type", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Info_Security_Questions Procedure
        /// </summary>
        public static StoredProcedure ViewInfoSecurityQuestions()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Info_Security_Questions", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Object_Bank_Account Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentObjectBankAccount(int? BankAccountkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Object_Bank_Account", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Bank_Account_key", BankAccountkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Object_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentObjectSpecific(long? paymentobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Object_Specific", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payment_object_key", paymentobjectkey, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Object_type_objectkey Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentObjectTypeObjectkey(int? typekey, int? objectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Object_type_objectkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@type_key", typekey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@object_key", objectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Schedule Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentSchedule()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Schedule", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Specific Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentSpecific(int? paymentkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Specific", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@paymentkey", paymentkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Specific_byembeeobjectkey Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentSpecificByembeeobjectkey(int? embeeobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Specific_byembeeobjectkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@embee_object_key", embeeobjectkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Specific_byembeetransid Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentSpecificByembeetransid(int? transid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Specific_byembeetransid", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@transid", transid, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payment_Status Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentStatus()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payment_Status", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments Procedure
        /// </summary>
        public static StoredProcedure ViewPayments()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_byStatus Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsByStatus(int? statuskey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_byStatus", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@status_key", statuskey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_byStatus_Externalobjects Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsByStatusExternalobjects(int? statuskey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_byStatus_Externalobjects", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@status_key", statuskey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_byStatus_requiresmanualexport Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsByStatusRequiresmanualexport(int? statuskey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_byStatus_requiresmanualexport", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@status_key", statuskey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_Confirmed Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsConfirmed()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_Confirmed", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_DoNot_requiremanualexport Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsDoNotRequiremanualexport()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_DoNot_requiremanualexport", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_InternalOnly Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsInternalOnly()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_InternalOnly", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Payments_Requestedbyuser Procedure
        /// </summary>
        public static StoredProcedure ViewPaymentsRequestedbyuser(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Payments_Requestedbyuser", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Possible_Funding_Sources Procedure
        /// </summary>
        public static StoredProcedure ViewPossibleFundingSources(int? userkey, int? currency, decimal? amount)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Possible_Funding_Sources", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@amount", amount, DbType.Currency, 4, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Recipients_byuser Procedure
        /// </summary>
        public static StoredProcedure ViewRecipientsByuser(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Recipients_byuser", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Recipients_byuser_andcurrency Procedure
        /// </summary>
        public static StoredProcedure ViewRecipientsByuserAndcurrency(int? userkey, int? currency)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Recipients_byuser_andcurrency", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Scheduled_Task Procedure
        /// </summary>
        public static StoredProcedure ViewScheduledTask(int? scheduledtasktype)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Scheduled_Task", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@scheduled_task_type", scheduledtasktype, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_System_Bank_Accounts Procedure
        /// </summary>
        public static StoredProcedure ViewSystemBankAccounts()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_System_Bank_Accounts", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_All Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionAll()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_All", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_All_SpecificPayment Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionAllSpecificPayment(int? paymentkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_All_SpecificPayment", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payment_key", paymentkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the view_Transaction_External Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionExternal()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("view_Transaction_External", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Fees Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionFees(int? txtype)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Fees", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_type", txtype, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Transaction_Fees_txkey Procedure
        /// </summary>
        public static StoredProcedure ViewTransactionFeesTxkey(int? txtype, int? txkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Transaction_Fees_txkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@tx_type", txtype, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@tx_key", txkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Treasury_Account Procedure
        /// </summary>
        public static StoredProcedure ViewTreasuryAccount()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Treasury_Account", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_User_Balance_Specific_Currency Procedure
        /// </summary>
        public static StoredProcedure ViewUserBalanceSpecificCurrency(int? userkey, int? currency)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_User_Balance_Specific_Currency", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@currency", currency, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_User_Currency_List Procedure
        /// </summary>
        public static StoredProcedure ViewUserCurrencyList(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_User_Currency_List", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_User_Currency_List_Treasury Procedure
        /// </summary>
        public static StoredProcedure ViewUserCurrencyListTreasury()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_User_Currency_List_Treasury", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_User_Facebook Procedure
        /// </summary>
        public static StoredProcedure ViewUserFacebook(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_User_Facebook", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@userkey", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Admin Procedure
        /// </summary>
        public static StoredProcedure ViewUsersAdmin()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Admin", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_All Procedure
        /// </summary>
        public static StoredProcedure ViewUsersAll()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_All", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_DropDown Procedure
        /// </summary>
        public static StoredProcedure ViewUsersDropDown(string textX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_DropDown", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@text", textX, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Email Procedure
        /// </summary>
        public static StoredProcedure ViewUsersEmail(string Email)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Email", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Info Procedure
        /// </summary>
        public static StoredProcedure ViewUsersInfo(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Info", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Info_UserBalance_Paymentobjectkey Procedure
        /// </summary>
        public static StoredProcedure ViewUsersInfoUserBalancePaymentobjectkey(long? paymentobjectkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Info_UserBalance_Paymentobjectkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@payment_object_key", paymentobjectkey, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Login Procedure
        /// </summary>
        public static StoredProcedure ViewUsersLogin(string Email, string password)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Login", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@Email", Email, DbType.String, null, null);
        	
            sp.Command.AddParameter("@password", password, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Security_Answers Procedure
        /// </summary>
        public static StoredProcedure ViewUsersSecurityAnswers(int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Security_Answers", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Verified Procedure
        /// </summary>
        public static StoredProcedure ViewUsersVerified(int? userkey, int? verificationmethodskey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Verified", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@verification_methods_key", verificationmethodskey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Verified_byCode Procedure
        /// </summary>
        public static StoredProcedure ViewUsersVerifiedByCode(string uniquekey, int? verificationmethodskey, int? userkey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Verified_byCode", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@unique_key", uniquekey, DbType.String, null, null);
        	
            sp.Command.AddParameter("@verification_methods_key", verificationmethodskey, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@user_key", userkey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Users_Verified_byCode_nouserkey Procedure
        /// </summary>
        public static StoredProcedure ViewUsersVerifiedByCodeNouserkey(string uniquekey, int? verificationmethodskey)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Users_Verified_byCode_nouserkey", DataService.GetInstance("Peerfx"), "dbo");
        	
            sp.Command.AddParameter("@unique_key", uniquekey, DbType.String, null, null);
        	
            sp.Command.AddParameter("@verification_methods_key", verificationmethodskey, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the View_Verification_Methods Procedure
        /// </summary>
        public static StoredProcedure ViewVerificationMethods()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("View_Verification_Methods", DataService.GetInstance("Peerfx"), "");
        	
            return sp;
        }
        
    }
    
}
