using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the UsersInfo class.
	/// </summary>
    [Serializable]
	public partial class UsersInfoCollection : ActiveList<UsersInfo, UsersInfoCollection>
	{	   
		public UsersInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UsersInfoCollection</returns>
		public UsersInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UsersInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Users_Info table.
	/// </summary>
	[Serializable]
	public partial class UsersInfo : ActiveRecord<UsersInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UsersInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UsersInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UsersInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UsersInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Users_Info", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = false;
				colvarUserKey.IsNullable = false;
				colvarUserKey.IsPrimaryKey = true;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarAddress1 = new TableSchema.TableColumn(schema);
				colvarAddress1.ColumnName = "address1";
				colvarAddress1.DataType = DbType.String;
				colvarAddress1.MaxLength = 100;
				colvarAddress1.AutoIncrement = false;
				colvarAddress1.IsNullable = true;
				colvarAddress1.IsPrimaryKey = false;
				colvarAddress1.IsForeignKey = false;
				colvarAddress1.IsReadOnly = false;
				colvarAddress1.DefaultSetting = @"";
				colvarAddress1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress1);
				
				TableSchema.TableColumn colvarAddress2 = new TableSchema.TableColumn(schema);
				colvarAddress2.ColumnName = "address2";
				colvarAddress2.DataType = DbType.String;
				colvarAddress2.MaxLength = 100;
				colvarAddress2.AutoIncrement = false;
				colvarAddress2.IsNullable = true;
				colvarAddress2.IsPrimaryKey = false;
				colvarAddress2.IsForeignKey = false;
				colvarAddress2.IsReadOnly = false;
				colvarAddress2.DefaultSetting = @"";
				colvarAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress2);
				
				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "city";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 100;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);
				
				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "state";
				colvarState.DataType = DbType.String;
				colvarState.MaxLength = 100;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);
				
				TableSchema.TableColumn colvarCountry = new TableSchema.TableColumn(schema);
				colvarCountry.ColumnName = "country";
				colvarCountry.DataType = DbType.Int32;
				colvarCountry.MaxLength = 0;
				colvarCountry.AutoIncrement = false;
				colvarCountry.IsNullable = true;
				colvarCountry.IsPrimaryKey = false;
				colvarCountry.IsForeignKey = false;
				colvarCountry.IsReadOnly = false;
				colvarCountry.DefaultSetting = @"";
				colvarCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountry);
				
				TableSchema.TableColumn colvarPostalcode = new TableSchema.TableColumn(schema);
				colvarPostalcode.ColumnName = "postalcode";
				colvarPostalcode.DataType = DbType.String;
				colvarPostalcode.MaxLength = 20;
				colvarPostalcode.AutoIncrement = false;
				colvarPostalcode.IsNullable = true;
				colvarPostalcode.IsPrimaryKey = false;
				colvarPostalcode.IsForeignKey = false;
				colvarPostalcode.IsReadOnly = false;
				colvarPostalcode.DefaultSetting = @"";
				colvarPostalcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalcode);
				
				TableSchema.TableColumn colvarPhonecountrycode1 = new TableSchema.TableColumn(schema);
				colvarPhonecountrycode1.ColumnName = "phonecountrycode1";
				colvarPhonecountrycode1.DataType = DbType.Int32;
				colvarPhonecountrycode1.MaxLength = 0;
				colvarPhonecountrycode1.AutoIncrement = false;
				colvarPhonecountrycode1.IsNullable = true;
				colvarPhonecountrycode1.IsPrimaryKey = false;
				colvarPhonecountrycode1.IsForeignKey = false;
				colvarPhonecountrycode1.IsReadOnly = false;
				colvarPhonecountrycode1.DefaultSetting = @"";
				colvarPhonecountrycode1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonecountrycode1);
				
				TableSchema.TableColumn colvarPhonetype1 = new TableSchema.TableColumn(schema);
				colvarPhonetype1.ColumnName = "phonetype1";
				colvarPhonetype1.DataType = DbType.Int32;
				colvarPhonetype1.MaxLength = 0;
				colvarPhonetype1.AutoIncrement = false;
				colvarPhonetype1.IsNullable = true;
				colvarPhonetype1.IsPrimaryKey = false;
				colvarPhonetype1.IsForeignKey = false;
				colvarPhonetype1.IsReadOnly = false;
				colvarPhonetype1.DefaultSetting = @"";
				colvarPhonetype1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonetype1);
				
				TableSchema.TableColumn colvarPhonenumber1 = new TableSchema.TableColumn(schema);
				colvarPhonenumber1.ColumnName = "phonenumber1";
				colvarPhonenumber1.DataType = DbType.String;
				colvarPhonenumber1.MaxLength = 20;
				colvarPhonenumber1.AutoIncrement = false;
				colvarPhonenumber1.IsNullable = true;
				colvarPhonenumber1.IsPrimaryKey = false;
				colvarPhonenumber1.IsForeignKey = false;
				colvarPhonenumber1.IsReadOnly = false;
				colvarPhonenumber1.DefaultSetting = @"";
				colvarPhonenumber1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonenumber1);
				
				TableSchema.TableColumn colvarPhonecountrycode2 = new TableSchema.TableColumn(schema);
				colvarPhonecountrycode2.ColumnName = "phonecountrycode2";
				colvarPhonecountrycode2.DataType = DbType.Int32;
				colvarPhonecountrycode2.MaxLength = 0;
				colvarPhonecountrycode2.AutoIncrement = false;
				colvarPhonecountrycode2.IsNullable = true;
				colvarPhonecountrycode2.IsPrimaryKey = false;
				colvarPhonecountrycode2.IsForeignKey = false;
				colvarPhonecountrycode2.IsReadOnly = false;
				colvarPhonecountrycode2.DefaultSetting = @"";
				colvarPhonecountrycode2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonecountrycode2);
				
				TableSchema.TableColumn colvarPhonetype2 = new TableSchema.TableColumn(schema);
				colvarPhonetype2.ColumnName = "phonetype2";
				colvarPhonetype2.DataType = DbType.Int32;
				colvarPhonetype2.MaxLength = 0;
				colvarPhonetype2.AutoIncrement = false;
				colvarPhonetype2.IsNullable = true;
				colvarPhonetype2.IsPrimaryKey = false;
				colvarPhonetype2.IsForeignKey = false;
				colvarPhonetype2.IsReadOnly = false;
				colvarPhonetype2.DefaultSetting = @"";
				colvarPhonetype2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonetype2);
				
				TableSchema.TableColumn colvarPhonenumber2 = new TableSchema.TableColumn(schema);
				colvarPhonenumber2.ColumnName = "phonenumber2";
				colvarPhonenumber2.DataType = DbType.String;
				colvarPhonenumber2.MaxLength = 20;
				colvarPhonenumber2.AutoIncrement = false;
				colvarPhonenumber2.IsNullable = true;
				colvarPhonenumber2.IsPrimaryKey = false;
				colvarPhonenumber2.IsForeignKey = false;
				colvarPhonenumber2.IsReadOnly = false;
				colvarPhonenumber2.DefaultSetting = @"";
				colvarPhonenumber2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonenumber2);
				
				TableSchema.TableColumn colvarIdentitynationality = new TableSchema.TableColumn(schema);
				colvarIdentitynationality.ColumnName = "identitynationality";
				colvarIdentitynationality.DataType = DbType.Int32;
				colvarIdentitynationality.MaxLength = 0;
				colvarIdentitynationality.AutoIncrement = false;
				colvarIdentitynationality.IsNullable = true;
				colvarIdentitynationality.IsPrimaryKey = false;
				colvarIdentitynationality.IsForeignKey = false;
				colvarIdentitynationality.IsReadOnly = false;
				colvarIdentitynationality.DefaultSetting = @"";
				colvarIdentitynationality.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdentitynationality);
				
				TableSchema.TableColumn colvarOccupation = new TableSchema.TableColumn(schema);
				colvarOccupation.ColumnName = "occupation";
				colvarOccupation.DataType = DbType.String;
				colvarOccupation.MaxLength = 50;
				colvarOccupation.AutoIncrement = false;
				colvarOccupation.IsNullable = true;
				colvarOccupation.IsPrimaryKey = false;
				colvarOccupation.IsForeignKey = false;
				colvarOccupation.IsReadOnly = false;
				colvarOccupation.DefaultSetting = @"";
				colvarOccupation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupation);
				
				TableSchema.TableColumn colvarPassportnumber = new TableSchema.TableColumn(schema);
				colvarPassportnumber.ColumnName = "passportnumber";
				colvarPassportnumber.DataType = DbType.String;
				colvarPassportnumber.MaxLength = 44;
				colvarPassportnumber.AutoIncrement = false;
				colvarPassportnumber.IsNullable = true;
				colvarPassportnumber.IsPrimaryKey = false;
				colvarPassportnumber.IsForeignKey = false;
				colvarPassportnumber.IsReadOnly = false;
				colvarPassportnumber.DefaultSetting = @"";
				colvarPassportnumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassportnumber);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = true;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);
				
				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);
				
				TableSchema.TableColumn colvarSsn = new TableSchema.TableColumn(schema);
				colvarSsn.ColumnName = "ssn";
				colvarSsn.DataType = DbType.AnsiStringFixedLength;
				colvarSsn.MaxLength = 9;
				colvarSsn.AutoIncrement = false;
				colvarSsn.IsNullable = true;
				colvarSsn.IsPrimaryKey = false;
				colvarSsn.IsForeignKey = false;
				colvarSsn.IsReadOnly = false;
				colvarSsn.DefaultSetting = @"";
				colvarSsn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSsn);
				
				TableSchema.TableColumn colvarImageUrl = new TableSchema.TableColumn(schema);
				colvarImageUrl.ColumnName = "Image_URL";
				colvarImageUrl.DataType = DbType.String;
				colvarImageUrl.MaxLength = 200;
				colvarImageUrl.AutoIncrement = false;
				colvarImageUrl.IsNullable = true;
				colvarImageUrl.IsPrimaryKey = false;
				colvarImageUrl.IsForeignKey = false;
				colvarImageUrl.IsReadOnly = false;
				colvarImageUrl.DefaultSetting = @"";
				colvarImageUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageUrl);
				
				TableSchema.TableColumn colvarDefaultCurrency = new TableSchema.TableColumn(schema);
				colvarDefaultCurrency.ColumnName = "default_currency";
				colvarDefaultCurrency.DataType = DbType.Int32;
				colvarDefaultCurrency.MaxLength = 0;
				colvarDefaultCurrency.AutoIncrement = false;
				colvarDefaultCurrency.IsNullable = true;
				colvarDefaultCurrency.IsPrimaryKey = false;
				colvarDefaultCurrency.IsForeignKey = false;
				colvarDefaultCurrency.IsReadOnly = false;
				colvarDefaultCurrency.DefaultSetting = @"";
				colvarDefaultCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultCurrency);
				
				TableSchema.TableColumn colvarTimezone = new TableSchema.TableColumn(schema);
				colvarTimezone.ColumnName = "timezone";
				colvarTimezone.DataType = DbType.Int32;
				colvarTimezone.MaxLength = 0;
				colvarTimezone.AutoIncrement = false;
				colvarTimezone.IsNullable = true;
				colvarTimezone.IsPrimaryKey = false;
				colvarTimezone.IsForeignKey = false;
				colvarTimezone.IsReadOnly = false;
				colvarTimezone.DefaultSetting = @"";
				colvarTimezone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimezone);
				
				TableSchema.TableColumn colvarReferral = new TableSchema.TableColumn(schema);
				colvarReferral.ColumnName = "referral";
				colvarReferral.DataType = DbType.AnsiString;
				colvarReferral.MaxLength = 2147483647;
				colvarReferral.AutoIncrement = false;
				colvarReferral.IsNullable = true;
				colvarReferral.IsPrimaryKey = false;
				colvarReferral.IsForeignKey = false;
				colvarReferral.IsReadOnly = false;
				colvarReferral.DefaultSetting = @"";
				colvarReferral.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReferral);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Users_Info",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int UserKey 
		{
			get { return GetColumnValue<int>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("Address1")]
		[Bindable(true)]
		public string Address1 
		{
			get { return GetColumnValue<string>(Columns.Address1); }
			set { SetColumnValue(Columns.Address1, value); }
		}
		  
		[XmlAttribute("Address2")]
		[Bindable(true)]
		public string Address2 
		{
			get { return GetColumnValue<string>(Columns.Address2); }
			set { SetColumnValue(Columns.Address2, value); }
		}
		  
		[XmlAttribute("City")]
		[Bindable(true)]
		public string City 
		{
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		  
		[XmlAttribute("State")]
		[Bindable(true)]
		public string State 
		{
			get { return GetColumnValue<string>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}
		  
		[XmlAttribute("Country")]
		[Bindable(true)]
		public int? Country 
		{
			get { return GetColumnValue<int?>(Columns.Country); }
			set { SetColumnValue(Columns.Country, value); }
		}
		  
		[XmlAttribute("Postalcode")]
		[Bindable(true)]
		public string Postalcode 
		{
			get { return GetColumnValue<string>(Columns.Postalcode); }
			set { SetColumnValue(Columns.Postalcode, value); }
		}
		  
		[XmlAttribute("Phonecountrycode1")]
		[Bindable(true)]
		public int? Phonecountrycode1 
		{
			get { return GetColumnValue<int?>(Columns.Phonecountrycode1); }
			set { SetColumnValue(Columns.Phonecountrycode1, value); }
		}
		  
		[XmlAttribute("Phonetype1")]
		[Bindable(true)]
		public int? Phonetype1 
		{
			get { return GetColumnValue<int?>(Columns.Phonetype1); }
			set { SetColumnValue(Columns.Phonetype1, value); }
		}
		  
		[XmlAttribute("Phonenumber1")]
		[Bindable(true)]
		public string Phonenumber1 
		{
			get { return GetColumnValue<string>(Columns.Phonenumber1); }
			set { SetColumnValue(Columns.Phonenumber1, value); }
		}
		  
		[XmlAttribute("Phonecountrycode2")]
		[Bindable(true)]
		public int? Phonecountrycode2 
		{
			get { return GetColumnValue<int?>(Columns.Phonecountrycode2); }
			set { SetColumnValue(Columns.Phonecountrycode2, value); }
		}
		  
		[XmlAttribute("Phonetype2")]
		[Bindable(true)]
		public int? Phonetype2 
		{
			get { return GetColumnValue<int?>(Columns.Phonetype2); }
			set { SetColumnValue(Columns.Phonetype2, value); }
		}
		  
		[XmlAttribute("Phonenumber2")]
		[Bindable(true)]
		public string Phonenumber2 
		{
			get { return GetColumnValue<string>(Columns.Phonenumber2); }
			set { SetColumnValue(Columns.Phonenumber2, value); }
		}
		  
		[XmlAttribute("Identitynationality")]
		[Bindable(true)]
		public int? Identitynationality 
		{
			get { return GetColumnValue<int?>(Columns.Identitynationality); }
			set { SetColumnValue(Columns.Identitynationality, value); }
		}
		  
		[XmlAttribute("Occupation")]
		[Bindable(true)]
		public string Occupation 
		{
			get { return GetColumnValue<string>(Columns.Occupation); }
			set { SetColumnValue(Columns.Occupation, value); }
		}
		  
		[XmlAttribute("Passportnumber")]
		[Bindable(true)]
		public string Passportnumber 
		{
			get { return GetColumnValue<string>(Columns.Passportnumber); }
			set { SetColumnValue(Columns.Passportnumber, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime? LastChanged 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("Username")]
		[Bindable(true)]
		public string Username 
		{
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		  
		[XmlAttribute("Password")]
		[Bindable(true)]
		public string Password 
		{
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		  
		[XmlAttribute("Ssn")]
		[Bindable(true)]
		public string Ssn 
		{
			get { return GetColumnValue<string>(Columns.Ssn); }
			set { SetColumnValue(Columns.Ssn, value); }
		}
		  
		[XmlAttribute("ImageUrl")]
		[Bindable(true)]
		public string ImageUrl 
		{
			get { return GetColumnValue<string>(Columns.ImageUrl); }
			set { SetColumnValue(Columns.ImageUrl, value); }
		}
		  
		[XmlAttribute("DefaultCurrency")]
		[Bindable(true)]
		public int? DefaultCurrency 
		{
			get { return GetColumnValue<int?>(Columns.DefaultCurrency); }
			set { SetColumnValue(Columns.DefaultCurrency, value); }
		}
		  
		[XmlAttribute("Timezone")]
		[Bindable(true)]
		public int? Timezone 
		{
			get { return GetColumnValue<int?>(Columns.Timezone); }
			set { SetColumnValue(Columns.Timezone, value); }
		}
		  
		[XmlAttribute("Referral")]
		[Bindable(true)]
		public string Referral 
		{
			get { return GetColumnValue<string>(Columns.Referral); }
			set { SetColumnValue(Columns.Referral, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varUserKey,string varAddress1,string varAddress2,string varCity,string varState,int? varCountry,string varPostalcode,int? varPhonecountrycode1,int? varPhonetype1,string varPhonenumber1,int? varPhonecountrycode2,int? varPhonetype2,string varPhonenumber2,int? varIdentitynationality,string varOccupation,string varPassportnumber,DateTime? varLastChanged,string varUsername,string varPassword,string varSsn,string varImageUrl,int? varDefaultCurrency,int? varTimezone,string varReferral)
		{
			UsersInfo item = new UsersInfo();
			
			item.UserKey = varUserKey;
			
			item.Address1 = varAddress1;
			
			item.Address2 = varAddress2;
			
			item.City = varCity;
			
			item.State = varState;
			
			item.Country = varCountry;
			
			item.Postalcode = varPostalcode;
			
			item.Phonecountrycode1 = varPhonecountrycode1;
			
			item.Phonetype1 = varPhonetype1;
			
			item.Phonenumber1 = varPhonenumber1;
			
			item.Phonecountrycode2 = varPhonecountrycode2;
			
			item.Phonetype2 = varPhonetype2;
			
			item.Phonenumber2 = varPhonenumber2;
			
			item.Identitynationality = varIdentitynationality;
			
			item.Occupation = varOccupation;
			
			item.Passportnumber = varPassportnumber;
			
			item.LastChanged = varLastChanged;
			
			item.Username = varUsername;
			
			item.Password = varPassword;
			
			item.Ssn = varSsn;
			
			item.ImageUrl = varImageUrl;
			
			item.DefaultCurrency = varDefaultCurrency;
			
			item.Timezone = varTimezone;
			
			item.Referral = varReferral;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varUserKey,string varAddress1,string varAddress2,string varCity,string varState,int? varCountry,string varPostalcode,int? varPhonecountrycode1,int? varPhonetype1,string varPhonenumber1,int? varPhonecountrycode2,int? varPhonetype2,string varPhonenumber2,int? varIdentitynationality,string varOccupation,string varPassportnumber,DateTime? varLastChanged,string varUsername,string varPassword,string varSsn,string varImageUrl,int? varDefaultCurrency,int? varTimezone,string varReferral)
		{
			UsersInfo item = new UsersInfo();
			
				item.UserKey = varUserKey;
			
				item.Address1 = varAddress1;
			
				item.Address2 = varAddress2;
			
				item.City = varCity;
			
				item.State = varState;
			
				item.Country = varCountry;
			
				item.Postalcode = varPostalcode;
			
				item.Phonecountrycode1 = varPhonecountrycode1;
			
				item.Phonetype1 = varPhonetype1;
			
				item.Phonenumber1 = varPhonenumber1;
			
				item.Phonecountrycode2 = varPhonecountrycode2;
			
				item.Phonetype2 = varPhonetype2;
			
				item.Phonenumber2 = varPhonenumber2;
			
				item.Identitynationality = varIdentitynationality;
			
				item.Occupation = varOccupation;
			
				item.Passportnumber = varPassportnumber;
			
				item.LastChanged = varLastChanged;
			
				item.Username = varUsername;
			
				item.Password = varPassword;
			
				item.Ssn = varSsn;
			
				item.ImageUrl = varImageUrl;
			
				item.DefaultCurrency = varDefaultCurrency;
			
				item.Timezone = varTimezone;
			
				item.Referral = varReferral;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn Address1Column
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn Address2Column
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PostalcodeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn Phonecountrycode1Column
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn Phonetype1Column
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn Phonenumber1Column
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn Phonecountrycode2Column
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn Phonetype2Column
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn Phonenumber2Column
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn IdentitynationalityColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupationColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PassportnumberColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn UsernameColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn PasswordColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn SsnColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageUrlColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn DefaultCurrencyColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn TimezoneColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn ReferralColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string UserKey = @"user_key";
			 public static string Address1 = @"address1";
			 public static string Address2 = @"address2";
			 public static string City = @"city";
			 public static string State = @"state";
			 public static string Country = @"country";
			 public static string Postalcode = @"postalcode";
			 public static string Phonecountrycode1 = @"phonecountrycode1";
			 public static string Phonetype1 = @"phonetype1";
			 public static string Phonenumber1 = @"phonenumber1";
			 public static string Phonecountrycode2 = @"phonecountrycode2";
			 public static string Phonetype2 = @"phonetype2";
			 public static string Phonenumber2 = @"phonenumber2";
			 public static string Identitynationality = @"identitynationality";
			 public static string Occupation = @"occupation";
			 public static string Passportnumber = @"passportnumber";
			 public static string LastChanged = @"last_changed";
			 public static string Username = @"username";
			 public static string Password = @"password";
			 public static string Ssn = @"ssn";
			 public static string ImageUrl = @"Image_URL";
			 public static string DefaultCurrency = @"default_currency";
			 public static string Timezone = @"timezone";
			 public static string Referral = @"referral";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
