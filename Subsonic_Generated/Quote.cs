using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the Quote class.
	/// </summary>
    [Serializable]
	public partial class QuoteCollection : ActiveList<Quote, QuoteCollection>
	{	   
		public QuoteCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QuoteCollection</returns>
		public QuoteCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Quote o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Quotes table.
	/// </summary>
	[Serializable]
	public partial class Quote : ActiveRecord<Quote>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Quote()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Quote(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Quote(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Quote(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Quotes", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarQuotesKey = new TableSchema.TableColumn(schema);
				colvarQuotesKey.ColumnName = "quotes_key";
				colvarQuotesKey.DataType = DbType.Int32;
				colvarQuotesKey.MaxLength = 0;
				colvarQuotesKey.AutoIncrement = true;
				colvarQuotesKey.IsNullable = false;
				colvarQuotesKey.IsPrimaryKey = true;
				colvarQuotesKey.IsForeignKey = false;
				colvarQuotesKey.IsReadOnly = false;
				colvarQuotesKey.DefaultSetting = @"";
				colvarQuotesKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuotesKey);
				
				TableSchema.TableColumn colvarSellAmount = new TableSchema.TableColumn(schema);
				colvarSellAmount.ColumnName = "sell_amount";
				colvarSellAmount.DataType = DbType.Currency;
				colvarSellAmount.MaxLength = 0;
				colvarSellAmount.AutoIncrement = false;
				colvarSellAmount.IsNullable = true;
				colvarSellAmount.IsPrimaryKey = false;
				colvarSellAmount.IsForeignKey = false;
				colvarSellAmount.IsReadOnly = false;
				colvarSellAmount.DefaultSetting = @"";
				colvarSellAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSellAmount);
				
				TableSchema.TableColumn colvarSellCurrency = new TableSchema.TableColumn(schema);
				colvarSellCurrency.ColumnName = "sell_currency";
				colvarSellCurrency.DataType = DbType.Int32;
				colvarSellCurrency.MaxLength = 0;
				colvarSellCurrency.AutoIncrement = false;
				colvarSellCurrency.IsNullable = true;
				colvarSellCurrency.IsPrimaryKey = false;
				colvarSellCurrency.IsForeignKey = false;
				colvarSellCurrency.IsReadOnly = false;
				colvarSellCurrency.DefaultSetting = @"";
				colvarSellCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSellCurrency);
				
				TableSchema.TableColumn colvarBuyAmount = new TableSchema.TableColumn(schema);
				colvarBuyAmount.ColumnName = "buy_amount";
				colvarBuyAmount.DataType = DbType.Currency;
				colvarBuyAmount.MaxLength = 0;
				colvarBuyAmount.AutoIncrement = false;
				colvarBuyAmount.IsNullable = true;
				colvarBuyAmount.IsPrimaryKey = false;
				colvarBuyAmount.IsForeignKey = false;
				colvarBuyAmount.IsReadOnly = false;
				colvarBuyAmount.DefaultSetting = @"";
				colvarBuyAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuyAmount);
				
				TableSchema.TableColumn colvarBuyCurrency = new TableSchema.TableColumn(schema);
				colvarBuyCurrency.ColumnName = "buy_currency";
				colvarBuyCurrency.DataType = DbType.Int32;
				colvarBuyCurrency.MaxLength = 0;
				colvarBuyCurrency.AutoIncrement = false;
				colvarBuyCurrency.IsNullable = true;
				colvarBuyCurrency.IsPrimaryKey = false;
				colvarBuyCurrency.IsForeignKey = false;
				colvarBuyCurrency.IsReadOnly = false;
				colvarBuyCurrency.DefaultSetting = @"";
				colvarBuyCurrency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuyCurrency);
				
				TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
				colvarRate.ColumnName = "rate";
				colvarRate.DataType = DbType.Decimal;
				colvarRate.MaxLength = 0;
				colvarRate.AutoIncrement = false;
				colvarRate.IsNullable = true;
				colvarRate.IsPrimaryKey = false;
				colvarRate.IsForeignKey = false;
				colvarRate.IsReadOnly = false;
				colvarRate.DefaultSetting = @"";
				colvarRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRate);
				
				TableSchema.TableColumn colvarServiceFee = new TableSchema.TableColumn(schema);
				colvarServiceFee.ColumnName = "service_fee";
				colvarServiceFee.DataType = DbType.Currency;
				colvarServiceFee.MaxLength = 0;
				colvarServiceFee.AutoIncrement = false;
				colvarServiceFee.IsNullable = true;
				colvarServiceFee.IsPrimaryKey = false;
				colvarServiceFee.IsForeignKey = false;
				colvarServiceFee.IsReadOnly = false;
				colvarServiceFee.DefaultSetting = @"";
				colvarServiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFee);
				
				TableSchema.TableColumn colvarPromisedDeliveryDate = new TableSchema.TableColumn(schema);
				colvarPromisedDeliveryDate.ColumnName = "promised_delivery_date";
				colvarPromisedDeliveryDate.DataType = DbType.DateTime;
				colvarPromisedDeliveryDate.MaxLength = 0;
				colvarPromisedDeliveryDate.AutoIncrement = false;
				colvarPromisedDeliveryDate.IsNullable = true;
				colvarPromisedDeliveryDate.IsPrimaryKey = false;
				colvarPromisedDeliveryDate.IsForeignKey = false;
				colvarPromisedDeliveryDate.IsReadOnly = false;
				colvarPromisedDeliveryDate.DefaultSetting = @"";
				colvarPromisedDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPromisedDeliveryDate);
				
				TableSchema.TableColumn colvarActualDeliveryDate = new TableSchema.TableColumn(schema);
				colvarActualDeliveryDate.ColumnName = "actual_delivery_date";
				colvarActualDeliveryDate.DataType = DbType.DateTime;
				colvarActualDeliveryDate.MaxLength = 0;
				colvarActualDeliveryDate.AutoIncrement = false;
				colvarActualDeliveryDate.IsNullable = true;
				colvarActualDeliveryDate.IsPrimaryKey = false;
				colvarActualDeliveryDate.IsForeignKey = false;
				colvarActualDeliveryDate.IsReadOnly = false;
				colvarActualDeliveryDate.DefaultSetting = @"";
				colvarActualDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualDeliveryDate);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = false;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Quotes",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("QuotesKey")]
		[Bindable(true)]
		public int QuotesKey 
		{
			get { return GetColumnValue<int>(Columns.QuotesKey); }
			set { SetColumnValue(Columns.QuotesKey, value); }
		}
		  
		[XmlAttribute("SellAmount")]
		[Bindable(true)]
		public decimal? SellAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.SellAmount); }
			set { SetColumnValue(Columns.SellAmount, value); }
		}
		  
		[XmlAttribute("SellCurrency")]
		[Bindable(true)]
		public int? SellCurrency 
		{
			get { return GetColumnValue<int?>(Columns.SellCurrency); }
			set { SetColumnValue(Columns.SellCurrency, value); }
		}
		  
		[XmlAttribute("BuyAmount")]
		[Bindable(true)]
		public decimal? BuyAmount 
		{
			get { return GetColumnValue<decimal?>(Columns.BuyAmount); }
			set { SetColumnValue(Columns.BuyAmount, value); }
		}
		  
		[XmlAttribute("BuyCurrency")]
		[Bindable(true)]
		public int? BuyCurrency 
		{
			get { return GetColumnValue<int?>(Columns.BuyCurrency); }
			set { SetColumnValue(Columns.BuyCurrency, value); }
		}
		  
		[XmlAttribute("Rate")]
		[Bindable(true)]
		public decimal? Rate 
		{
			get { return GetColumnValue<decimal?>(Columns.Rate); }
			set { SetColumnValue(Columns.Rate, value); }
		}
		  
		[XmlAttribute("ServiceFee")]
		[Bindable(true)]
		public decimal? ServiceFee 
		{
			get { return GetColumnValue<decimal?>(Columns.ServiceFee); }
			set { SetColumnValue(Columns.ServiceFee, value); }
		}
		  
		[XmlAttribute("PromisedDeliveryDate")]
		[Bindable(true)]
		public DateTime? PromisedDeliveryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PromisedDeliveryDate); }
			set { SetColumnValue(Columns.PromisedDeliveryDate, value); }
		}
		  
		[XmlAttribute("ActualDeliveryDate")]
		[Bindable(true)]
		public DateTime? ActualDeliveryDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ActualDeliveryDate); }
			set { SetColumnValue(Columns.ActualDeliveryDate, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime DateCreated 
		{
			get { return GetColumnValue<DateTime>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varSellAmount,int? varSellCurrency,decimal? varBuyAmount,int? varBuyCurrency,decimal? varRate,decimal? varServiceFee,DateTime? varPromisedDeliveryDate,DateTime? varActualDeliveryDate,DateTime varDateCreated)
		{
			Quote item = new Quote();
			
			item.SellAmount = varSellAmount;
			
			item.SellCurrency = varSellCurrency;
			
			item.BuyAmount = varBuyAmount;
			
			item.BuyCurrency = varBuyCurrency;
			
			item.Rate = varRate;
			
			item.ServiceFee = varServiceFee;
			
			item.PromisedDeliveryDate = varPromisedDeliveryDate;
			
			item.ActualDeliveryDate = varActualDeliveryDate;
			
			item.DateCreated = varDateCreated;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varQuotesKey,decimal? varSellAmount,int? varSellCurrency,decimal? varBuyAmount,int? varBuyCurrency,decimal? varRate,decimal? varServiceFee,DateTime? varPromisedDeliveryDate,DateTime? varActualDeliveryDate,DateTime varDateCreated)
		{
			Quote item = new Quote();
			
				item.QuotesKey = varQuotesKey;
			
				item.SellAmount = varSellAmount;
			
				item.SellCurrency = varSellCurrency;
			
				item.BuyAmount = varBuyAmount;
			
				item.BuyCurrency = varBuyCurrency;
			
				item.Rate = varRate;
			
				item.ServiceFee = varServiceFee;
			
				item.PromisedDeliveryDate = varPromisedDeliveryDate;
			
				item.ActualDeliveryDate = varActualDeliveryDate;
			
				item.DateCreated = varDateCreated;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn QuotesKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SellAmountColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SellCurrencyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BuyAmountColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BuyCurrencyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PromisedDeliveryDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ActualDeliveryDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string QuotesKey = @"quotes_key";
			 public static string SellAmount = @"sell_amount";
			 public static string SellCurrency = @"sell_currency";
			 public static string BuyAmount = @"buy_amount";
			 public static string BuyCurrency = @"buy_currency";
			 public static string Rate = @"rate";
			 public static string ServiceFee = @"service_fee";
			 public static string PromisedDeliveryDate = @"promised_delivery_date";
			 public static string ActualDeliveryDate = @"actual_delivery_date";
			 public static string DateCreated = @"date_created";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
