using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    /// <summary>
    /// Strongly-typed collection for the VwCurrency class.
    /// </summary>
    [Serializable]
    public partial class VwCurrencyCollection : ReadOnlyList<VwCurrency, VwCurrencyCollection>
    {        
        public VwCurrencyCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_currencies view.
    /// </summary>
    [Serializable]
    public partial class VwCurrency : ReadOnlyRecord<VwCurrency>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_currencies", TableType.View, DataService.GetInstance("Peerfx"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarCountryValue = new TableSchema.TableColumn(schema);
                colvarCountryValue.ColumnName = "country_value";
                colvarCountryValue.DataType = DbType.String;
                colvarCountryValue.MaxLength = 2;
                colvarCountryValue.AutoIncrement = false;
                colvarCountryValue.IsNullable = false;
                colvarCountryValue.IsPrimaryKey = false;
                colvarCountryValue.IsForeignKey = false;
                colvarCountryValue.IsReadOnly = false;
                
                schema.Columns.Add(colvarCountryValue);
                
                TableSchema.TableColumn colvarInfoCountryKey = new TableSchema.TableColumn(schema);
                colvarInfoCountryKey.ColumnName = "info_country_key";
                colvarInfoCountryKey.DataType = DbType.Int32;
                colvarInfoCountryKey.MaxLength = 0;
                colvarInfoCountryKey.AutoIncrement = false;
                colvarInfoCountryKey.IsNullable = false;
                colvarInfoCountryKey.IsPrimaryKey = false;
                colvarInfoCountryKey.IsForeignKey = false;
                colvarInfoCountryKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCountryKey);
                
                TableSchema.TableColumn colvarCountryText = new TableSchema.TableColumn(schema);
                colvarCountryText.ColumnName = "country_text";
                colvarCountryText.DataType = DbType.String;
                colvarCountryText.MaxLength = 50;
                colvarCountryText.AutoIncrement = false;
                colvarCountryText.IsNullable = false;
                colvarCountryText.IsPrimaryKey = false;
                colvarCountryText.IsForeignKey = false;
                colvarCountryText.IsReadOnly = false;
                
                schema.Columns.Add(colvarCountryText);
                
                TableSchema.TableColumn colvarPhoneCode = new TableSchema.TableColumn(schema);
                colvarPhoneCode.ColumnName = "phone_code";
                colvarPhoneCode.DataType = DbType.String;
                colvarPhoneCode.MaxLength = 10;
                colvarPhoneCode.AutoIncrement = false;
                colvarPhoneCode.IsNullable = true;
                colvarPhoneCode.IsPrimaryKey = false;
                colvarPhoneCode.IsForeignKey = false;
                colvarPhoneCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarPhoneCode);
                
                TableSchema.TableColumn colvarCountryCode = new TableSchema.TableColumn(schema);
                colvarCountryCode.ColumnName = "country_code";
                colvarCountryCode.DataType = DbType.AnsiString;
                colvarCountryCode.MaxLength = 3;
                colvarCountryCode.AutoIncrement = false;
                colvarCountryCode.IsNullable = true;
                colvarCountryCode.IsPrimaryKey = false;
                colvarCountryCode.IsForeignKey = false;
                colvarCountryCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarCountryCode);
                
                TableSchema.TableColumn colvarInfoCurrenciesKey = new TableSchema.TableColumn(schema);
                colvarInfoCurrenciesKey.ColumnName = "info_currencies_key";
                colvarInfoCurrenciesKey.DataType = DbType.Int32;
                colvarInfoCurrenciesKey.MaxLength = 0;
                colvarInfoCurrenciesKey.AutoIncrement = false;
                colvarInfoCurrenciesKey.IsNullable = false;
                colvarInfoCurrenciesKey.IsPrimaryKey = false;
                colvarInfoCurrenciesKey.IsForeignKey = false;
                colvarInfoCurrenciesKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrenciesKey);
                
                TableSchema.TableColumn colvarInfoCurrencyCode = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCode.ColumnName = "info_currency_code";
                colvarInfoCurrencyCode.DataType = DbType.String;
                colvarInfoCurrencyCode.MaxLength = 3;
                colvarInfoCurrencyCode.AutoIncrement = false;
                colvarInfoCurrencyCode.IsNullable = false;
                colvarInfoCurrencyCode.IsPrimaryKey = false;
                colvarInfoCurrencyCode.IsForeignKey = false;
                colvarInfoCurrencyCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCode);
                
                TableSchema.TableColumn colvarInfoCurrencyName = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyName.ColumnName = "info_currency_name";
                colvarInfoCurrencyName.DataType = DbType.String;
                colvarInfoCurrencyName.MaxLength = 50;
                colvarInfoCurrencyName.AutoIncrement = false;
                colvarInfoCurrencyName.IsNullable = false;
                colvarInfoCurrencyName.IsPrimaryKey = false;
                colvarInfoCurrencyName.IsForeignKey = false;
                colvarInfoCurrencyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyName);
                
                TableSchema.TableColumn colvarInfoCurrencyCountry = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCountry.ColumnName = "info_currency_country";
                colvarInfoCurrencyCountry.DataType = DbType.String;
                colvarInfoCurrencyCountry.MaxLength = 50;
                colvarInfoCurrencyCountry.AutoIncrement = false;
                colvarInfoCurrencyCountry.IsNullable = false;
                colvarInfoCurrencyCountry.IsPrimaryKey = false;
                colvarInfoCurrencyCountry.IsForeignKey = false;
                colvarInfoCurrencyCountry.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCountry);
                
                TableSchema.TableColumn colvarInfoCurrencyCansell = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCansell.ColumnName = "info_currency_cansell";
                colvarInfoCurrencyCansell.DataType = DbType.Boolean;
                colvarInfoCurrencyCansell.MaxLength = 0;
                colvarInfoCurrencyCansell.AutoIncrement = false;
                colvarInfoCurrencyCansell.IsNullable = true;
                colvarInfoCurrencyCansell.IsPrimaryKey = false;
                colvarInfoCurrencyCansell.IsForeignKey = false;
                colvarInfoCurrencyCansell.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCansell);
                
                TableSchema.TableColumn colvarInfoCurrencyCanbuy = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCanbuy.ColumnName = "info_currency_canbuy";
                colvarInfoCurrencyCanbuy.DataType = DbType.Boolean;
                colvarInfoCurrencyCanbuy.MaxLength = 0;
                colvarInfoCurrencyCanbuy.AutoIncrement = false;
                colvarInfoCurrencyCanbuy.IsNullable = true;
                colvarInfoCurrencyCanbuy.IsPrimaryKey = false;
                colvarInfoCurrencyCanbuy.IsForeignKey = false;
                colvarInfoCurrencyCanbuy.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCanbuy);
                
                TableSchema.TableColumn colvarInfoCurrencySymbol = new TableSchema.TableColumn(schema);
                colvarInfoCurrencySymbol.ColumnName = "info_currency_symbol";
                colvarInfoCurrencySymbol.DataType = DbType.String;
                colvarInfoCurrencySymbol.MaxLength = 3;
                colvarInfoCurrencySymbol.AutoIncrement = false;
                colvarInfoCurrencySymbol.IsNullable = true;
                colvarInfoCurrencySymbol.IsPrimaryKey = false;
                colvarInfoCurrencySymbol.IsForeignKey = false;
                colvarInfoCurrencySymbol.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencySymbol);
                
                TableSchema.TableColumn colvarInfoCurrencyDescription = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyDescription.ColumnName = "info_currency_description";
                colvarInfoCurrencyDescription.DataType = DbType.String;
                colvarInfoCurrencyDescription.MaxLength = 50;
                colvarInfoCurrencyDescription.AutoIncrement = false;
                colvarInfoCurrencyDescription.IsNullable = true;
                colvarInfoCurrencyDescription.IsPrimaryKey = false;
                colvarInfoCurrencyDescription.IsForeignKey = false;
                colvarInfoCurrencyDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyDescription);
                
                TableSchema.TableColumn colvarAllowLocalBankaccount = new TableSchema.TableColumn(schema);
                colvarAllowLocalBankaccount.ColumnName = "allow_local_bankaccount";
                colvarAllowLocalBankaccount.DataType = DbType.Boolean;
                colvarAllowLocalBankaccount.MaxLength = 0;
                colvarAllowLocalBankaccount.AutoIncrement = false;
                colvarAllowLocalBankaccount.IsNullable = true;
                colvarAllowLocalBankaccount.IsPrimaryKey = false;
                colvarAllowLocalBankaccount.IsForeignKey = false;
                colvarAllowLocalBankaccount.IsReadOnly = false;
                
                schema.Columns.Add(colvarAllowLocalBankaccount);
                
                TableSchema.TableColumn colvarInfoCurrencyCountrykey = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCountrykey.ColumnName = "info_currency_countrykey";
                colvarInfoCurrencyCountrykey.DataType = DbType.Int32;
                colvarInfoCurrencyCountrykey.MaxLength = 0;
                colvarInfoCurrencyCountrykey.AutoIncrement = false;
                colvarInfoCurrencyCountrykey.IsNullable = true;
                colvarInfoCurrencyCountrykey.IsPrimaryKey = false;
                colvarInfoCurrencyCountrykey.IsForeignKey = false;
                colvarInfoCurrencyCountrykey.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCountrykey);
                
                TableSchema.TableColumn colvarVerifyBankAccount = new TableSchema.TableColumn(schema);
                colvarVerifyBankAccount.ColumnName = "verify_bank_account";
                colvarVerifyBankAccount.DataType = DbType.Boolean;
                colvarVerifyBankAccount.MaxLength = 0;
                colvarVerifyBankAccount.AutoIncrement = false;
                colvarVerifyBankAccount.IsNullable = true;
                colvarVerifyBankAccount.IsPrimaryKey = false;
                colvarVerifyBankAccount.IsForeignKey = false;
                colvarVerifyBankAccount.IsReadOnly = false;
                
                schema.Columns.Add(colvarVerifyBankAccount);
                
                TableSchema.TableColumn colvarInfoCurrencyCanhold = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCanhold.ColumnName = "info_currency_canhold";
                colvarInfoCurrencyCanhold.DataType = DbType.Boolean;
                colvarInfoCurrencyCanhold.MaxLength = 0;
                colvarInfoCurrencyCanhold.AutoIncrement = false;
                colvarInfoCurrencyCanhold.IsNullable = true;
                colvarInfoCurrencyCanhold.IsPrimaryKey = false;
                colvarInfoCurrencyCanhold.IsForeignKey = false;
                colvarInfoCurrencyCanhold.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCanhold);
                
                TableSchema.TableColumn colvarCurrencycloudCutoff = new TableSchema.TableColumn(schema);
                colvarCurrencycloudCutoff.ColumnName = "currencycloud_cutoff";
                colvarCurrencycloudCutoff.DataType = DbType.Int32;
                colvarCurrencycloudCutoff.MaxLength = 0;
                colvarCurrencycloudCutoff.AutoIncrement = false;
                colvarCurrencycloudCutoff.IsNullable = true;
                colvarCurrencycloudCutoff.IsPrimaryKey = false;
                colvarCurrencycloudCutoff.IsForeignKey = false;
                colvarCurrencycloudCutoff.IsReadOnly = false;
                
                schema.Columns.Add(colvarCurrencycloudCutoff);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Peerfx"].AddSchema("vw_currencies",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwCurrency()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwCurrency(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwCurrency(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwCurrency(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("CountryValue")]
        [Bindable(true)]
        public string CountryValue 
	    {
		    get
		    {
			    return GetColumnValue<string>("country_value");
		    }
            set 
		    {
			    SetColumnValue("country_value", value);
            }
        }
	      
        [XmlAttribute("InfoCountryKey")]
        [Bindable(true)]
        public int InfoCountryKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("info_country_key");
		    }
            set 
		    {
			    SetColumnValue("info_country_key", value);
            }
        }
	      
        [XmlAttribute("CountryText")]
        [Bindable(true)]
        public string CountryText 
	    {
		    get
		    {
			    return GetColumnValue<string>("country_text");
		    }
            set 
		    {
			    SetColumnValue("country_text", value);
            }
        }
	      
        [XmlAttribute("PhoneCode")]
        [Bindable(true)]
        public string PhoneCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("phone_code");
		    }
            set 
		    {
			    SetColumnValue("phone_code", value);
            }
        }
	      
        [XmlAttribute("CountryCode")]
        [Bindable(true)]
        public string CountryCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("country_code");
		    }
            set 
		    {
			    SetColumnValue("country_code", value);
            }
        }
	      
        [XmlAttribute("InfoCurrenciesKey")]
        [Bindable(true)]
        public int InfoCurrenciesKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("info_currencies_key");
		    }
            set 
		    {
			    SetColumnValue("info_currencies_key", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCode")]
        [Bindable(true)]
        public string InfoCurrencyCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_code");
		    }
            set 
		    {
			    SetColumnValue("info_currency_code", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyName")]
        [Bindable(true)]
        public string InfoCurrencyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_name");
		    }
            set 
		    {
			    SetColumnValue("info_currency_name", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCountry")]
        [Bindable(true)]
        public string InfoCurrencyCountry 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_country");
		    }
            set 
		    {
			    SetColumnValue("info_currency_country", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCansell")]
        [Bindable(true)]
        public bool? InfoCurrencyCansell 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("info_currency_cansell");
		    }
            set 
		    {
			    SetColumnValue("info_currency_cansell", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCanbuy")]
        [Bindable(true)]
        public bool? InfoCurrencyCanbuy 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("info_currency_canbuy");
		    }
            set 
		    {
			    SetColumnValue("info_currency_canbuy", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencySymbol")]
        [Bindable(true)]
        public string InfoCurrencySymbol 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_symbol");
		    }
            set 
		    {
			    SetColumnValue("info_currency_symbol", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyDescription")]
        [Bindable(true)]
        public string InfoCurrencyDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_description");
		    }
            set 
		    {
			    SetColumnValue("info_currency_description", value);
            }
        }
	      
        [XmlAttribute("AllowLocalBankaccount")]
        [Bindable(true)]
        public bool? AllowLocalBankaccount 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("allow_local_bankaccount");
		    }
            set 
		    {
			    SetColumnValue("allow_local_bankaccount", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCountrykey")]
        [Bindable(true)]
        public int? InfoCurrencyCountrykey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("info_currency_countrykey");
		    }
            set 
		    {
			    SetColumnValue("info_currency_countrykey", value);
            }
        }
	      
        [XmlAttribute("VerifyBankAccount")]
        [Bindable(true)]
        public bool? VerifyBankAccount 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("verify_bank_account");
		    }
            set 
		    {
			    SetColumnValue("verify_bank_account", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCanhold")]
        [Bindable(true)]
        public bool? InfoCurrencyCanhold 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("info_currency_canhold");
		    }
            set 
		    {
			    SetColumnValue("info_currency_canhold", value);
            }
        }
	      
        [XmlAttribute("CurrencycloudCutoff")]
        [Bindable(true)]
        public int? CurrencycloudCutoff 
	    {
		    get
		    {
			    return GetColumnValue<int?>("currencycloud_cutoff");
		    }
            set 
		    {
			    SetColumnValue("currencycloud_cutoff", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string CountryValue = @"country_value";
            
            public static string InfoCountryKey = @"info_country_key";
            
            public static string CountryText = @"country_text";
            
            public static string PhoneCode = @"phone_code";
            
            public static string CountryCode = @"country_code";
            
            public static string InfoCurrenciesKey = @"info_currencies_key";
            
            public static string InfoCurrencyCode = @"info_currency_code";
            
            public static string InfoCurrencyName = @"info_currency_name";
            
            public static string InfoCurrencyCountry = @"info_currency_country";
            
            public static string InfoCurrencyCansell = @"info_currency_cansell";
            
            public static string InfoCurrencyCanbuy = @"info_currency_canbuy";
            
            public static string InfoCurrencySymbol = @"info_currency_symbol";
            
            public static string InfoCurrencyDescription = @"info_currency_description";
            
            public static string AllowLocalBankaccount = @"allow_local_bankaccount";
            
            public static string InfoCurrencyCountrykey = @"info_currency_countrykey";
            
            public static string VerifyBankAccount = @"verify_bank_account";
            
            public static string InfoCurrencyCanhold = @"info_currency_canhold";
            
            public static string CurrencycloudCutoff = @"currencycloud_cutoff";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
