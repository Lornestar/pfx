using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the User class.
	/// </summary>
    [Serializable]
	public partial class UserCollection : ActiveList<User, UserCollection>
	{	   
		public UserCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UserCollection</returns>
		public UserCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                User o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Users table.
	/// </summary>
	[Serializable]
	public partial class User : ActiveRecord<User>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public User()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public User(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public User(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public User(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Users", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = true;
				colvarUserKey.IsNullable = false;
				colvarUserKey.IsPrimaryKey = true;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarAccountNumber = new TableSchema.TableColumn(schema);
				colvarAccountNumber.ColumnName = "account_number";
				colvarAccountNumber.DataType = DbType.AnsiString;
				colvarAccountNumber.MaxLength = 10;
				colvarAccountNumber.AutoIncrement = false;
				colvarAccountNumber.IsNullable = true;
				colvarAccountNumber.IsPrimaryKey = false;
				colvarAccountNumber.IsForeignKey = false;
				colvarAccountNumber.IsReadOnly = false;
				colvarAccountNumber.DefaultSetting = @"";
				colvarAccountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNumber);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 10;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "first_name";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 100;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "middle_name";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 100;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "last_name";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 100;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarDob = new TableSchema.TableColumn(schema);
				colvarDob.ColumnName = "dob";
				colvarDob.DataType = DbType.AnsiString;
				colvarDob.MaxLength = 0;
				colvarDob.AutoIncrement = false;
				colvarDob.IsNullable = true;
				colvarDob.IsPrimaryKey = false;
				colvarDob.IsForeignKey = false;
				colvarDob.IsReadOnly = false;
				colvarDob.DefaultSetting = @"";
				colvarDob.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDob);
				
				TableSchema.TableColumn colvarCountryResidence = new TableSchema.TableColumn(schema);
				colvarCountryResidence.ColumnName = "country_residence";
				colvarCountryResidence.DataType = DbType.Int32;
				colvarCountryResidence.MaxLength = 0;
				colvarCountryResidence.AutoIncrement = false;
				colvarCountryResidence.IsNullable = true;
				colvarCountryResidence.IsPrimaryKey = false;
				colvarCountryResidence.IsForeignKey = false;
				colvarCountryResidence.IsReadOnly = false;
				colvarCountryResidence.DefaultSetting = @"";
				colvarCountryResidence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryResidence);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "ip_address";
				colvarIpAddress.DataType = DbType.String;
				colvarIpAddress.MaxLength = 20;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = true;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = false;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarSignedUp = new TableSchema.TableColumn(schema);
				colvarSignedUp.ColumnName = "signed_up";
				colvarSignedUp.DataType = DbType.DateTime;
				colvarSignedUp.MaxLength = 0;
				colvarSignedUp.AutoIncrement = false;
				colvarSignedUp.IsNullable = false;
				colvarSignedUp.IsPrimaryKey = false;
				colvarSignedUp.IsForeignKey = false;
				colvarSignedUp.IsReadOnly = false;
				colvarSignedUp.DefaultSetting = @"";
				colvarSignedUp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignedUp);
				
				TableSchema.TableColumn colvarUserStatus = new TableSchema.TableColumn(schema);
				colvarUserStatus.ColumnName = "user_status";
				colvarUserStatus.DataType = DbType.Int32;
				colvarUserStatus.MaxLength = 0;
				colvarUserStatus.AutoIncrement = false;
				colvarUserStatus.IsNullable = true;
				colvarUserStatus.IsPrimaryKey = false;
				colvarUserStatus.IsForeignKey = false;
				colvarUserStatus.IsReadOnly = false;
				colvarUserStatus.DefaultSetting = @"";
				colvarUserStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserStatus);
				
				TableSchema.TableColumn colvarUserType = new TableSchema.TableColumn(schema);
				colvarUserType.ColumnName = "user_type";
				colvarUserType.DataType = DbType.Int32;
				colvarUserType.MaxLength = 0;
				colvarUserType.AutoIncrement = false;
				colvarUserType.IsNullable = true;
				colvarUserType.IsPrimaryKey = false;
				colvarUserType.IsForeignKey = false;
				colvarUserType.IsReadOnly = false;
				colvarUserType.DefaultSetting = @"";
				colvarUserType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserType);
				
				TableSchema.TableColumn colvarLastOnline = new TableSchema.TableColumn(schema);
				colvarLastOnline.ColumnName = "last_online";
				colvarLastOnline.DataType = DbType.DateTime;
				colvarLastOnline.MaxLength = 0;
				colvarLastOnline.AutoIncrement = false;
				colvarLastOnline.IsNullable = true;
				colvarLastOnline.IsPrimaryKey = false;
				colvarLastOnline.IsForeignKey = false;
				colvarLastOnline.IsReadOnly = false;
				colvarLastOnline.DefaultSetting = @"";
				colvarLastOnline.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastOnline);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Users",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int UserKey 
		{
			get { return GetColumnValue<int>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("AccountNumber")]
		[Bindable(true)]
		public string AccountNumber 
		{
			get { return GetColumnValue<string>(Columns.AccountNumber); }
			set { SetColumnValue(Columns.AccountNumber, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("MiddleName")]
		[Bindable(true)]
		public string MiddleName 
		{
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("Dob")]
		[Bindable(true)]
		public string Dob 
		{
			get { return GetColumnValue<string>(Columns.Dob); }
			set { SetColumnValue(Columns.Dob, value); }
		}
		  
		[XmlAttribute("CountryResidence")]
		[Bindable(true)]
		public int? CountryResidence 
		{
			get { return GetColumnValue<int?>(Columns.CountryResidence); }
			set { SetColumnValue(Columns.CountryResidence, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime LastChanged 
		{
			get { return GetColumnValue<DateTime>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("SignedUp")]
		[Bindable(true)]
		public DateTime SignedUp 
		{
			get { return GetColumnValue<DateTime>(Columns.SignedUp); }
			set { SetColumnValue(Columns.SignedUp, value); }
		}
		  
		[XmlAttribute("UserStatus")]
		[Bindable(true)]
		public int? UserStatus 
		{
			get { return GetColumnValue<int?>(Columns.UserStatus); }
			set { SetColumnValue(Columns.UserStatus, value); }
		}
		  
		[XmlAttribute("UserType")]
		[Bindable(true)]
		public int? UserType 
		{
			get { return GetColumnValue<int?>(Columns.UserType); }
			set { SetColumnValue(Columns.UserType, value); }
		}
		  
		[XmlAttribute("LastOnline")]
		[Bindable(true)]
		public DateTime? LastOnline 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastOnline); }
			set { SetColumnValue(Columns.LastOnline, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varAccountNumber,string varTitle,string varFirstName,string varMiddleName,string varLastName,string varDob,int? varCountryResidence,string varEmail,string varIpAddress,DateTime varLastChanged,DateTime varSignedUp,int? varUserStatus,int? varUserType,DateTime? varLastOnline)
		{
			User item = new User();
			
			item.AccountNumber = varAccountNumber;
			
			item.Title = varTitle;
			
			item.FirstName = varFirstName;
			
			item.MiddleName = varMiddleName;
			
			item.LastName = varLastName;
			
			item.Dob = varDob;
			
			item.CountryResidence = varCountryResidence;
			
			item.Email = varEmail;
			
			item.IpAddress = varIpAddress;
			
			item.LastChanged = varLastChanged;
			
			item.SignedUp = varSignedUp;
			
			item.UserStatus = varUserStatus;
			
			item.UserType = varUserType;
			
			item.LastOnline = varLastOnline;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varUserKey,string varAccountNumber,string varTitle,string varFirstName,string varMiddleName,string varLastName,string varDob,int? varCountryResidence,string varEmail,string varIpAddress,DateTime varLastChanged,DateTime varSignedUp,int? varUserStatus,int? varUserType,DateTime? varLastOnline)
		{
			User item = new User();
			
				item.UserKey = varUserKey;
			
				item.AccountNumber = varAccountNumber;
			
				item.Title = varTitle;
			
				item.FirstName = varFirstName;
			
				item.MiddleName = varMiddleName;
			
				item.LastName = varLastName;
			
				item.Dob = varDob;
			
				item.CountryResidence = varCountryResidence;
			
				item.Email = varEmail;
			
				item.IpAddress = varIpAddress;
			
				item.LastChanged = varLastChanged;
			
				item.SignedUp = varSignedUp;
			
				item.UserStatus = varUserStatus;
			
				item.UserType = varUserType;
			
				item.LastOnline = varLastOnline;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AccountNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MiddleNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DobColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryResidenceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SignedUpColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UserStatusColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UserTypeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn LastOnlineColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string UserKey = @"user_key";
			 public static string AccountNumber = @"account_number";
			 public static string Title = @"title";
			 public static string FirstName = @"first_name";
			 public static string MiddleName = @"middle_name";
			 public static string LastName = @"last_name";
			 public static string Dob = @"dob";
			 public static string CountryResidence = @"country_residence";
			 public static string Email = @"email";
			 public static string IpAddress = @"ip_address";
			 public static string LastChanged = @"last_changed";
			 public static string SignedUp = @"signed_up";
			 public static string UserStatus = @"user_status";
			 public static string UserType = @"user_type";
			 public static string LastOnline = @"last_online";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
