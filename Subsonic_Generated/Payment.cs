using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the Payment class.
	/// </summary>
    [Serializable]
	public partial class PaymentCollection : ActiveList<Payment, PaymentCollection>
	{	   
		public PaymentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PaymentCollection</returns>
		public PaymentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Payment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Payments table.
	/// </summary>
	[Serializable]
	public partial class Payment : ActiveRecord<Payment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Payment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Payment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Payment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Payment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Payments", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPaymentsKey = new TableSchema.TableColumn(schema);
				colvarPaymentsKey.ColumnName = "payments_key";
				colvarPaymentsKey.DataType = DbType.Int32;
				colvarPaymentsKey.MaxLength = 0;
				colvarPaymentsKey.AutoIncrement = true;
				colvarPaymentsKey.IsNullable = false;
				colvarPaymentsKey.IsPrimaryKey = true;
				colvarPaymentsKey.IsForeignKey = false;
				colvarPaymentsKey.IsReadOnly = false;
				colvarPaymentsKey.DefaultSetting = @"";
				colvarPaymentsKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentsKey);
				
				TableSchema.TableColumn colvarQuoteKey = new TableSchema.TableColumn(schema);
				colvarQuoteKey.ColumnName = "quote_key";
				colvarQuoteKey.DataType = DbType.Int32;
				colvarQuoteKey.MaxLength = 0;
				colvarQuoteKey.AutoIncrement = false;
				colvarQuoteKey.IsNullable = false;
				colvarQuoteKey.IsPrimaryKey = false;
				colvarQuoteKey.IsForeignKey = false;
				colvarQuoteKey.IsReadOnly = false;
				colvarQuoteKey.DefaultSetting = @"";
				colvarQuoteKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuoteKey);
				
				TableSchema.TableColumn colvarPaymentStatus = new TableSchema.TableColumn(schema);
				colvarPaymentStatus.ColumnName = "payment_status";
				colvarPaymentStatus.DataType = DbType.Int32;
				colvarPaymentStatus.MaxLength = 0;
				colvarPaymentStatus.AutoIncrement = false;
				colvarPaymentStatus.IsNullable = false;
				colvarPaymentStatus.IsPrimaryKey = false;
				colvarPaymentStatus.IsForeignKey = false;
				colvarPaymentStatus.IsReadOnly = false;
				colvarPaymentStatus.DefaultSetting = @"";
				colvarPaymentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentStatus);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = false;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				TableSchema.TableColumn colvarRequestorUserKey = new TableSchema.TableColumn(schema);
				colvarRequestorUserKey.ColumnName = "requestor_user_key";
				colvarRequestorUserKey.DataType = DbType.Int32;
				colvarRequestorUserKey.MaxLength = 0;
				colvarRequestorUserKey.AutoIncrement = false;
				colvarRequestorUserKey.IsNullable = true;
				colvarRequestorUserKey.IsPrimaryKey = false;
				colvarRequestorUserKey.IsForeignKey = false;
				colvarRequestorUserKey.IsReadOnly = false;
				colvarRequestorUserKey.DefaultSetting = @"";
				colvarRequestorUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequestorUserKey);
				
				TableSchema.TableColumn colvarPaymentObjectSender = new TableSchema.TableColumn(schema);
				colvarPaymentObjectSender.ColumnName = "payment_object_sender";
				colvarPaymentObjectSender.DataType = DbType.Int64;
				colvarPaymentObjectSender.MaxLength = 0;
				colvarPaymentObjectSender.AutoIncrement = false;
				colvarPaymentObjectSender.IsNullable = true;
				colvarPaymentObjectSender.IsPrimaryKey = false;
				colvarPaymentObjectSender.IsForeignKey = false;
				colvarPaymentObjectSender.IsReadOnly = false;
				colvarPaymentObjectSender.DefaultSetting = @"";
				colvarPaymentObjectSender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentObjectSender);
				
				TableSchema.TableColumn colvarPaymentObjectReceiver = new TableSchema.TableColumn(schema);
				colvarPaymentObjectReceiver.ColumnName = "payment_object_receiver";
				colvarPaymentObjectReceiver.DataType = DbType.Int64;
				colvarPaymentObjectReceiver.MaxLength = 0;
				colvarPaymentObjectReceiver.AutoIncrement = false;
				colvarPaymentObjectReceiver.IsNullable = true;
				colvarPaymentObjectReceiver.IsPrimaryKey = false;
				colvarPaymentObjectReceiver.IsForeignKey = false;
				colvarPaymentObjectReceiver.IsReadOnly = false;
				colvarPaymentObjectReceiver.DefaultSetting = @"";
				colvarPaymentObjectReceiver.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentObjectReceiver);
				
				TableSchema.TableColumn colvarPaymentDescription = new TableSchema.TableColumn(schema);
				colvarPaymentDescription.ColumnName = "payment_description";
				colvarPaymentDescription.DataType = DbType.String;
				colvarPaymentDescription.MaxLength = 100;
				colvarPaymentDescription.AutoIncrement = false;
				colvarPaymentDescription.IsNullable = true;
				colvarPaymentDescription.IsPrimaryKey = false;
				colvarPaymentDescription.IsForeignKey = false;
				colvarPaymentDescription.IsReadOnly = false;
				colvarPaymentDescription.DefaultSetting = @"";
				colvarPaymentDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDescription);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Payments",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PaymentsKey")]
		[Bindable(true)]
		public int PaymentsKey 
		{
			get { return GetColumnValue<int>(Columns.PaymentsKey); }
			set { SetColumnValue(Columns.PaymentsKey, value); }
		}
		  
		[XmlAttribute("QuoteKey")]
		[Bindable(true)]
		public int QuoteKey 
		{
			get { return GetColumnValue<int>(Columns.QuoteKey); }
			set { SetColumnValue(Columns.QuoteKey, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public int PaymentStatus 
		{
			get { return GetColumnValue<int>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime DateCreated 
		{
			get { return GetColumnValue<DateTime>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		  
		[XmlAttribute("RequestorUserKey")]
		[Bindable(true)]
		public int? RequestorUserKey 
		{
			get { return GetColumnValue<int?>(Columns.RequestorUserKey); }
			set { SetColumnValue(Columns.RequestorUserKey, value); }
		}
		  
		[XmlAttribute("PaymentObjectSender")]
		[Bindable(true)]
		public long? PaymentObjectSender 
		{
			get { return GetColumnValue<long?>(Columns.PaymentObjectSender); }
			set { SetColumnValue(Columns.PaymentObjectSender, value); }
		}
		  
		[XmlAttribute("PaymentObjectReceiver")]
		[Bindable(true)]
		public long? PaymentObjectReceiver 
		{
			get { return GetColumnValue<long?>(Columns.PaymentObjectReceiver); }
			set { SetColumnValue(Columns.PaymentObjectReceiver, value); }
		}
		  
		[XmlAttribute("PaymentDescription")]
		[Bindable(true)]
		public string PaymentDescription 
		{
			get { return GetColumnValue<string>(Columns.PaymentDescription); }
			set { SetColumnValue(Columns.PaymentDescription, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varQuoteKey,int varPaymentStatus,DateTime varDateCreated,int? varRequestorUserKey,long? varPaymentObjectSender,long? varPaymentObjectReceiver,string varPaymentDescription)
		{
			Payment item = new Payment();
			
			item.QuoteKey = varQuoteKey;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.DateCreated = varDateCreated;
			
			item.RequestorUserKey = varRequestorUserKey;
			
			item.PaymentObjectSender = varPaymentObjectSender;
			
			item.PaymentObjectReceiver = varPaymentObjectReceiver;
			
			item.PaymentDescription = varPaymentDescription;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPaymentsKey,int varQuoteKey,int varPaymentStatus,DateTime varDateCreated,int? varRequestorUserKey,long? varPaymentObjectSender,long? varPaymentObjectReceiver,string varPaymentDescription)
		{
			Payment item = new Payment();
			
				item.PaymentsKey = varPaymentsKey;
			
				item.QuoteKey = varQuoteKey;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.DateCreated = varDateCreated;
			
				item.RequestorUserKey = varRequestorUserKey;
			
				item.PaymentObjectSender = varPaymentObjectSender;
			
				item.PaymentObjectReceiver = varPaymentObjectReceiver;
			
				item.PaymentDescription = varPaymentDescription;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PaymentsKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn QuoteKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestorUserKeyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentObjectSenderColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentObjectReceiverColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDescriptionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PaymentsKey = @"payments_key";
			 public static string QuoteKey = @"quote_key";
			 public static string PaymentStatus = @"payment_status";
			 public static string DateCreated = @"date_created";
			 public static string RequestorUserKey = @"requestor_user_key";
			 public static string PaymentObjectSender = @"payment_object_sender";
			 public static string PaymentObjectReceiver = @"payment_object_receiver";
			 public static string PaymentDescription = @"payment_description";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
