using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the EmbeeObject class.
	/// </summary>
    [Serializable]
	public partial class EmbeeObjectCollection : ActiveList<EmbeeObject, EmbeeObjectCollection>
	{	   
		public EmbeeObjectCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EmbeeObjectCollection</returns>
		public EmbeeObjectCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                EmbeeObject o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Embee_Objects table.
	/// </summary>
	[Serializable]
	public partial class EmbeeObject : ActiveRecord<EmbeeObject>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public EmbeeObject()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public EmbeeObject(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public EmbeeObject(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public EmbeeObject(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Embee_Objects", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarEmbeeObjectKey = new TableSchema.TableColumn(schema);
				colvarEmbeeObjectKey.ColumnName = "embee_object_key";
				colvarEmbeeObjectKey.DataType = DbType.Int32;
				colvarEmbeeObjectKey.MaxLength = 0;
				colvarEmbeeObjectKey.AutoIncrement = true;
				colvarEmbeeObjectKey.IsNullable = false;
				colvarEmbeeObjectKey.IsPrimaryKey = true;
				colvarEmbeeObjectKey.IsForeignKey = false;
				colvarEmbeeObjectKey.IsReadOnly = false;
				colvarEmbeeObjectKey.DefaultSetting = @"";
				colvarEmbeeObjectKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmbeeObjectKey);
				
				TableSchema.TableColumn colvarCountry = new TableSchema.TableColumn(schema);
				colvarCountry.ColumnName = "country";
				colvarCountry.DataType = DbType.Int32;
				colvarCountry.MaxLength = 0;
				colvarCountry.AutoIncrement = false;
				colvarCountry.IsNullable = true;
				colvarCountry.IsPrimaryKey = false;
				colvarCountry.IsForeignKey = false;
				colvarCountry.IsReadOnly = false;
				colvarCountry.DefaultSetting = @"";
				colvarCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountry);
				
				TableSchema.TableColumn colvarCarrier = new TableSchema.TableColumn(schema);
				colvarCarrier.ColumnName = "carrier";
				colvarCarrier.DataType = DbType.String;
				colvarCarrier.MaxLength = 100;
				colvarCarrier.AutoIncrement = false;
				colvarCarrier.IsNullable = true;
				colvarCarrier.IsPrimaryKey = false;
				colvarCarrier.IsForeignKey = false;
				colvarCarrier.IsReadOnly = false;
				colvarCarrier.DefaultSetting = @"";
				colvarCarrier.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarrier);
				
				TableSchema.TableColumn colvarProductId = new TableSchema.TableColumn(schema);
				colvarProductId.ColumnName = "product_id";
				colvarProductId.DataType = DbType.Int32;
				colvarProductId.MaxLength = 0;
				colvarProductId.AutoIncrement = false;
				colvarProductId.IsNullable = true;
				colvarProductId.IsPrimaryKey = false;
				colvarProductId.IsForeignKey = false;
				colvarProductId.IsReadOnly = false;
				colvarProductId.DefaultSetting = @"";
				colvarProductId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductId);
				
				TableSchema.TableColumn colvarProductName = new TableSchema.TableColumn(schema);
				colvarProductName.ColumnName = "product_name";
				colvarProductName.DataType = DbType.String;
				colvarProductName.MaxLength = 100;
				colvarProductName.AutoIncrement = false;
				colvarProductName.IsNullable = true;
				colvarProductName.IsPrimaryKey = false;
				colvarProductName.IsForeignKey = false;
				colvarProductName.IsReadOnly = false;
				colvarProductName.DefaultSetting = @"";
				colvarProductName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductName);
				
				TableSchema.TableColumn colvarPriceInDollars = new TableSchema.TableColumn(schema);
				colvarPriceInDollars.ColumnName = "price_in_dollars";
				colvarPriceInDollars.DataType = DbType.Currency;
				colvarPriceInDollars.MaxLength = 0;
				colvarPriceInDollars.AutoIncrement = false;
				colvarPriceInDollars.IsNullable = true;
				colvarPriceInDollars.IsPrimaryKey = false;
				colvarPriceInDollars.IsForeignKey = false;
				colvarPriceInDollars.IsReadOnly = false;
				colvarPriceInDollars.DefaultSetting = @"";
				colvarPriceInDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceInDollars);
				
				TableSchema.TableColumn colvarTransstatus = new TableSchema.TableColumn(schema);
				colvarTransstatus.ColumnName = "transstatus";
				colvarTransstatus.DataType = DbType.Int32;
				colvarTransstatus.MaxLength = 0;
				colvarTransstatus.AutoIncrement = false;
				colvarTransstatus.IsNullable = true;
				colvarTransstatus.IsPrimaryKey = false;
				colvarTransstatus.IsForeignKey = false;
				colvarTransstatus.IsReadOnly = false;
				colvarTransstatus.DefaultSetting = @"";
				colvarTransstatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransstatus);
				
				TableSchema.TableColumn colvarTransid = new TableSchema.TableColumn(schema);
				colvarTransid.ColumnName = "transid";
				colvarTransid.DataType = DbType.Int32;
				colvarTransid.MaxLength = 0;
				colvarTransid.AutoIncrement = false;
				colvarTransid.IsNullable = true;
				colvarTransid.IsPrimaryKey = false;
				colvarTransid.IsForeignKey = false;
				colvarTransid.IsReadOnly = false;
				colvarTransid.DefaultSetting = @"";
				colvarTransid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransid);
				
				TableSchema.TableColumn colvarDateCreated = new TableSchema.TableColumn(schema);
				colvarDateCreated.ColumnName = "date_created";
				colvarDateCreated.DataType = DbType.DateTime;
				colvarDateCreated.MaxLength = 0;
				colvarDateCreated.AutoIncrement = false;
				colvarDateCreated.IsNullable = true;
				colvarDateCreated.IsPrimaryKey = false;
				colvarDateCreated.IsForeignKey = false;
				colvarDateCreated.IsReadOnly = false;
				colvarDateCreated.DefaultSetting = @"";
				colvarDateCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateCreated);
				
				TableSchema.TableColumn colvarPhonenumber = new TableSchema.TableColumn(schema);
				colvarPhonenumber.ColumnName = "phonenumber";
				colvarPhonenumber.DataType = DbType.AnsiString;
				colvarPhonenumber.MaxLength = 20;
				colvarPhonenumber.AutoIncrement = false;
				colvarPhonenumber.IsNullable = true;
				colvarPhonenumber.IsPrimaryKey = false;
				colvarPhonenumber.IsForeignKey = false;
				colvarPhonenumber.IsReadOnly = false;
				colvarPhonenumber.DefaultSetting = @"";
				colvarPhonenumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhonenumber);
				
				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "message";
				colvarMessage.DataType = DbType.String;
				colvarMessage.MaxLength = 100;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = true;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);
				
				TableSchema.TableColumn colvarDateProcessed = new TableSchema.TableColumn(schema);
				colvarDateProcessed.ColumnName = "date_processed";
				colvarDateProcessed.DataType = DbType.DateTime;
				colvarDateProcessed.MaxLength = 0;
				colvarDateProcessed.AutoIncrement = false;
				colvarDateProcessed.IsNullable = true;
				colvarDateProcessed.IsPrimaryKey = false;
				colvarDateProcessed.IsForeignKey = false;
				colvarDateProcessed.IsReadOnly = false;
				colvarDateProcessed.DefaultSetting = @"";
				colvarDateProcessed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateProcessed);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Embee_Objects",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("EmbeeObjectKey")]
		[Bindable(true)]
		public int EmbeeObjectKey 
		{
			get { return GetColumnValue<int>(Columns.EmbeeObjectKey); }
			set { SetColumnValue(Columns.EmbeeObjectKey, value); }
		}
		  
		[XmlAttribute("Country")]
		[Bindable(true)]
		public int? Country 
		{
			get { return GetColumnValue<int?>(Columns.Country); }
			set { SetColumnValue(Columns.Country, value); }
		}
		  
		[XmlAttribute("Carrier")]
		[Bindable(true)]
		public string Carrier 
		{
			get { return GetColumnValue<string>(Columns.Carrier); }
			set { SetColumnValue(Columns.Carrier, value); }
		}
		  
		[XmlAttribute("ProductId")]
		[Bindable(true)]
		public int? ProductId 
		{
			get { return GetColumnValue<int?>(Columns.ProductId); }
			set { SetColumnValue(Columns.ProductId, value); }
		}
		  
		[XmlAttribute("ProductName")]
		[Bindable(true)]
		public string ProductName 
		{
			get { return GetColumnValue<string>(Columns.ProductName); }
			set { SetColumnValue(Columns.ProductName, value); }
		}
		  
		[XmlAttribute("PriceInDollars")]
		[Bindable(true)]
		public decimal? PriceInDollars 
		{
			get { return GetColumnValue<decimal?>(Columns.PriceInDollars); }
			set { SetColumnValue(Columns.PriceInDollars, value); }
		}
		  
		[XmlAttribute("Transstatus")]
		[Bindable(true)]
		public int? Transstatus 
		{
			get { return GetColumnValue<int?>(Columns.Transstatus); }
			set { SetColumnValue(Columns.Transstatus, value); }
		}
		  
		[XmlAttribute("Transid")]
		[Bindable(true)]
		public int? Transid 
		{
			get { return GetColumnValue<int?>(Columns.Transid); }
			set { SetColumnValue(Columns.Transid, value); }
		}
		  
		[XmlAttribute("DateCreated")]
		[Bindable(true)]
		public DateTime? DateCreated 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateCreated); }
			set { SetColumnValue(Columns.DateCreated, value); }
		}
		  
		[XmlAttribute("Phonenumber")]
		[Bindable(true)]
		public string Phonenumber 
		{
			get { return GetColumnValue<string>(Columns.Phonenumber); }
			set { SetColumnValue(Columns.Phonenumber, value); }
		}
		  
		[XmlAttribute("Message")]
		[Bindable(true)]
		public string Message 
		{
			get { return GetColumnValue<string>(Columns.Message); }
			set { SetColumnValue(Columns.Message, value); }
		}
		  
		[XmlAttribute("DateProcessed")]
		[Bindable(true)]
		public DateTime? DateProcessed 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateProcessed); }
			set { SetColumnValue(Columns.DateProcessed, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varCountry,string varCarrier,int? varProductId,string varProductName,decimal? varPriceInDollars,int? varTransstatus,int? varTransid,DateTime? varDateCreated,string varPhonenumber,string varMessage,DateTime? varDateProcessed)
		{
			EmbeeObject item = new EmbeeObject();
			
			item.Country = varCountry;
			
			item.Carrier = varCarrier;
			
			item.ProductId = varProductId;
			
			item.ProductName = varProductName;
			
			item.PriceInDollars = varPriceInDollars;
			
			item.Transstatus = varTransstatus;
			
			item.Transid = varTransid;
			
			item.DateCreated = varDateCreated;
			
			item.Phonenumber = varPhonenumber;
			
			item.Message = varMessage;
			
			item.DateProcessed = varDateProcessed;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varEmbeeObjectKey,int? varCountry,string varCarrier,int? varProductId,string varProductName,decimal? varPriceInDollars,int? varTransstatus,int? varTransid,DateTime? varDateCreated,string varPhonenumber,string varMessage,DateTime? varDateProcessed)
		{
			EmbeeObject item = new EmbeeObject();
			
				item.EmbeeObjectKey = varEmbeeObjectKey;
			
				item.Country = varCountry;
			
				item.Carrier = varCarrier;
			
				item.ProductId = varProductId;
			
				item.ProductName = varProductName;
			
				item.PriceInDollars = varPriceInDollars;
			
				item.Transstatus = varTransstatus;
			
				item.Transid = varTransid;
			
				item.DateCreated = varDateCreated;
			
				item.Phonenumber = varPhonenumber;
			
				item.Message = varMessage;
			
				item.DateProcessed = varDateProcessed;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn EmbeeObjectKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CarrierColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceInDollarsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TransstatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TransidColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DateCreatedColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PhonenumberColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MessageColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DateProcessedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string EmbeeObjectKey = @"embee_object_key";
			 public static string Country = @"country";
			 public static string Carrier = @"carrier";
			 public static string ProductId = @"product_id";
			 public static string ProductName = @"product_name";
			 public static string PriceInDollars = @"price_in_dollars";
			 public static string Transstatus = @"transstatus";
			 public static string Transid = @"transid";
			 public static string DateCreated = @"date_created";
			 public static string Phonenumber = @"phonenumber";
			 public static string Message = @"message";
			 public static string DateProcessed = @"date_processed";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
