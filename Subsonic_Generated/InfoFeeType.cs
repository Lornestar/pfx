using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the InfoFeeType class.
	/// </summary>
    [Serializable]
	public partial class InfoFeeTypeCollection : ActiveList<InfoFeeType, InfoFeeTypeCollection>
	{	   
		public InfoFeeTypeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InfoFeeTypeCollection</returns>
		public InfoFeeTypeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InfoFeeType o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Info_Fee_Types table.
	/// </summary>
	[Serializable]
	public partial class InfoFeeType : ActiveRecord<InfoFeeType>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InfoFeeType()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InfoFeeType(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InfoFeeType(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InfoFeeType(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Info_Fee_Types", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInfoFeeTypes = new TableSchema.TableColumn(schema);
				colvarInfoFeeTypes.ColumnName = "info_fee_types";
				colvarInfoFeeTypes.DataType = DbType.Int32;
				colvarInfoFeeTypes.MaxLength = 0;
				colvarInfoFeeTypes.AutoIncrement = true;
				colvarInfoFeeTypes.IsNullable = false;
				colvarInfoFeeTypes.IsPrimaryKey = true;
				colvarInfoFeeTypes.IsForeignKey = false;
				colvarInfoFeeTypes.IsReadOnly = false;
				colvarInfoFeeTypes.DefaultSetting = @"";
				colvarInfoFeeTypes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoFeeTypes);
				
				TableSchema.TableColumn colvarOrganizationName = new TableSchema.TableColumn(schema);
				colvarOrganizationName.ColumnName = "organization_name";
				colvarOrganizationName.DataType = DbType.String;
				colvarOrganizationName.MaxLength = 50;
				colvarOrganizationName.AutoIncrement = false;
				colvarOrganizationName.IsNullable = false;
				colvarOrganizationName.IsPrimaryKey = false;
				colvarOrganizationName.IsForeignKey = false;
				colvarOrganizationName.IsReadOnly = false;
				colvarOrganizationName.DefaultSetting = @"";
				colvarOrganizationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrganizationName);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 100;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarFeeBase = new TableSchema.TableColumn(schema);
				colvarFeeBase.ColumnName = "fee_base";
				colvarFeeBase.DataType = DbType.Currency;
				colvarFeeBase.MaxLength = 0;
				colvarFeeBase.AutoIncrement = false;
				colvarFeeBase.IsNullable = true;
				colvarFeeBase.IsPrimaryKey = false;
				colvarFeeBase.IsForeignKey = false;
				colvarFeeBase.IsReadOnly = false;
				colvarFeeBase.DefaultSetting = @"";
				colvarFeeBase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeBase);
				
				TableSchema.TableColumn colvarFeePercentage = new TableSchema.TableColumn(schema);
				colvarFeePercentage.ColumnName = "fee_percentage";
				colvarFeePercentage.DataType = DbType.Currency;
				colvarFeePercentage.MaxLength = 0;
				colvarFeePercentage.AutoIncrement = false;
				colvarFeePercentage.IsNullable = true;
				colvarFeePercentage.IsPrimaryKey = false;
				colvarFeePercentage.IsForeignKey = false;
				colvarFeePercentage.IsReadOnly = false;
				colvarFeePercentage.DefaultSetting = @"";
				colvarFeePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeePercentage);
				
				TableSchema.TableColumn colvarFeeAddon = new TableSchema.TableColumn(schema);
				colvarFeeAddon.ColumnName = "fee_addon";
				colvarFeeAddon.DataType = DbType.Currency;
				colvarFeeAddon.MaxLength = 0;
				colvarFeeAddon.AutoIncrement = false;
				colvarFeeAddon.IsNullable = true;
				colvarFeeAddon.IsPrimaryKey = false;
				colvarFeeAddon.IsForeignKey = false;
				colvarFeeAddon.IsReadOnly = false;
				colvarFeeAddon.DefaultSetting = @"";
				colvarFeeAddon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeAddon);
				
				TableSchema.TableColumn colvarFeeMin = new TableSchema.TableColumn(schema);
				colvarFeeMin.ColumnName = "fee_min";
				colvarFeeMin.DataType = DbType.Currency;
				colvarFeeMin.MaxLength = 0;
				colvarFeeMin.AutoIncrement = false;
				colvarFeeMin.IsNullable = true;
				colvarFeeMin.IsPrimaryKey = false;
				colvarFeeMin.IsForeignKey = false;
				colvarFeeMin.IsReadOnly = false;
				colvarFeeMin.DefaultSetting = @"";
				colvarFeeMin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeMin);
				
				TableSchema.TableColumn colvarFeeMax = new TableSchema.TableColumn(schema);
				colvarFeeMax.ColumnName = "fee_max";
				colvarFeeMax.DataType = DbType.Currency;
				colvarFeeMax.MaxLength = 0;
				colvarFeeMax.AutoIncrement = false;
				colvarFeeMax.IsNullable = true;
				colvarFeeMax.IsPrimaryKey = false;
				colvarFeeMax.IsForeignKey = false;
				colvarFeeMax.IsReadOnly = false;
				colvarFeeMax.DefaultSetting = @"";
				colvarFeeMax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeMax);
				
				TableSchema.TableColumn colvarCurrency1 = new TableSchema.TableColumn(schema);
				colvarCurrency1.ColumnName = "currency1";
				colvarCurrency1.DataType = DbType.Int32;
				colvarCurrency1.MaxLength = 0;
				colvarCurrency1.AutoIncrement = false;
				colvarCurrency1.IsNullable = true;
				colvarCurrency1.IsPrimaryKey = false;
				colvarCurrency1.IsForeignKey = false;
				colvarCurrency1.IsReadOnly = false;
				colvarCurrency1.DefaultSetting = @"";
				colvarCurrency1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency1);
				
				TableSchema.TableColumn colvarCurrency2 = new TableSchema.TableColumn(schema);
				colvarCurrency2.ColumnName = "currency2";
				colvarCurrency2.DataType = DbType.Int32;
				colvarCurrency2.MaxLength = 0;
				colvarCurrency2.AutoIncrement = false;
				colvarCurrency2.IsNullable = true;
				colvarCurrency2.IsPrimaryKey = false;
				colvarCurrency2.IsForeignKey = false;
				colvarCurrency2.IsReadOnly = false;
				colvarCurrency2.DefaultSetting = @"";
				colvarCurrency2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrency2);
				
				TableSchema.TableColumn colvarExchangeRate = new TableSchema.TableColumn(schema);
				colvarExchangeRate.ColumnName = "Exchange_Rate";
				colvarExchangeRate.DataType = DbType.Decimal;
				colvarExchangeRate.MaxLength = 0;
				colvarExchangeRate.AutoIncrement = false;
				colvarExchangeRate.IsNullable = true;
				colvarExchangeRate.IsPrimaryKey = false;
				colvarExchangeRate.IsForeignKey = false;
				colvarExchangeRate.IsReadOnly = false;
				colvarExchangeRate.DefaultSetting = @"";
				colvarExchangeRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeRate);
				
				TableSchema.TableColumn colvarExchangeRateUpdated = new TableSchema.TableColumn(schema);
				colvarExchangeRateUpdated.ColumnName = "Exchange_Rate_Updated";
				colvarExchangeRateUpdated.DataType = DbType.DateTime;
				colvarExchangeRateUpdated.MaxLength = 0;
				colvarExchangeRateUpdated.AutoIncrement = false;
				colvarExchangeRateUpdated.IsNullable = true;
				colvarExchangeRateUpdated.IsPrimaryKey = false;
				colvarExchangeRateUpdated.IsForeignKey = false;
				colvarExchangeRateUpdated.IsReadOnly = false;
				colvarExchangeRateUpdated.DefaultSetting = @"";
				colvarExchangeRateUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExchangeRateUpdated);
				
				TableSchema.TableColumn colvarTreasuryType = new TableSchema.TableColumn(schema);
				colvarTreasuryType.ColumnName = "Treasury_Type";
				colvarTreasuryType.DataType = DbType.Int32;
				colvarTreasuryType.MaxLength = 0;
				colvarTreasuryType.AutoIncrement = false;
				colvarTreasuryType.IsNullable = true;
				colvarTreasuryType.IsPrimaryKey = false;
				colvarTreasuryType.IsForeignKey = false;
				colvarTreasuryType.IsReadOnly = false;
				colvarTreasuryType.DefaultSetting = @"";
				colvarTreasuryType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreasuryType);
				
				TableSchema.TableColumn colvarStandardTiming = new TableSchema.TableColumn(schema);
				colvarStandardTiming.ColumnName = "standard_timing";
				colvarStandardTiming.DataType = DbType.Int32;
				colvarStandardTiming.MaxLength = 0;
				colvarStandardTiming.AutoIncrement = false;
				colvarStandardTiming.IsNullable = true;
				colvarStandardTiming.IsPrimaryKey = false;
				colvarStandardTiming.IsForeignKey = false;
				colvarStandardTiming.IsReadOnly = false;
				colvarStandardTiming.DefaultSetting = @"";
				colvarStandardTiming.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStandardTiming);
				
				TableSchema.TableColumn colvarPremiumTiming = new TableSchema.TableColumn(schema);
				colvarPremiumTiming.ColumnName = "premium_timing";
				colvarPremiumTiming.DataType = DbType.Int32;
				colvarPremiumTiming.MaxLength = 0;
				colvarPremiumTiming.AutoIncrement = false;
				colvarPremiumTiming.IsNullable = true;
				colvarPremiumTiming.IsPrimaryKey = false;
				colvarPremiumTiming.IsForeignKey = false;
				colvarPremiumTiming.IsReadOnly = false;
				colvarPremiumTiming.DefaultSetting = @"";
				colvarPremiumTiming.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiumTiming);
				
				TableSchema.TableColumn colvarPremiumFeePercentage = new TableSchema.TableColumn(schema);
				colvarPremiumFeePercentage.ColumnName = "premium_fee_percentage";
				colvarPremiumFeePercentage.DataType = DbType.Currency;
				colvarPremiumFeePercentage.MaxLength = 0;
				colvarPremiumFeePercentage.AutoIncrement = false;
				colvarPremiumFeePercentage.IsNullable = true;
				colvarPremiumFeePercentage.IsPrimaryKey = false;
				colvarPremiumFeePercentage.IsForeignKey = false;
				colvarPremiumFeePercentage.IsReadOnly = false;
				colvarPremiumFeePercentage.DefaultSetting = @"";
				colvarPremiumFeePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiumFeePercentage);
				
				TableSchema.TableColumn colvarPremiumFeeAddon = new TableSchema.TableColumn(schema);
				colvarPremiumFeeAddon.ColumnName = "premium_fee_addon";
				colvarPremiumFeeAddon.DataType = DbType.Currency;
				colvarPremiumFeeAddon.MaxLength = 0;
				colvarPremiumFeeAddon.AutoIncrement = false;
				colvarPremiumFeeAddon.IsNullable = true;
				colvarPremiumFeeAddon.IsPrimaryKey = false;
				colvarPremiumFeeAddon.IsForeignKey = false;
				colvarPremiumFeeAddon.IsReadOnly = false;
				colvarPremiumFeeAddon.DefaultSetting = @"";
				colvarPremiumFeeAddon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiumFeeAddon);
				
				TableSchema.TableColumn colvarPremiumFeeMin = new TableSchema.TableColumn(schema);
				colvarPremiumFeeMin.ColumnName = "premium_fee_min";
				colvarPremiumFeeMin.DataType = DbType.Currency;
				colvarPremiumFeeMin.MaxLength = 0;
				colvarPremiumFeeMin.AutoIncrement = false;
				colvarPremiumFeeMin.IsNullable = true;
				colvarPremiumFeeMin.IsPrimaryKey = false;
				colvarPremiumFeeMin.IsForeignKey = false;
				colvarPremiumFeeMin.IsReadOnly = false;
				colvarPremiumFeeMin.DefaultSetting = @"";
				colvarPremiumFeeMin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiumFeeMin);
				
				TableSchema.TableColumn colvarPremiumFeeMax = new TableSchema.TableColumn(schema);
				colvarPremiumFeeMax.ColumnName = "premium_fee_max";
				colvarPremiumFeeMax.DataType = DbType.Currency;
				colvarPremiumFeeMax.MaxLength = 0;
				colvarPremiumFeeMax.AutoIncrement = false;
				colvarPremiumFeeMax.IsNullable = true;
				colvarPremiumFeeMax.IsPrimaryKey = false;
				colvarPremiumFeeMax.IsForeignKey = false;
				colvarPremiumFeeMax.IsReadOnly = false;
				colvarPremiumFeeMax.DefaultSetting = @"";
				colvarPremiumFeeMax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiumFeeMax);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Info_Fee_Types",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InfoFeeTypes")]
		[Bindable(true)]
		public int InfoFeeTypes 
		{
			get { return GetColumnValue<int>(Columns.InfoFeeTypes); }
			set { SetColumnValue(Columns.InfoFeeTypes, value); }
		}
		  
		[XmlAttribute("OrganizationName")]
		[Bindable(true)]
		public string OrganizationName 
		{
			get { return GetColumnValue<string>(Columns.OrganizationName); }
			set { SetColumnValue(Columns.OrganizationName, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("FeeBase")]
		[Bindable(true)]
		public decimal? FeeBase 
		{
			get { return GetColumnValue<decimal?>(Columns.FeeBase); }
			set { SetColumnValue(Columns.FeeBase, value); }
		}
		  
		[XmlAttribute("FeePercentage")]
		[Bindable(true)]
		public decimal? FeePercentage 
		{
			get { return GetColumnValue<decimal?>(Columns.FeePercentage); }
			set { SetColumnValue(Columns.FeePercentage, value); }
		}
		  
		[XmlAttribute("FeeAddon")]
		[Bindable(true)]
		public decimal? FeeAddon 
		{
			get { return GetColumnValue<decimal?>(Columns.FeeAddon); }
			set { SetColumnValue(Columns.FeeAddon, value); }
		}
		  
		[XmlAttribute("FeeMin")]
		[Bindable(true)]
		public decimal? FeeMin 
		{
			get { return GetColumnValue<decimal?>(Columns.FeeMin); }
			set { SetColumnValue(Columns.FeeMin, value); }
		}
		  
		[XmlAttribute("FeeMax")]
		[Bindable(true)]
		public decimal? FeeMax 
		{
			get { return GetColumnValue<decimal?>(Columns.FeeMax); }
			set { SetColumnValue(Columns.FeeMax, value); }
		}
		  
		[XmlAttribute("Currency1")]
		[Bindable(true)]
		public int? Currency1 
		{
			get { return GetColumnValue<int?>(Columns.Currency1); }
			set { SetColumnValue(Columns.Currency1, value); }
		}
		  
		[XmlAttribute("Currency2")]
		[Bindable(true)]
		public int? Currency2 
		{
			get { return GetColumnValue<int?>(Columns.Currency2); }
			set { SetColumnValue(Columns.Currency2, value); }
		}
		  
		[XmlAttribute("ExchangeRate")]
		[Bindable(true)]
		public decimal? ExchangeRate 
		{
			get { return GetColumnValue<decimal?>(Columns.ExchangeRate); }
			set { SetColumnValue(Columns.ExchangeRate, value); }
		}
		  
		[XmlAttribute("ExchangeRateUpdated")]
		[Bindable(true)]
		public DateTime? ExchangeRateUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.ExchangeRateUpdated); }
			set { SetColumnValue(Columns.ExchangeRateUpdated, value); }
		}
		  
		[XmlAttribute("TreasuryType")]
		[Bindable(true)]
		public int? TreasuryType 
		{
			get { return GetColumnValue<int?>(Columns.TreasuryType); }
			set { SetColumnValue(Columns.TreasuryType, value); }
		}
		  
		[XmlAttribute("StandardTiming")]
		[Bindable(true)]
		public int? StandardTiming 
		{
			get { return GetColumnValue<int?>(Columns.StandardTiming); }
			set { SetColumnValue(Columns.StandardTiming, value); }
		}
		  
		[XmlAttribute("PremiumTiming")]
		[Bindable(true)]
		public int? PremiumTiming 
		{
			get { return GetColumnValue<int?>(Columns.PremiumTiming); }
			set { SetColumnValue(Columns.PremiumTiming, value); }
		}
		  
		[XmlAttribute("PremiumFeePercentage")]
		[Bindable(true)]
		public decimal? PremiumFeePercentage 
		{
			get { return GetColumnValue<decimal?>(Columns.PremiumFeePercentage); }
			set { SetColumnValue(Columns.PremiumFeePercentage, value); }
		}
		  
		[XmlAttribute("PremiumFeeAddon")]
		[Bindable(true)]
		public decimal? PremiumFeeAddon 
		{
			get { return GetColumnValue<decimal?>(Columns.PremiumFeeAddon); }
			set { SetColumnValue(Columns.PremiumFeeAddon, value); }
		}
		  
		[XmlAttribute("PremiumFeeMin")]
		[Bindable(true)]
		public decimal? PremiumFeeMin 
		{
			get { return GetColumnValue<decimal?>(Columns.PremiumFeeMin); }
			set { SetColumnValue(Columns.PremiumFeeMin, value); }
		}
		  
		[XmlAttribute("PremiumFeeMax")]
		[Bindable(true)]
		public decimal? PremiumFeeMax 
		{
			get { return GetColumnValue<decimal?>(Columns.PremiumFeeMax); }
			set { SetColumnValue(Columns.PremiumFeeMax, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOrganizationName,string varDescription,decimal? varFeeBase,decimal? varFeePercentage,decimal? varFeeAddon,decimal? varFeeMin,decimal? varFeeMax,int? varCurrency1,int? varCurrency2,decimal? varExchangeRate,DateTime? varExchangeRateUpdated,int? varTreasuryType,int? varStandardTiming,int? varPremiumTiming,decimal? varPremiumFeePercentage,decimal? varPremiumFeeAddon,decimal? varPremiumFeeMin,decimal? varPremiumFeeMax)
		{
			InfoFeeType item = new InfoFeeType();
			
			item.OrganizationName = varOrganizationName;
			
			item.Description = varDescription;
			
			item.FeeBase = varFeeBase;
			
			item.FeePercentage = varFeePercentage;
			
			item.FeeAddon = varFeeAddon;
			
			item.FeeMin = varFeeMin;
			
			item.FeeMax = varFeeMax;
			
			item.Currency1 = varCurrency1;
			
			item.Currency2 = varCurrency2;
			
			item.ExchangeRate = varExchangeRate;
			
			item.ExchangeRateUpdated = varExchangeRateUpdated;
			
			item.TreasuryType = varTreasuryType;
			
			item.StandardTiming = varStandardTiming;
			
			item.PremiumTiming = varPremiumTiming;
			
			item.PremiumFeePercentage = varPremiumFeePercentage;
			
			item.PremiumFeeAddon = varPremiumFeeAddon;
			
			item.PremiumFeeMin = varPremiumFeeMin;
			
			item.PremiumFeeMax = varPremiumFeeMax;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varInfoFeeTypes,string varOrganizationName,string varDescription,decimal? varFeeBase,decimal? varFeePercentage,decimal? varFeeAddon,decimal? varFeeMin,decimal? varFeeMax,int? varCurrency1,int? varCurrency2,decimal? varExchangeRate,DateTime? varExchangeRateUpdated,int? varTreasuryType,int? varStandardTiming,int? varPremiumTiming,decimal? varPremiumFeePercentage,decimal? varPremiumFeeAddon,decimal? varPremiumFeeMin,decimal? varPremiumFeeMax)
		{
			InfoFeeType item = new InfoFeeType();
			
				item.InfoFeeTypes = varInfoFeeTypes;
			
				item.OrganizationName = varOrganizationName;
			
				item.Description = varDescription;
			
				item.FeeBase = varFeeBase;
			
				item.FeePercentage = varFeePercentage;
			
				item.FeeAddon = varFeeAddon;
			
				item.FeeMin = varFeeMin;
			
				item.FeeMax = varFeeMax;
			
				item.Currency1 = varCurrency1;
			
				item.Currency2 = varCurrency2;
			
				item.ExchangeRate = varExchangeRate;
			
				item.ExchangeRateUpdated = varExchangeRateUpdated;
			
				item.TreasuryType = varTreasuryType;
			
				item.StandardTiming = varStandardTiming;
			
				item.PremiumTiming = varPremiumTiming;
			
				item.PremiumFeePercentage = varPremiumFeePercentage;
			
				item.PremiumFeeAddon = varPremiumFeeAddon;
			
				item.PremiumFeeMin = varPremiumFeeMin;
			
				item.PremiumFeeMax = varPremiumFeeMax;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InfoFeeTypesColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrganizationNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeBaseColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FeePercentageColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeAddonColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeMinColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeMaxColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn Currency1Column
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn Currency2Column
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangeRateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ExchangeRateUpdatedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TreasuryTypeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn StandardTimingColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PremiumTimingColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PremiumFeePercentageColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PremiumFeeAddonColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn PremiumFeeMinColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn PremiumFeeMaxColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InfoFeeTypes = @"info_fee_types";
			 public static string OrganizationName = @"organization_name";
			 public static string Description = @"description";
			 public static string FeeBase = @"fee_base";
			 public static string FeePercentage = @"fee_percentage";
			 public static string FeeAddon = @"fee_addon";
			 public static string FeeMin = @"fee_min";
			 public static string FeeMax = @"fee_max";
			 public static string Currency1 = @"currency1";
			 public static string Currency2 = @"currency2";
			 public static string ExchangeRate = @"Exchange_Rate";
			 public static string ExchangeRateUpdated = @"Exchange_Rate_Updated";
			 public static string TreasuryType = @"Treasury_Type";
			 public static string StandardTiming = @"standard_timing";
			 public static string PremiumTiming = @"premium_timing";
			 public static string PremiumFeePercentage = @"premium_fee_percentage";
			 public static string PremiumFeeAddon = @"premium_fee_addon";
			 public static string PremiumFeeMin = @"premium_fee_min";
			 public static string PremiumFeeMax = @"premium_fee_max";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
