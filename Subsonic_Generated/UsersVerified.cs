using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the UsersVerified class.
	/// </summary>
    [Serializable]
	public partial class UsersVerifiedCollection : ActiveList<UsersVerified, UsersVerifiedCollection>
	{	   
		public UsersVerifiedCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UsersVerifiedCollection</returns>
		public UsersVerifiedCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UsersVerified o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Users_Verified table.
	/// </summary>
	[Serializable]
	public partial class UsersVerified : ActiveRecord<UsersVerified>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UsersVerified()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UsersVerified(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UsersVerified(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UsersVerified(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Users_Verified", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarUsersVerifiedKey = new TableSchema.TableColumn(schema);
				colvarUsersVerifiedKey.ColumnName = "users_verified_key";
				colvarUsersVerifiedKey.DataType = DbType.Int32;
				colvarUsersVerifiedKey.MaxLength = 0;
				colvarUsersVerifiedKey.AutoIncrement = true;
				colvarUsersVerifiedKey.IsNullable = false;
				colvarUsersVerifiedKey.IsPrimaryKey = true;
				colvarUsersVerifiedKey.IsForeignKey = false;
				colvarUsersVerifiedKey.IsReadOnly = false;
				colvarUsersVerifiedKey.DefaultSetting = @"";
				colvarUsersVerifiedKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsersVerifiedKey);
				
				TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
				colvarUserKey.ColumnName = "user_key";
				colvarUserKey.DataType = DbType.Int32;
				colvarUserKey.MaxLength = 0;
				colvarUserKey.AutoIncrement = false;
				colvarUserKey.IsNullable = false;
				colvarUserKey.IsPrimaryKey = false;
				colvarUserKey.IsForeignKey = false;
				colvarUserKey.IsReadOnly = false;
				colvarUserKey.DefaultSetting = @"";
				colvarUserKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserKey);
				
				TableSchema.TableColumn colvarVerificationMethodsKey = new TableSchema.TableColumn(schema);
				colvarVerificationMethodsKey.ColumnName = "verification_methods_key";
				colvarVerificationMethodsKey.DataType = DbType.Int32;
				colvarVerificationMethodsKey.MaxLength = 0;
				colvarVerificationMethodsKey.AutoIncrement = false;
				colvarVerificationMethodsKey.IsNullable = false;
				colvarVerificationMethodsKey.IsPrimaryKey = false;
				colvarVerificationMethodsKey.IsForeignKey = false;
				colvarVerificationMethodsKey.IsReadOnly = false;
				colvarVerificationMethodsKey.DefaultSetting = @"";
				colvarVerificationMethodsKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerificationMethodsKey);
				
				TableSchema.TableColumn colvarIsverified = new TableSchema.TableColumn(schema);
				colvarIsverified.ColumnName = "isverified";
				colvarIsverified.DataType = DbType.Boolean;
				colvarIsverified.MaxLength = 0;
				colvarIsverified.AutoIncrement = false;
				colvarIsverified.IsNullable = false;
				colvarIsverified.IsPrimaryKey = false;
				colvarIsverified.IsForeignKey = false;
				colvarIsverified.IsReadOnly = false;
				colvarIsverified.DefaultSetting = @"";
				colvarIsverified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsverified);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = false;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "ip_address";
				colvarIpAddress.DataType = DbType.String;
				colvarIpAddress.MaxLength = 16;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = false;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarUniqueKey = new TableSchema.TableColumn(schema);
				colvarUniqueKey.ColumnName = "unique_key";
				colvarUniqueKey.DataType = DbType.String;
				colvarUniqueKey.MaxLength = 50;
				colvarUniqueKey.AutoIncrement = false;
				colvarUniqueKey.IsNullable = true;
				colvarUniqueKey.IsPrimaryKey = false;
				colvarUniqueKey.IsForeignKey = false;
				colvarUniqueKey.IsReadOnly = false;
				colvarUniqueKey.DefaultSetting = @"";
				colvarUniqueKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUniqueKey);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Users_Verified",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("UsersVerifiedKey")]
		[Bindable(true)]
		public int UsersVerifiedKey 
		{
			get { return GetColumnValue<int>(Columns.UsersVerifiedKey); }
			set { SetColumnValue(Columns.UsersVerifiedKey, value); }
		}
		  
		[XmlAttribute("UserKey")]
		[Bindable(true)]
		public int UserKey 
		{
			get { return GetColumnValue<int>(Columns.UserKey); }
			set { SetColumnValue(Columns.UserKey, value); }
		}
		  
		[XmlAttribute("VerificationMethodsKey")]
		[Bindable(true)]
		public int VerificationMethodsKey 
		{
			get { return GetColumnValue<int>(Columns.VerificationMethodsKey); }
			set { SetColumnValue(Columns.VerificationMethodsKey, value); }
		}
		  
		[XmlAttribute("Isverified")]
		[Bindable(true)]
		public bool Isverified 
		{
			get { return GetColumnValue<bool>(Columns.Isverified); }
			set { SetColumnValue(Columns.Isverified, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime LastChanged 
		{
			get { return GetColumnValue<DateTime>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("UniqueKey")]
		[Bindable(true)]
		public string UniqueKey 
		{
			get { return GetColumnValue<string>(Columns.UniqueKey); }
			set { SetColumnValue(Columns.UniqueKey, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varUserKey,int varVerificationMethodsKey,bool varIsverified,DateTime varLastChanged,string varIpAddress,string varUniqueKey)
		{
			UsersVerified item = new UsersVerified();
			
			item.UserKey = varUserKey;
			
			item.VerificationMethodsKey = varVerificationMethodsKey;
			
			item.Isverified = varIsverified;
			
			item.LastChanged = varLastChanged;
			
			item.IpAddress = varIpAddress;
			
			item.UniqueKey = varUniqueKey;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varUsersVerifiedKey,int varUserKey,int varVerificationMethodsKey,bool varIsverified,DateTime varLastChanged,string varIpAddress,string varUniqueKey)
		{
			UsersVerified item = new UsersVerified();
			
				item.UsersVerifiedKey = varUsersVerifiedKey;
			
				item.UserKey = varUserKey;
			
				item.VerificationMethodsKey = varVerificationMethodsKey;
			
				item.Isverified = varIsverified;
			
				item.LastChanged = varLastChanged;
			
				item.IpAddress = varIpAddress;
			
				item.UniqueKey = varUniqueKey;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UsersVerifiedKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserKeyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn VerificationMethodsKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsverifiedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UniqueKeyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string UsersVerifiedKey = @"users_verified_key";
			 public static string UserKey = @"user_key";
			 public static string VerificationMethodsKey = @"verification_methods_key";
			 public static string Isverified = @"isverified";
			 public static string LastChanged = @"last_changed";
			 public static string IpAddress = @"ip_address";
			 public static string UniqueKey = @"unique_key";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
