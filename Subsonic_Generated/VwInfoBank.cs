using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    /// <summary>
    /// Strongly-typed collection for the VwInfoBank class.
    /// </summary>
    [Serializable]
    public partial class VwInfoBankCollection : ReadOnlyList<VwInfoBank, VwInfoBankCollection>
    {        
        public VwInfoBankCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_info_banks view.
    /// </summary>
    [Serializable]
    public partial class VwInfoBank : ReadOnlyRecord<VwInfoBank>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_info_banks", TableType.View, DataService.GetInstance("Peerfx"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarInfoOrganizationsKey = new TableSchema.TableColumn(schema);
                colvarInfoOrganizationsKey.ColumnName = "info_organizations_key";
                colvarInfoOrganizationsKey.DataType = DbType.Int32;
                colvarInfoOrganizationsKey.MaxLength = 0;
                colvarInfoOrganizationsKey.AutoIncrement = false;
                colvarInfoOrganizationsKey.IsNullable = false;
                colvarInfoOrganizationsKey.IsPrimaryKey = false;
                colvarInfoOrganizationsKey.IsForeignKey = false;
                colvarInfoOrganizationsKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoOrganizationsKey);
                
                TableSchema.TableColumn colvarOrganizationName = new TableSchema.TableColumn(schema);
                colvarOrganizationName.ColumnName = "organization_name";
                colvarOrganizationName.DataType = DbType.String;
                colvarOrganizationName.MaxLength = 50;
                colvarOrganizationName.AutoIncrement = false;
                colvarOrganizationName.IsNullable = false;
                colvarOrganizationName.IsPrimaryKey = false;
                colvarOrganizationName.IsForeignKey = false;
                colvarOrganizationName.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrganizationName);
                
                TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
                colvarUserKeyUpdated.ColumnName = "user_key_updated";
                colvarUserKeyUpdated.DataType = DbType.Int32;
                colvarUserKeyUpdated.MaxLength = 0;
                colvarUserKeyUpdated.AutoIncrement = false;
                colvarUserKeyUpdated.IsNullable = true;
                colvarUserKeyUpdated.IsPrimaryKey = false;
                colvarUserKeyUpdated.IsForeignKey = false;
                colvarUserKeyUpdated.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserKeyUpdated);
                
                TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
                colvarLastChanged.ColumnName = "last_changed";
                colvarLastChanged.DataType = DbType.DateTime;
                colvarLastChanged.MaxLength = 0;
                colvarLastChanged.AutoIncrement = false;
                colvarLastChanged.IsNullable = true;
                colvarLastChanged.IsPrimaryKey = false;
                colvarLastChanged.IsForeignKey = false;
                colvarLastChanged.IsReadOnly = false;
                
                schema.Columns.Add(colvarLastChanged);
                
                TableSchema.TableColumn colvarOrganizationDescription = new TableSchema.TableColumn(schema);
                colvarOrganizationDescription.ColumnName = "organization_description";
                colvarOrganizationDescription.DataType = DbType.String;
                colvarOrganizationDescription.MaxLength = 50;
                colvarOrganizationDescription.AutoIncrement = false;
                colvarOrganizationDescription.IsNullable = true;
                colvarOrganizationDescription.IsPrimaryKey = false;
                colvarOrganizationDescription.IsForeignKey = false;
                colvarOrganizationDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrganizationDescription);
                
                TableSchema.TableColumn colvarIsbank = new TableSchema.TableColumn(schema);
                colvarIsbank.ColumnName = "isbank";
                colvarIsbank.DataType = DbType.Boolean;
                colvarIsbank.MaxLength = 0;
                colvarIsbank.AutoIncrement = false;
                colvarIsbank.IsNullable = true;
                colvarIsbank.IsPrimaryKey = false;
                colvarIsbank.IsForeignKey = false;
                colvarIsbank.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsbank);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Peerfx"].AddSchema("vw_info_banks",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwInfoBank()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwInfoBank(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwInfoBank(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwInfoBank(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("InfoOrganizationsKey")]
        [Bindable(true)]
        public int InfoOrganizationsKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("info_organizations_key");
		    }
            set 
		    {
			    SetColumnValue("info_organizations_key", value);
            }
        }
	      
        [XmlAttribute("OrganizationName")]
        [Bindable(true)]
        public string OrganizationName 
	    {
		    get
		    {
			    return GetColumnValue<string>("organization_name");
		    }
            set 
		    {
			    SetColumnValue("organization_name", value);
            }
        }
	      
        [XmlAttribute("UserKeyUpdated")]
        [Bindable(true)]
        public int? UserKeyUpdated 
	    {
		    get
		    {
			    return GetColumnValue<int?>("user_key_updated");
		    }
            set 
		    {
			    SetColumnValue("user_key_updated", value);
            }
        }
	      
        [XmlAttribute("LastChanged")]
        [Bindable(true)]
        public DateTime? LastChanged 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("last_changed");
		    }
            set 
		    {
			    SetColumnValue("last_changed", value);
            }
        }
	      
        [XmlAttribute("OrganizationDescription")]
        [Bindable(true)]
        public string OrganizationDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("organization_description");
		    }
            set 
		    {
			    SetColumnValue("organization_description", value);
            }
        }
	      
        [XmlAttribute("Isbank")]
        [Bindable(true)]
        public bool? Isbank 
	    {
		    get
		    {
			    return GetColumnValue<bool?>("isbank");
		    }
            set 
		    {
			    SetColumnValue("isbank", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string InfoOrganizationsKey = @"info_organizations_key";
            
            public static string OrganizationName = @"organization_name";
            
            public static string UserKeyUpdated = @"user_key_updated";
            
            public static string LastChanged = @"last_changed";
            
            public static string OrganizationDescription = @"organization_description";
            
            public static string Isbank = @"isbank";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
