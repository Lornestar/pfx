using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    /// <summary>
    /// Strongly-typed collection for the VwTransactionsExternal class.
    /// </summary>
    [Serializable]
    public partial class VwTransactionsExternalCollection : ReadOnlyList<VwTransactionsExternal, VwTransactionsExternalCollection>
    {        
        public VwTransactionsExternalCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_Transactions_External view.
    /// </summary>
    [Serializable]
    public partial class VwTransactionsExternal : ReadOnlyRecord<VwTransactionsExternal>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_Transactions_External", TableType.View, DataService.GetInstance("Peerfx"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarTxExternalKey = new TableSchema.TableColumn(schema);
                colvarTxExternalKey.ColumnName = "tx_external_key";
                colvarTxExternalKey.DataType = DbType.Int64;
                colvarTxExternalKey.MaxLength = 0;
                colvarTxExternalKey.AutoIncrement = false;
                colvarTxExternalKey.IsNullable = false;
                colvarTxExternalKey.IsPrimaryKey = false;
                colvarTxExternalKey.IsForeignKey = false;
                colvarTxExternalKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxExternalKey);
                
                TableSchema.TableColumn colvarTxExternalType = new TableSchema.TableColumn(schema);
                colvarTxExternalType.ColumnName = "tx_external_type";
                colvarTxExternalType.DataType = DbType.Int32;
                colvarTxExternalType.MaxLength = 0;
                colvarTxExternalType.AutoIncrement = false;
                colvarTxExternalType.IsNullable = false;
                colvarTxExternalType.IsPrimaryKey = false;
                colvarTxExternalType.IsForeignKey = false;
                colvarTxExternalType.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxExternalType);
                
                TableSchema.TableColumn colvarTxExternalStatus = new TableSchema.TableColumn(schema);
                colvarTxExternalStatus.ColumnName = "tx_external_status";
                colvarTxExternalStatus.DataType = DbType.Int32;
                colvarTxExternalStatus.MaxLength = 0;
                colvarTxExternalStatus.AutoIncrement = false;
                colvarTxExternalStatus.IsNullable = false;
                colvarTxExternalStatus.IsPrimaryKey = false;
                colvarTxExternalStatus.IsForeignKey = false;
                colvarTxExternalStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxExternalStatus);
                
                TableSchema.TableColumn colvarUserKey = new TableSchema.TableColumn(schema);
                colvarUserKey.ColumnName = "user_key";
                colvarUserKey.DataType = DbType.Int32;
                colvarUserKey.MaxLength = 0;
                colvarUserKey.AutoIncrement = false;
                colvarUserKey.IsNullable = true;
                colvarUserKey.IsPrimaryKey = false;
                colvarUserKey.IsForeignKey = false;
                colvarUserKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserKey);
                
                TableSchema.TableColumn colvarCurrency = new TableSchema.TableColumn(schema);
                colvarCurrency.ColumnName = "currency";
                colvarCurrency.DataType = DbType.Int32;
                colvarCurrency.MaxLength = 0;
                colvarCurrency.AutoIncrement = false;
                colvarCurrency.IsNullable = false;
                colvarCurrency.IsPrimaryKey = false;
                colvarCurrency.IsForeignKey = false;
                colvarCurrency.IsReadOnly = false;
                
                schema.Columns.Add(colvarCurrency);
                
                TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
                colvarAmount.ColumnName = "amount";
                colvarAmount.DataType = DbType.Currency;
                colvarAmount.MaxLength = 0;
                colvarAmount.AutoIncrement = false;
                colvarAmount.IsNullable = false;
                colvarAmount.IsPrimaryKey = false;
                colvarAmount.IsForeignKey = false;
                colvarAmount.IsReadOnly = false;
                
                schema.Columns.Add(colvarAmount);
                
                TableSchema.TableColumn colvarSenderBankAccountKey = new TableSchema.TableColumn(schema);
                colvarSenderBankAccountKey.ColumnName = "sender_bank_account_key";
                colvarSenderBankAccountKey.DataType = DbType.Int32;
                colvarSenderBankAccountKey.MaxLength = 0;
                colvarSenderBankAccountKey.AutoIncrement = false;
                colvarSenderBankAccountKey.IsNullable = true;
                colvarSenderBankAccountKey.IsPrimaryKey = false;
                colvarSenderBankAccountKey.IsForeignKey = false;
                colvarSenderBankAccountKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarSenderBankAccountKey);
                
                TableSchema.TableColumn colvarReceiverBankAccountKey = new TableSchema.TableColumn(schema);
                colvarReceiverBankAccountKey.ColumnName = "receiver_bank_account_key";
                colvarReceiverBankAccountKey.DataType = DbType.Int32;
                colvarReceiverBankAccountKey.MaxLength = 0;
                colvarReceiverBankAccountKey.AutoIncrement = false;
                colvarReceiverBankAccountKey.IsNullable = true;
                colvarReceiverBankAccountKey.IsPrimaryKey = false;
                colvarReceiverBankAccountKey.IsForeignKey = false;
                colvarReceiverBankAccountKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarReceiverBankAccountKey);
                
                TableSchema.TableColumn colvarTxExternalDescription = new TableSchema.TableColumn(schema);
                colvarTxExternalDescription.ColumnName = "tx_external_description";
                colvarTxExternalDescription.DataType = DbType.String;
                colvarTxExternalDescription.MaxLength = 100;
                colvarTxExternalDescription.AutoIncrement = false;
                colvarTxExternalDescription.IsNullable = true;
                colvarTxExternalDescription.IsPrimaryKey = false;
                colvarTxExternalDescription.IsForeignKey = false;
                colvarTxExternalDescription.IsReadOnly = false;
                
                schema.Columns.Add(colvarTxExternalDescription);
                
                TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
                colvarLastChanged.ColumnName = "last_changed";
                colvarLastChanged.DataType = DbType.DateTime;
                colvarLastChanged.MaxLength = 0;
                colvarLastChanged.AutoIncrement = false;
                colvarLastChanged.IsNullable = false;
                colvarLastChanged.IsPrimaryKey = false;
                colvarLastChanged.IsForeignKey = false;
                colvarLastChanged.IsReadOnly = false;
                
                schema.Columns.Add(colvarLastChanged);
                
                TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
                colvarIpAddress.ColumnName = "ip_address";
                colvarIpAddress.DataType = DbType.String;
                colvarIpAddress.MaxLength = 16;
                colvarIpAddress.AutoIncrement = false;
                colvarIpAddress.IsNullable = false;
                colvarIpAddress.IsPrimaryKey = false;
                colvarIpAddress.IsForeignKey = false;
                colvarIpAddress.IsReadOnly = false;
                
                schema.Columns.Add(colvarIpAddress);
                
                TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
                colvarUserKeyUpdated.ColumnName = "user_key_updated";
                colvarUserKeyUpdated.DataType = DbType.Int32;
                colvarUserKeyUpdated.MaxLength = 0;
                colvarUserKeyUpdated.AutoIncrement = false;
                colvarUserKeyUpdated.IsNullable = true;
                colvarUserKeyUpdated.IsPrimaryKey = false;
                colvarUserKeyUpdated.IsForeignKey = false;
                colvarUserKeyUpdated.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserKeyUpdated);
                
                TableSchema.TableColumn colvarBankReference = new TableSchema.TableColumn(schema);
                colvarBankReference.ColumnName = "bank_reference";
                colvarBankReference.DataType = DbType.AnsiString;
                colvarBankReference.MaxLength = 100;
                colvarBankReference.AutoIncrement = false;
                colvarBankReference.IsNullable = true;
                colvarBankReference.IsPrimaryKey = false;
                colvarBankReference.IsForeignKey = false;
                colvarBankReference.IsReadOnly = false;
                
                schema.Columns.Add(colvarBankReference);
                
                TableSchema.TableColumn colvarInfoCurrenciesKey = new TableSchema.TableColumn(schema);
                colvarInfoCurrenciesKey.ColumnName = "info_currencies_key";
                colvarInfoCurrenciesKey.DataType = DbType.Int32;
                colvarInfoCurrenciesKey.MaxLength = 0;
                colvarInfoCurrenciesKey.AutoIncrement = false;
                colvarInfoCurrenciesKey.IsNullable = false;
                colvarInfoCurrenciesKey.IsPrimaryKey = false;
                colvarInfoCurrenciesKey.IsForeignKey = false;
                colvarInfoCurrenciesKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrenciesKey);
                
                TableSchema.TableColumn colvarInfoCurrencyCode = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCode.ColumnName = "info_currency_code";
                colvarInfoCurrencyCode.DataType = DbType.String;
                colvarInfoCurrencyCode.MaxLength = 3;
                colvarInfoCurrencyCode.AutoIncrement = false;
                colvarInfoCurrencyCode.IsNullable = false;
                colvarInfoCurrencyCode.IsPrimaryKey = false;
                colvarInfoCurrencyCode.IsForeignKey = false;
                colvarInfoCurrencyCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCode);
                
                TableSchema.TableColumn colvarInfoCurrencyName = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyName.ColumnName = "info_currency_name";
                colvarInfoCurrencyName.DataType = DbType.String;
                colvarInfoCurrencyName.MaxLength = 50;
                colvarInfoCurrencyName.AutoIncrement = false;
                colvarInfoCurrencyName.IsNullable = false;
                colvarInfoCurrencyName.IsPrimaryKey = false;
                colvarInfoCurrencyName.IsForeignKey = false;
                colvarInfoCurrencyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyName);
                
                TableSchema.TableColumn colvarInfoCurrencyCountry = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCountry.ColumnName = "info_currency_country";
                colvarInfoCurrencyCountry.DataType = DbType.String;
                colvarInfoCurrencyCountry.MaxLength = 50;
                colvarInfoCurrencyCountry.AutoIncrement = false;
                colvarInfoCurrencyCountry.IsNullable = false;
                colvarInfoCurrencyCountry.IsPrimaryKey = false;
                colvarInfoCurrencyCountry.IsForeignKey = false;
                colvarInfoCurrencyCountry.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCountry);
                
                TableSchema.TableColumn colvarSenderBankName = new TableSchema.TableColumn(schema);
                colvarSenderBankName.ColumnName = "sender_bank_name";
                colvarSenderBankName.DataType = DbType.String;
                colvarSenderBankName.MaxLength = 50;
                colvarSenderBankName.AutoIncrement = false;
                colvarSenderBankName.IsNullable = true;
                colvarSenderBankName.IsPrimaryKey = false;
                colvarSenderBankName.IsForeignKey = false;
                colvarSenderBankName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSenderBankName);
                
                TableSchema.TableColumn colvarSenderBankAccount = new TableSchema.TableColumn(schema);
                colvarSenderBankAccount.ColumnName = "sender_bank_account";
                colvarSenderBankAccount.DataType = DbType.AnsiString;
                colvarSenderBankAccount.MaxLength = 50;
                colvarSenderBankAccount.AutoIncrement = false;
                colvarSenderBankAccount.IsNullable = true;
                colvarSenderBankAccount.IsPrimaryKey = false;
                colvarSenderBankAccount.IsForeignKey = false;
                colvarSenderBankAccount.IsReadOnly = false;
                
                schema.Columns.Add(colvarSenderBankAccount);
                
                TableSchema.TableColumn colvarReceiverBankName = new TableSchema.TableColumn(schema);
                colvarReceiverBankName.ColumnName = "receiver_bank_name";
                colvarReceiverBankName.DataType = DbType.String;
                colvarReceiverBankName.MaxLength = 50;
                colvarReceiverBankName.AutoIncrement = false;
                colvarReceiverBankName.IsNullable = true;
                colvarReceiverBankName.IsPrimaryKey = false;
                colvarReceiverBankName.IsForeignKey = false;
                colvarReceiverBankName.IsReadOnly = false;
                
                schema.Columns.Add(colvarReceiverBankName);
                
                TableSchema.TableColumn colvarReceiverBankAccount = new TableSchema.TableColumn(schema);
                colvarReceiverBankAccount.ColumnName = "receiver_bank_account";
                colvarReceiverBankAccount.DataType = DbType.AnsiString;
                colvarReceiverBankAccount.MaxLength = 50;
                colvarReceiverBankAccount.AutoIncrement = false;
                colvarReceiverBankAccount.IsNullable = true;
                colvarReceiverBankAccount.IsPrimaryKey = false;
                colvarReceiverBankAccount.IsForeignKey = false;
                colvarReceiverBankAccount.IsReadOnly = false;
                
                schema.Columns.Add(colvarReceiverBankAccount);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Peerfx"].AddSchema("vw_Transactions_External",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwTransactionsExternal()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwTransactionsExternal(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwTransactionsExternal(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwTransactionsExternal(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("TxExternalKey")]
        [Bindable(true)]
        public long TxExternalKey 
	    {
		    get
		    {
			    return GetColumnValue<long>("tx_external_key");
		    }
            set 
		    {
			    SetColumnValue("tx_external_key", value);
            }
        }
	      
        [XmlAttribute("TxExternalType")]
        [Bindable(true)]
        public int TxExternalType 
	    {
		    get
		    {
			    return GetColumnValue<int>("tx_external_type");
		    }
            set 
		    {
			    SetColumnValue("tx_external_type", value);
            }
        }
	      
        [XmlAttribute("TxExternalStatus")]
        [Bindable(true)]
        public int TxExternalStatus 
	    {
		    get
		    {
			    return GetColumnValue<int>("tx_external_status");
		    }
            set 
		    {
			    SetColumnValue("tx_external_status", value);
            }
        }
	      
        [XmlAttribute("UserKey")]
        [Bindable(true)]
        public int? UserKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("user_key");
		    }
            set 
		    {
			    SetColumnValue("user_key", value);
            }
        }
	      
        [XmlAttribute("Currency")]
        [Bindable(true)]
        public int Currency 
	    {
		    get
		    {
			    return GetColumnValue<int>("currency");
		    }
            set 
		    {
			    SetColumnValue("currency", value);
            }
        }
	      
        [XmlAttribute("Amount")]
        [Bindable(true)]
        public decimal Amount 
	    {
		    get
		    {
			    return GetColumnValue<decimal>("amount");
		    }
            set 
		    {
			    SetColumnValue("amount", value);
            }
        }
	      
        [XmlAttribute("SenderBankAccountKey")]
        [Bindable(true)]
        public int? SenderBankAccountKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("sender_bank_account_key");
		    }
            set 
		    {
			    SetColumnValue("sender_bank_account_key", value);
            }
        }
	      
        [XmlAttribute("ReceiverBankAccountKey")]
        [Bindable(true)]
        public int? ReceiverBankAccountKey 
	    {
		    get
		    {
			    return GetColumnValue<int?>("receiver_bank_account_key");
		    }
            set 
		    {
			    SetColumnValue("receiver_bank_account_key", value);
            }
        }
	      
        [XmlAttribute("TxExternalDescription")]
        [Bindable(true)]
        public string TxExternalDescription 
	    {
		    get
		    {
			    return GetColumnValue<string>("tx_external_description");
		    }
            set 
		    {
			    SetColumnValue("tx_external_description", value);
            }
        }
	      
        [XmlAttribute("LastChanged")]
        [Bindable(true)]
        public DateTime LastChanged 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("last_changed");
		    }
            set 
		    {
			    SetColumnValue("last_changed", value);
            }
        }
	      
        [XmlAttribute("IpAddress")]
        [Bindable(true)]
        public string IpAddress 
	    {
		    get
		    {
			    return GetColumnValue<string>("ip_address");
		    }
            set 
		    {
			    SetColumnValue("ip_address", value);
            }
        }
	      
        [XmlAttribute("UserKeyUpdated")]
        [Bindable(true)]
        public int? UserKeyUpdated 
	    {
		    get
		    {
			    return GetColumnValue<int?>("user_key_updated");
		    }
            set 
		    {
			    SetColumnValue("user_key_updated", value);
            }
        }
	      
        [XmlAttribute("BankReference")]
        [Bindable(true)]
        public string BankReference 
	    {
		    get
		    {
			    return GetColumnValue<string>("bank_reference");
		    }
            set 
		    {
			    SetColumnValue("bank_reference", value);
            }
        }
	      
        [XmlAttribute("InfoCurrenciesKey")]
        [Bindable(true)]
        public int InfoCurrenciesKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("info_currencies_key");
		    }
            set 
		    {
			    SetColumnValue("info_currencies_key", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCode")]
        [Bindable(true)]
        public string InfoCurrencyCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_code");
		    }
            set 
		    {
			    SetColumnValue("info_currency_code", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyName")]
        [Bindable(true)]
        public string InfoCurrencyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_name");
		    }
            set 
		    {
			    SetColumnValue("info_currency_name", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCountry")]
        [Bindable(true)]
        public string InfoCurrencyCountry 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_country");
		    }
            set 
		    {
			    SetColumnValue("info_currency_country", value);
            }
        }
	      
        [XmlAttribute("SenderBankName")]
        [Bindable(true)]
        public string SenderBankName 
	    {
		    get
		    {
			    return GetColumnValue<string>("sender_bank_name");
		    }
            set 
		    {
			    SetColumnValue("sender_bank_name", value);
            }
        }
	      
        [XmlAttribute("SenderBankAccount")]
        [Bindable(true)]
        public string SenderBankAccount 
	    {
		    get
		    {
			    return GetColumnValue<string>("sender_bank_account");
		    }
            set 
		    {
			    SetColumnValue("sender_bank_account", value);
            }
        }
	      
        [XmlAttribute("ReceiverBankName")]
        [Bindable(true)]
        public string ReceiverBankName 
	    {
		    get
		    {
			    return GetColumnValue<string>("receiver_bank_name");
		    }
            set 
		    {
			    SetColumnValue("receiver_bank_name", value);
            }
        }
	      
        [XmlAttribute("ReceiverBankAccount")]
        [Bindable(true)]
        public string ReceiverBankAccount 
	    {
		    get
		    {
			    return GetColumnValue<string>("receiver_bank_account");
		    }
            set 
		    {
			    SetColumnValue("receiver_bank_account", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string TxExternalKey = @"tx_external_key";
            
            public static string TxExternalType = @"tx_external_type";
            
            public static string TxExternalStatus = @"tx_external_status";
            
            public static string UserKey = @"user_key";
            
            public static string Currency = @"currency";
            
            public static string Amount = @"amount";
            
            public static string SenderBankAccountKey = @"sender_bank_account_key";
            
            public static string ReceiverBankAccountKey = @"receiver_bank_account_key";
            
            public static string TxExternalDescription = @"tx_external_description";
            
            public static string LastChanged = @"last_changed";
            
            public static string IpAddress = @"ip_address";
            
            public static string UserKeyUpdated = @"user_key_updated";
            
            public static string BankReference = @"bank_reference";
            
            public static string InfoCurrenciesKey = @"info_currencies_key";
            
            public static string InfoCurrencyCode = @"info_currency_code";
            
            public static string InfoCurrencyName = @"info_currency_name";
            
            public static string InfoCurrencyCountry = @"info_currency_country";
            
            public static string SenderBankName = @"sender_bank_name";
            
            public static string SenderBankAccount = @"sender_bank_account";
            
            public static string ReceiverBankName = @"receiver_bank_name";
            
            public static string ReceiverBankAccount = @"receiver_bank_account";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
