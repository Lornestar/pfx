using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB
{
	/// <summary>
	/// Strongly-typed collection for the InfoCurrency class.
	/// </summary>
    [Serializable]
	public partial class InfoCurrencyCollection : ActiveList<InfoCurrency, InfoCurrencyCollection>
	{	   
		public InfoCurrencyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InfoCurrencyCollection</returns>
		public InfoCurrencyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InfoCurrency o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Info_Currencies table.
	/// </summary>
	[Serializable]
	public partial class InfoCurrency : ActiveRecord<InfoCurrency>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InfoCurrency()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InfoCurrency(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InfoCurrency(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InfoCurrency(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Info_Currencies", TableType.Table, DataService.GetInstance("Peerfx"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInfoCurrenciesKey = new TableSchema.TableColumn(schema);
				colvarInfoCurrenciesKey.ColumnName = "info_currencies_key";
				colvarInfoCurrenciesKey.DataType = DbType.Int32;
				colvarInfoCurrenciesKey.MaxLength = 0;
				colvarInfoCurrenciesKey.AutoIncrement = false;
				colvarInfoCurrenciesKey.IsNullable = false;
				colvarInfoCurrenciesKey.IsPrimaryKey = true;
				colvarInfoCurrenciesKey.IsForeignKey = false;
				colvarInfoCurrenciesKey.IsReadOnly = false;
				colvarInfoCurrenciesKey.DefaultSetting = @"";
				colvarInfoCurrenciesKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrenciesKey);
				
				TableSchema.TableColumn colvarInfoCurrencyCode = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyCode.ColumnName = "info_currency_code";
				colvarInfoCurrencyCode.DataType = DbType.String;
				colvarInfoCurrencyCode.MaxLength = 3;
				colvarInfoCurrencyCode.AutoIncrement = false;
				colvarInfoCurrencyCode.IsNullable = false;
				colvarInfoCurrencyCode.IsPrimaryKey = false;
				colvarInfoCurrencyCode.IsForeignKey = false;
				colvarInfoCurrencyCode.IsReadOnly = false;
				colvarInfoCurrencyCode.DefaultSetting = @"";
				colvarInfoCurrencyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyCode);
				
				TableSchema.TableColumn colvarInfoCurrencyName = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyName.ColumnName = "info_currency_name";
				colvarInfoCurrencyName.DataType = DbType.String;
				colvarInfoCurrencyName.MaxLength = 50;
				colvarInfoCurrencyName.AutoIncrement = false;
				colvarInfoCurrencyName.IsNullable = false;
				colvarInfoCurrencyName.IsPrimaryKey = false;
				colvarInfoCurrencyName.IsForeignKey = false;
				colvarInfoCurrencyName.IsReadOnly = false;
				colvarInfoCurrencyName.DefaultSetting = @"";
				colvarInfoCurrencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyName);
				
				TableSchema.TableColumn colvarInfoCurrencyCountry = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyCountry.ColumnName = "info_currency_country";
				colvarInfoCurrencyCountry.DataType = DbType.String;
				colvarInfoCurrencyCountry.MaxLength = 50;
				colvarInfoCurrencyCountry.AutoIncrement = false;
				colvarInfoCurrencyCountry.IsNullable = false;
				colvarInfoCurrencyCountry.IsPrimaryKey = false;
				colvarInfoCurrencyCountry.IsForeignKey = false;
				colvarInfoCurrencyCountry.IsReadOnly = false;
				colvarInfoCurrencyCountry.DefaultSetting = @"";
				colvarInfoCurrencyCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyCountry);
				
				TableSchema.TableColumn colvarInfoCurrencyCansell = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyCansell.ColumnName = "info_currency_cansell";
				colvarInfoCurrencyCansell.DataType = DbType.Boolean;
				colvarInfoCurrencyCansell.MaxLength = 0;
				colvarInfoCurrencyCansell.AutoIncrement = false;
				colvarInfoCurrencyCansell.IsNullable = true;
				colvarInfoCurrencyCansell.IsPrimaryKey = false;
				colvarInfoCurrencyCansell.IsForeignKey = false;
				colvarInfoCurrencyCansell.IsReadOnly = false;
				colvarInfoCurrencyCansell.DefaultSetting = @"";
				colvarInfoCurrencyCansell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyCansell);
				
				TableSchema.TableColumn colvarInfoCurrencyCanbuy = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyCanbuy.ColumnName = "info_currency_canbuy";
				colvarInfoCurrencyCanbuy.DataType = DbType.Boolean;
				colvarInfoCurrencyCanbuy.MaxLength = 0;
				colvarInfoCurrencyCanbuy.AutoIncrement = false;
				colvarInfoCurrencyCanbuy.IsNullable = true;
				colvarInfoCurrencyCanbuy.IsPrimaryKey = false;
				colvarInfoCurrencyCanbuy.IsForeignKey = false;
				colvarInfoCurrencyCanbuy.IsReadOnly = false;
				colvarInfoCurrencyCanbuy.DefaultSetting = @"";
				colvarInfoCurrencyCanbuy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyCanbuy);
				
				TableSchema.TableColumn colvarInfoCurrencySymbol = new TableSchema.TableColumn(schema);
				colvarInfoCurrencySymbol.ColumnName = "info_currency_symbol";
				colvarInfoCurrencySymbol.DataType = DbType.String;
				colvarInfoCurrencySymbol.MaxLength = 3;
				colvarInfoCurrencySymbol.AutoIncrement = false;
				colvarInfoCurrencySymbol.IsNullable = true;
				colvarInfoCurrencySymbol.IsPrimaryKey = false;
				colvarInfoCurrencySymbol.IsForeignKey = false;
				colvarInfoCurrencySymbol.IsReadOnly = false;
				colvarInfoCurrencySymbol.DefaultSetting = @"";
				colvarInfoCurrencySymbol.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencySymbol);
				
				TableSchema.TableColumn colvarInfoCurrencyDescription = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyDescription.ColumnName = "info_currency_description";
				colvarInfoCurrencyDescription.DataType = DbType.String;
				colvarInfoCurrencyDescription.MaxLength = 50;
				colvarInfoCurrencyDescription.AutoIncrement = false;
				colvarInfoCurrencyDescription.IsNullable = true;
				colvarInfoCurrencyDescription.IsPrimaryKey = false;
				colvarInfoCurrencyDescription.IsForeignKey = false;
				colvarInfoCurrencyDescription.IsReadOnly = false;
				colvarInfoCurrencyDescription.DefaultSetting = @"";
				colvarInfoCurrencyDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyDescription);
				
				TableSchema.TableColumn colvarInfoCurrencyCountrykey = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyCountrykey.ColumnName = "info_currency_countrykey";
				colvarInfoCurrencyCountrykey.DataType = DbType.Int32;
				colvarInfoCurrencyCountrykey.MaxLength = 0;
				colvarInfoCurrencyCountrykey.AutoIncrement = false;
				colvarInfoCurrencyCountrykey.IsNullable = true;
				colvarInfoCurrencyCountrykey.IsPrimaryKey = false;
				colvarInfoCurrencyCountrykey.IsForeignKey = false;
				colvarInfoCurrencyCountrykey.IsReadOnly = false;
				colvarInfoCurrencyCountrykey.DefaultSetting = @"";
				colvarInfoCurrencyCountrykey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyCountrykey);
				
				TableSchema.TableColumn colvarAllowLocalBankaccount = new TableSchema.TableColumn(schema);
				colvarAllowLocalBankaccount.ColumnName = "allow_local_bankaccount";
				colvarAllowLocalBankaccount.DataType = DbType.Boolean;
				colvarAllowLocalBankaccount.MaxLength = 0;
				colvarAllowLocalBankaccount.AutoIncrement = false;
				colvarAllowLocalBankaccount.IsNullable = true;
				colvarAllowLocalBankaccount.IsPrimaryKey = false;
				colvarAllowLocalBankaccount.IsForeignKey = false;
				colvarAllowLocalBankaccount.IsReadOnly = false;
				colvarAllowLocalBankaccount.DefaultSetting = @"";
				colvarAllowLocalBankaccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowLocalBankaccount);
				
				TableSchema.TableColumn colvarVerifyBankAccount = new TableSchema.TableColumn(schema);
				colvarVerifyBankAccount.ColumnName = "verify_bank_account";
				colvarVerifyBankAccount.DataType = DbType.Boolean;
				colvarVerifyBankAccount.MaxLength = 0;
				colvarVerifyBankAccount.AutoIncrement = false;
				colvarVerifyBankAccount.IsNullable = true;
				colvarVerifyBankAccount.IsPrimaryKey = false;
				colvarVerifyBankAccount.IsForeignKey = false;
				colvarVerifyBankAccount.IsReadOnly = false;
				colvarVerifyBankAccount.DefaultSetting = @"";
				colvarVerifyBankAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerifyBankAccount);
				
				TableSchema.TableColumn colvarInfoCurrencyCanhold = new TableSchema.TableColumn(schema);
				colvarInfoCurrencyCanhold.ColumnName = "info_currency_canhold";
				colvarInfoCurrencyCanhold.DataType = DbType.Boolean;
				colvarInfoCurrencyCanhold.MaxLength = 0;
				colvarInfoCurrencyCanhold.AutoIncrement = false;
				colvarInfoCurrencyCanhold.IsNullable = true;
				colvarInfoCurrencyCanhold.IsPrimaryKey = false;
				colvarInfoCurrencyCanhold.IsForeignKey = false;
				colvarInfoCurrencyCanhold.IsReadOnly = false;
				colvarInfoCurrencyCanhold.DefaultSetting = @"";
				colvarInfoCurrencyCanhold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInfoCurrencyCanhold);
				
				TableSchema.TableColumn colvarCurrencycloudCutoff = new TableSchema.TableColumn(schema);
				colvarCurrencycloudCutoff.ColumnName = "currencycloud_cutoff";
				colvarCurrencycloudCutoff.DataType = DbType.Int32;
				colvarCurrencycloudCutoff.MaxLength = 0;
				colvarCurrencycloudCutoff.AutoIncrement = false;
				colvarCurrencycloudCutoff.IsNullable = true;
				colvarCurrencycloudCutoff.IsPrimaryKey = false;
				colvarCurrencycloudCutoff.IsForeignKey = false;
				colvarCurrencycloudCutoff.IsReadOnly = false;
				colvarCurrencycloudCutoff.DefaultSetting = @"";
				colvarCurrencycloudCutoff.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrencycloudCutoff);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Peerfx"].AddSchema("Info_Currencies",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InfoCurrenciesKey")]
		[Bindable(true)]
		public int InfoCurrenciesKey 
		{
			get { return GetColumnValue<int>(Columns.InfoCurrenciesKey); }
			set { SetColumnValue(Columns.InfoCurrenciesKey, value); }
		}
		  
		[XmlAttribute("InfoCurrencyCode")]
		[Bindable(true)]
		public string InfoCurrencyCode 
		{
			get { return GetColumnValue<string>(Columns.InfoCurrencyCode); }
			set { SetColumnValue(Columns.InfoCurrencyCode, value); }
		}
		  
		[XmlAttribute("InfoCurrencyName")]
		[Bindable(true)]
		public string InfoCurrencyName 
		{
			get { return GetColumnValue<string>(Columns.InfoCurrencyName); }
			set { SetColumnValue(Columns.InfoCurrencyName, value); }
		}
		  
		[XmlAttribute("InfoCurrencyCountry")]
		[Bindable(true)]
		public string InfoCurrencyCountry 
		{
			get { return GetColumnValue<string>(Columns.InfoCurrencyCountry); }
			set { SetColumnValue(Columns.InfoCurrencyCountry, value); }
		}
		  
		[XmlAttribute("InfoCurrencyCansell")]
		[Bindable(true)]
		public bool? InfoCurrencyCansell 
		{
			get { return GetColumnValue<bool?>(Columns.InfoCurrencyCansell); }
			set { SetColumnValue(Columns.InfoCurrencyCansell, value); }
		}
		  
		[XmlAttribute("InfoCurrencyCanbuy")]
		[Bindable(true)]
		public bool? InfoCurrencyCanbuy 
		{
			get { return GetColumnValue<bool?>(Columns.InfoCurrencyCanbuy); }
			set { SetColumnValue(Columns.InfoCurrencyCanbuy, value); }
		}
		  
		[XmlAttribute("InfoCurrencySymbol")]
		[Bindable(true)]
		public string InfoCurrencySymbol 
		{
			get { return GetColumnValue<string>(Columns.InfoCurrencySymbol); }
			set { SetColumnValue(Columns.InfoCurrencySymbol, value); }
		}
		  
		[XmlAttribute("InfoCurrencyDescription")]
		[Bindable(true)]
		public string InfoCurrencyDescription 
		{
			get { return GetColumnValue<string>(Columns.InfoCurrencyDescription); }
			set { SetColumnValue(Columns.InfoCurrencyDescription, value); }
		}
		  
		[XmlAttribute("InfoCurrencyCountrykey")]
		[Bindable(true)]
		public int? InfoCurrencyCountrykey 
		{
			get { return GetColumnValue<int?>(Columns.InfoCurrencyCountrykey); }
			set { SetColumnValue(Columns.InfoCurrencyCountrykey, value); }
		}
		  
		[XmlAttribute("AllowLocalBankaccount")]
		[Bindable(true)]
		public bool? AllowLocalBankaccount 
		{
			get { return GetColumnValue<bool?>(Columns.AllowLocalBankaccount); }
			set { SetColumnValue(Columns.AllowLocalBankaccount, value); }
		}
		  
		[XmlAttribute("VerifyBankAccount")]
		[Bindable(true)]
		public bool? VerifyBankAccount 
		{
			get { return GetColumnValue<bool?>(Columns.VerifyBankAccount); }
			set { SetColumnValue(Columns.VerifyBankAccount, value); }
		}
		  
		[XmlAttribute("InfoCurrencyCanhold")]
		[Bindable(true)]
		public bool? InfoCurrencyCanhold 
		{
			get { return GetColumnValue<bool?>(Columns.InfoCurrencyCanhold); }
			set { SetColumnValue(Columns.InfoCurrencyCanhold, value); }
		}
		  
		[XmlAttribute("CurrencycloudCutoff")]
		[Bindable(true)]
		public int? CurrencycloudCutoff 
		{
			get { return GetColumnValue<int?>(Columns.CurrencycloudCutoff); }
			set { SetColumnValue(Columns.CurrencycloudCutoff, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varInfoCurrenciesKey,string varInfoCurrencyCode,string varInfoCurrencyName,string varInfoCurrencyCountry,bool? varInfoCurrencyCansell,bool? varInfoCurrencyCanbuy,string varInfoCurrencySymbol,string varInfoCurrencyDescription,int? varInfoCurrencyCountrykey,bool? varAllowLocalBankaccount,bool? varVerifyBankAccount,bool? varInfoCurrencyCanhold,int? varCurrencycloudCutoff)
		{
			InfoCurrency item = new InfoCurrency();
			
			item.InfoCurrenciesKey = varInfoCurrenciesKey;
			
			item.InfoCurrencyCode = varInfoCurrencyCode;
			
			item.InfoCurrencyName = varInfoCurrencyName;
			
			item.InfoCurrencyCountry = varInfoCurrencyCountry;
			
			item.InfoCurrencyCansell = varInfoCurrencyCansell;
			
			item.InfoCurrencyCanbuy = varInfoCurrencyCanbuy;
			
			item.InfoCurrencySymbol = varInfoCurrencySymbol;
			
			item.InfoCurrencyDescription = varInfoCurrencyDescription;
			
			item.InfoCurrencyCountrykey = varInfoCurrencyCountrykey;
			
			item.AllowLocalBankaccount = varAllowLocalBankaccount;
			
			item.VerifyBankAccount = varVerifyBankAccount;
			
			item.InfoCurrencyCanhold = varInfoCurrencyCanhold;
			
			item.CurrencycloudCutoff = varCurrencycloudCutoff;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varInfoCurrenciesKey,string varInfoCurrencyCode,string varInfoCurrencyName,string varInfoCurrencyCountry,bool? varInfoCurrencyCansell,bool? varInfoCurrencyCanbuy,string varInfoCurrencySymbol,string varInfoCurrencyDescription,int? varInfoCurrencyCountrykey,bool? varAllowLocalBankaccount,bool? varVerifyBankAccount,bool? varInfoCurrencyCanhold,int? varCurrencycloudCutoff)
		{
			InfoCurrency item = new InfoCurrency();
			
				item.InfoCurrenciesKey = varInfoCurrenciesKey;
			
				item.InfoCurrencyCode = varInfoCurrencyCode;
			
				item.InfoCurrencyName = varInfoCurrencyName;
			
				item.InfoCurrencyCountry = varInfoCurrencyCountry;
			
				item.InfoCurrencyCansell = varInfoCurrencyCansell;
			
				item.InfoCurrencyCanbuy = varInfoCurrencyCanbuy;
			
				item.InfoCurrencySymbol = varInfoCurrencySymbol;
			
				item.InfoCurrencyDescription = varInfoCurrencyDescription;
			
				item.InfoCurrencyCountrykey = varInfoCurrencyCountrykey;
			
				item.AllowLocalBankaccount = varAllowLocalBankaccount;
			
				item.VerifyBankAccount = varVerifyBankAccount;
			
				item.InfoCurrencyCanhold = varInfoCurrencyCanhold;
			
				item.CurrencycloudCutoff = varCurrencycloudCutoff;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InfoCurrenciesKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyCountryColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyCansellColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyCanbuyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencySymbolColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyDescriptionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyCountrykeyColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowLocalBankaccountColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn VerifyBankAccountColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn InfoCurrencyCanholdColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrencycloudCutoffColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InfoCurrenciesKey = @"info_currencies_key";
			 public static string InfoCurrencyCode = @"info_currency_code";
			 public static string InfoCurrencyName = @"info_currency_name";
			 public static string InfoCurrencyCountry = @"info_currency_country";
			 public static string InfoCurrencyCansell = @"info_currency_cansell";
			 public static string InfoCurrencyCanbuy = @"info_currency_canbuy";
			 public static string InfoCurrencySymbol = @"info_currency_symbol";
			 public static string InfoCurrencyDescription = @"info_currency_description";
			 public static string InfoCurrencyCountrykey = @"info_currency_countrykey";
			 public static string AllowLocalBankaccount = @"allow_local_bankaccount";
			 public static string VerifyBankAccount = @"verify_bank_account";
			 public static string InfoCurrencyCanhold = @"info_currency_canhold";
			 public static string CurrencycloudCutoff = @"currencycloud_cutoff";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
