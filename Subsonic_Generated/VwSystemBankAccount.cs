using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Peerfx_DB{
    /// <summary>
    /// Strongly-typed collection for the VwSystemBankAccount class.
    /// </summary>
    [Serializable]
    public partial class VwSystemBankAccountCollection : ReadOnlyList<VwSystemBankAccount, VwSystemBankAccountCollection>
    {        
        public VwSystemBankAccountCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the vw_System_Bank_Accounts view.
    /// </summary>
    [Serializable]
    public partial class VwSystemBankAccount : ReadOnlyRecord<VwSystemBankAccount>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("vw_System_Bank_Accounts", TableType.View, DataService.GetInstance("Peerfx"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarBankName = new TableSchema.TableColumn(schema);
                colvarBankName.ColumnName = "bank_name";
                colvarBankName.DataType = DbType.String;
                colvarBankName.MaxLength = 50;
                colvarBankName.AutoIncrement = false;
                colvarBankName.IsNullable = false;
                colvarBankName.IsPrimaryKey = false;
                colvarBankName.IsForeignKey = false;
                colvarBankName.IsReadOnly = false;
                
                schema.Columns.Add(colvarBankName);
                
                TableSchema.TableColumn colvarBankKey = new TableSchema.TableColumn(schema);
                colvarBankKey.ColumnName = "bank_key";
                colvarBankKey.DataType = DbType.Int32;
                colvarBankKey.MaxLength = 0;
                colvarBankKey.AutoIncrement = false;
                colvarBankKey.IsNullable = false;
                colvarBankKey.IsPrimaryKey = false;
                colvarBankKey.IsForeignKey = false;
                colvarBankKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarBankKey);
                
                TableSchema.TableColumn colvarBankAccount = new TableSchema.TableColumn(schema);
                colvarBankAccount.ColumnName = "bank_account";
                colvarBankAccount.DataType = DbType.AnsiString;
                colvarBankAccount.MaxLength = 20;
                colvarBankAccount.AutoIncrement = false;
                colvarBankAccount.IsNullable = false;
                colvarBankAccount.IsPrimaryKey = false;
                colvarBankAccount.IsForeignKey = false;
                colvarBankAccount.IsReadOnly = false;
                
                schema.Columns.Add(colvarBankAccount);
                
                TableSchema.TableColumn colvarInfoCurrenciesKey = new TableSchema.TableColumn(schema);
                colvarInfoCurrenciesKey.ColumnName = "info_currencies_key";
                colvarInfoCurrenciesKey.DataType = DbType.Int32;
                colvarInfoCurrenciesKey.MaxLength = 0;
                colvarInfoCurrenciesKey.AutoIncrement = false;
                colvarInfoCurrenciesKey.IsNullable = false;
                colvarInfoCurrenciesKey.IsPrimaryKey = false;
                colvarInfoCurrenciesKey.IsForeignKey = false;
                colvarInfoCurrenciesKey.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrenciesKey);
                
                TableSchema.TableColumn colvarInfoCurrencyCode = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyCode.ColumnName = "info_currency_code";
                colvarInfoCurrencyCode.DataType = DbType.String;
                colvarInfoCurrencyCode.MaxLength = 3;
                colvarInfoCurrencyCode.AutoIncrement = false;
                colvarInfoCurrencyCode.IsNullable = false;
                colvarInfoCurrencyCode.IsPrimaryKey = false;
                colvarInfoCurrencyCode.IsForeignKey = false;
                colvarInfoCurrencyCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyCode);
                
                TableSchema.TableColumn colvarInfoCurrencyName = new TableSchema.TableColumn(schema);
                colvarInfoCurrencyName.ColumnName = "info_currency_name";
                colvarInfoCurrencyName.DataType = DbType.String;
                colvarInfoCurrencyName.MaxLength = 50;
                colvarInfoCurrencyName.AutoIncrement = false;
                colvarInfoCurrencyName.IsNullable = false;
                colvarInfoCurrencyName.IsPrimaryKey = false;
                colvarInfoCurrencyName.IsForeignKey = false;
                colvarInfoCurrencyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarInfoCurrencyName);
                
                TableSchema.TableColumn colvarUserKeyUpdated = new TableSchema.TableColumn(schema);
                colvarUserKeyUpdated.ColumnName = "user_key_updated";
                colvarUserKeyUpdated.DataType = DbType.Int32;
                colvarUserKeyUpdated.MaxLength = 0;
                colvarUserKeyUpdated.AutoIncrement = false;
                colvarUserKeyUpdated.IsNullable = false;
                colvarUserKeyUpdated.IsPrimaryKey = false;
                colvarUserKeyUpdated.IsForeignKey = false;
                colvarUserKeyUpdated.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserKeyUpdated);
                
                TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
                colvarFirstName.ColumnName = "first_name";
                colvarFirstName.DataType = DbType.String;
                colvarFirstName.MaxLength = 100;
                colvarFirstName.AutoIncrement = false;
                colvarFirstName.IsNullable = true;
                colvarFirstName.IsPrimaryKey = false;
                colvarFirstName.IsForeignKey = false;
                colvarFirstName.IsReadOnly = false;
                
                schema.Columns.Add(colvarFirstName);
                
                TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
                colvarLastName.ColumnName = "last_name";
                colvarLastName.DataType = DbType.String;
                colvarLastName.MaxLength = 100;
                colvarLastName.AutoIncrement = false;
                colvarLastName.IsNullable = true;
                colvarLastName.IsPrimaryKey = false;
                colvarLastName.IsForeignKey = false;
                colvarLastName.IsReadOnly = false;
                
                schema.Columns.Add(colvarLastName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Peerfx"].AddSchema("vw_System_Bank_Accounts",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VwSystemBankAccount()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VwSystemBankAccount(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VwSystemBankAccount(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VwSystemBankAccount(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("BankName")]
        [Bindable(true)]
        public string BankName 
	    {
		    get
		    {
			    return GetColumnValue<string>("bank_name");
		    }
            set 
		    {
			    SetColumnValue("bank_name", value);
            }
        }
	      
        [XmlAttribute("BankKey")]
        [Bindable(true)]
        public int BankKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("bank_key");
		    }
            set 
		    {
			    SetColumnValue("bank_key", value);
            }
        }
	      
        [XmlAttribute("BankAccount")]
        [Bindable(true)]
        public string BankAccount 
	    {
		    get
		    {
			    return GetColumnValue<string>("bank_account");
		    }
            set 
		    {
			    SetColumnValue("bank_account", value);
            }
        }
	      
        [XmlAttribute("InfoCurrenciesKey")]
        [Bindable(true)]
        public int InfoCurrenciesKey 
	    {
		    get
		    {
			    return GetColumnValue<int>("info_currencies_key");
		    }
            set 
		    {
			    SetColumnValue("info_currencies_key", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyCode")]
        [Bindable(true)]
        public string InfoCurrencyCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_code");
		    }
            set 
		    {
			    SetColumnValue("info_currency_code", value);
            }
        }
	      
        [XmlAttribute("InfoCurrencyName")]
        [Bindable(true)]
        public string InfoCurrencyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("info_currency_name");
		    }
            set 
		    {
			    SetColumnValue("info_currency_name", value);
            }
        }
	      
        [XmlAttribute("UserKeyUpdated")]
        [Bindable(true)]
        public int UserKeyUpdated 
	    {
		    get
		    {
			    return GetColumnValue<int>("user_key_updated");
		    }
            set 
		    {
			    SetColumnValue("user_key_updated", value);
            }
        }
	      
        [XmlAttribute("FirstName")]
        [Bindable(true)]
        public string FirstName 
	    {
		    get
		    {
			    return GetColumnValue<string>("first_name");
		    }
            set 
		    {
			    SetColumnValue("first_name", value);
            }
        }
	      
        [XmlAttribute("LastName")]
        [Bindable(true)]
        public string LastName 
	    {
		    get
		    {
			    return GetColumnValue<string>("last_name");
		    }
            set 
		    {
			    SetColumnValue("last_name", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string BankName = @"bank_name";
            
            public static string BankKey = @"bank_key";
            
            public static string BankAccount = @"bank_account";
            
            public static string InfoCurrenciesKey = @"info_currencies_key";
            
            public static string InfoCurrencyCode = @"info_currency_code";
            
            public static string InfoCurrencyName = @"info_currency_name";
            
            public static string UserKeyUpdated = @"user_key_updated";
            
            public static string FirstName = @"first_name";
            
            public static string LastName = @"last_name";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
